// Package details provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package details

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateAssociationsDetailsJSONBodyAssociationCategory.
const (
	HUBSPOTDEFINED    CreateAssociationsDetailsJSONBodyAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateAssociationsDetailsJSONBodyAssociationCategory = "INTEGRATOR_DEFINED"
	USERDEFINED       CreateAssociationsDetailsJSONBodyAssociationCategory = "USER_DEFINED"
)

// GetAssociationsDetailsParams defines parameters for GetAssociationsDetails.
type GetAssociationsDetailsParams struct {
	// After Cursor token for pagination, used to retrieve the next set of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of associations to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Authorization Bearer token for authentication.
	Authorization string `json:"authorization"`
}

// CreateAssociationsDetailsJSONBody defines parameters for CreateAssociationsDetails.
type CreateAssociationsDetailsJSONBody = []struct {
	AssociationCategory CreateAssociationsDetailsJSONBodyAssociationCategory `json:"associationCategory,omitempty"`
	AssociationTypeId   int                                                  `json:"associationTypeId,omitempty"`
}

// CreateAssociationsDetailsJSONBodyAssociationCategory defines parameters for CreateAssociationsDetails.
type CreateAssociationsDetailsJSONBodyAssociationCategory string

// CreateAssociationsDetailsJSONRequestBody defines body for CreateAssociationsDetails for application/json ContentType.
type CreateAssociationsDetailsJSONRequestBody = CreateAssociationsDetailsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Associate two objects in HubSpot CRM
	// (PUT /crm/v4/objects/{fromObjectType}/{fromObjectId}/associations/default/{toObjectType}/{toObjectId})
	CreateDefaultAssociationsDetails(ctx echo.Context, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string) error
	// Retrieve associations between objects
	// (GET /crm/v4/objects/{objectType}/{objectId}/associations/{toObjectType})
	GetAssociationsDetails(ctx echo.Context, objectType string, objectId string, toObjectType string, params GetAssociationsDetailsParams) error
	// Delete association between objects
	// (DELETE /crm/v4/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId})
	DeleteAssociation(ctx echo.Context, objectType string, objectId string, toObjectType string, toObjectId string) error
	// Associate two objects in HubSpot CRM
	// (PUT /crm/v4/objects/{objectType}/{objectId}/associations/{toObjectType}/{toObjectId})
	CreateAssociationsDetails(ctx echo.Context, objectType string, objectId string, toObjectType string, toObjectId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateDefaultAssociationsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDefaultAssociationsDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fromObjectType" -------------
	var fromObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "fromObjectType", ctx.Param("fromObjectType"), &fromObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromObjectType: %s", err))
	}

	// ------------- Path parameter "fromObjectId" -------------
	var fromObjectId string

	err = runtime.BindStyledParameterWithOptions("simple", "fromObjectId", ctx.Param("fromObjectId"), &fromObjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromObjectId: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectId" -------------
	var toObjectId string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectId", ctx.Param("toObjectId"), &toObjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDefaultAssociationsDetails(ctx, fromObjectType, fromObjectId, toObjectType, toObjectId)
	return err
}

// GetAssociationsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssociationsDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssociationsDetailsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "authorization", valueList[0], &Authorization, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAssociationsDetails(ctx, objectType, objectId, toObjectType, params)
	return err
}

// DeleteAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectId" -------------
	var toObjectId string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectId", ctx.Param("toObjectId"), &toObjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAssociation(ctx, objectType, objectId, toObjectType, toObjectId)
	return err
}

// CreateAssociationsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAssociationsDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectId" -------------
	var toObjectId string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectId", ctx.Param("toObjectId"), &toObjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAssociationsDetails(ctx, objectType, objectId, toObjectType, toObjectId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/crm/v4/objects/:fromObjectType/:fromObjectId/associations/default/:toObjectType/:toObjectId", wrapper.CreateDefaultAssociationsDetails)
	router.GET(baseURL+"/crm/v4/objects/:objectType/:objectId/associations/:toObjectType", wrapper.GetAssociationsDetails)
	router.DELETE(baseURL+"/crm/v4/objects/:objectType/:objectId/associations/:toObjectType/:toObjectId", wrapper.DeleteAssociation)
	router.PUT(baseURL+"/crm/v4/objects/:objectType/:objectId/associations/:toObjectType/:toObjectId", wrapper.CreateAssociationsDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bOBP9KwS/71Gx3Mu++C2N09bANgkc92lrFLQ0sthKpMKLG6+h/74Yyhfd7NqW",
	"ixSLfYpDkZzhnHNmhlzRQKaZFCCMpoMV1UEMKXM/dx++XmstA84Ml2IMOpNCA87IlMxAGQ5uPttNmiyz",
	"YowbSN2P/yuI6ID+z9/t6q9t+e2Gij1yj5plBnRAmVJsST36fDWXVzh2pb/z7EpmOJklV5nkwoCiA6Ms",
	"4DJ5P/sGgRmFaD8EHSju5tIBHQ2JjIiJgWychpBIN71HPSoF3Ed08NdqY1sbxcWc5t52BG3NQdF8eqxH",
	"u5MUhk44yqEANWAImIG5VMvmqW/WX+pn51IQ9AKPXj3w8S4mbAZJ0+SfOPwr7OGU45BtsbYB78Wg0/tV",
	"lLE5RuJ4yTwUC3KPKtA2MV11t3WtLr0LheFGATNQDsYQDOPJ/pBESqZlLZ+JolfaaLKlTyfCV2Pdhcud",
	"E9zZQdls0zUkl2THECJmE3MKSXCPBAyE16YLFm0a2lvmHjMIDk64KeXicz2qldVOaHfACLXTPCt/GcIY",
	"+Zu40uUM56leG6Y6s1wbZqx+aa0/bEtdFUkBz+bkAniHiy7q2N3ajZq6I7eo3ndMYiCBVVoqYuR3ECTC",
	"XzEQPAzJ2BywL1lnl06NFhff283jl19kthHWHIe4iGTTleuHkfMiAhPEXMzLjZgmMzA/AMS62daEC/LR",
	"zh4ziVAZbhI0sh4h5fxPrh9G1KMLULqws3iFHYrMQLCM0wF90+v3+tSjGTOxQ8oPVOov3vprU/6qWv7z",
	"8sAozP2yn35YVCB/VS6P+e7fUZg7blhHESSIW4jZmf6khmnnpGIpGFDaXTM4Hggdpx4VLMUYVJ2lWJme",
	"LFcQFpB465taU8M53lIObjgKL7BdOS4X3O5E36auYruWwGH+ut8vmgFhQDhoWJYlPHDx979pZM6qtN+R",
	"KebYrsTJoiqHRxsEoHVkk7IQXKbSNk0ZNgd0syUQ80O2aIPcjD+5JQ1OyzI5ZTuXqxzGY8/BNIX7HgUL",
	"ul2vmFN0BgGP+PaqTJgICRPSxKA2QwgQ+cFNTNxFprh+aZtlUhVX64pSPsBx+mgmO2dnfdPT0qoASvf3",
	"Fn7Js8natG0Ff7JAeAjCYDzU6Y6cLsHDITBMzcFsQZBEgVEcFlBFM5Jqj1td5Fx7ZahXwR0RPGI1hBX3",
	"trVKo/uVUgXPDFt6OqCvXr/ZeP1kQS13bhfV+CT/PrFnntqUCJvOCugqISqcs0r09phMeMpNxeS6VtDB",
	"H/1+442hxYN3wBSUI8SsiZFLRZraGo6Bhe50m8NaE0vF/y4yyG+YJltfOA7mxGS5pUJYwaFXy5DjVj7X",
	"uolLpchGmQ8Br5bNlDl045owUXlu2ibNvcm890WMC/R0DX2y4IwwUuZI74toZM7CcingRzUV8pIlW/77",
	"m4m3Le1tCWdd5nHBkbBO3AKoVnpsWOtRw+aIWXlzOs29Q+3luX3lfxT4KQWeLGjzTobLk3Lkz5+Lyq9B",
	"IGyKiH/8/O7x4X7ydXj7fnR3O6Qe/fx4Oy79O7qb3H4YX0/ud4NT7/d8TDr3USPP6xDlDSW++nVt/cv1",
	"87gGAqu4WTq5SiwFr5EWgUp762U9DWrBA9A9BSykU+QoDm00blWCvYIxmR74Pst4L7Yz/BPI1Kf5NP8n",
	"AAD//89c0FzjGwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
