// Package details provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package details

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// AssociationResponse defines model for AssociationResponse.
type AssociationResponse struct {
	AssociationTypes []AssociationTypes `json:"associationTypes,omitempty"`

	// ToObjectId ID of the associated object.
	ToObjectId AssociationResponse_ToObjectId `json:"toObjectId,omitempty"`
}

// AssociationResponseToObjectId0 defines model for .
type AssociationResponseToObjectId0 = string

// AssociationResponseToObjectId1 defines model for .
type AssociationResponseToObjectId1 = int

// AssociationResponse_ToObjectId ID of the associated object.
type AssociationResponse_ToObjectId struct {
	union json.RawMessage
}

// AssociationTypes defines model for AssociationTypes.
type AssociationTypes struct {
	// Category Category of the association type.
	Category string `json:"category,omitempty"`

	// Label Label of the association type.
	Label string `json:"label,omitempty"`

	// TypeId ID of the association type.
	TypeId int `json:"typeId,omitempty"`
}

// AssociationsResponse defines model for AssociationsResponse.
type AssociationsResponse struct {
	Paging  Paging                 `json:"paging,omitempty"`
	Results *[]AssociationResponse `json:"results,omitempty"`
}

// CreateAssociationsDetailResponse defines model for CreateAssociationsDetailResponse.
type CreateAssociationsDetailResponse struct {
	FromObjectId     int      `json:"fromObjectId,omitempty"`
	FromObjectTypeId string   `json:"fromObjectTypeId,omitempty"`
	Labels           []string `json:"labels,omitempty"`
	ToObjectId       int      `json:"toObjectId,omitempty"`
	ToObjectTypeId   string   `json:"toObjectTypeId,omitempty"`
}

// CreateDefaultAssociationsDetailResponse defines model for CreateDefaultAssociationsDetailResponse.
type CreateDefaultAssociationsDetailResponse struct {
	CompletedAt string `json:"completedAt,omitempty"`
	Results     []struct {
		AssociationSpec struct {
			AssociationCategory string `json:"associationCategory,omitempty"`
			AssociationTypeId   int    `json:"associationTypeId,omitempty"`
		} `json:"associationSpec,omitempty"`
		From struct {
			Id string `json:"id,omitempty"`
		} `json:"from,omitempty"`
		To struct {
			Id string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"results,omitempty"`
	StartedAt string `json:"startedAt,omitempty"`
	Status    string `json:"status,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next *PagingNext `json:"next,omitempty"`
}

// PagingNext defines model for PagingNext.
type PagingNext struct {
	// After The cursor token for the next page of results.
	After string `json:"after,omitempty"`

	// Link The link for the next page of results.
	Link string `json:"link,omitempty"`
}

// AsAssociationResponseToObjectId0 returns the union data inside the AssociationResponse_ToObjectId as a AssociationResponseToObjectId0
func (t AssociationResponse_ToObjectId) AsAssociationResponseToObjectId0() (AssociationResponseToObjectId0, error) {
	var body AssociationResponseToObjectId0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssociationResponseToObjectId0 overwrites any union data inside the AssociationResponse_ToObjectId as the provided AssociationResponseToObjectId0
func (t *AssociationResponse_ToObjectId) FromAssociationResponseToObjectId0(v AssociationResponseToObjectId0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssociationResponseToObjectId0 performs a merge with any union data inside the AssociationResponse_ToObjectId, using the provided AssociationResponseToObjectId0
func (t *AssociationResponse_ToObjectId) MergeAssociationResponseToObjectId0(v AssociationResponseToObjectId0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssociationResponseToObjectId1 returns the union data inside the AssociationResponse_ToObjectId as a AssociationResponseToObjectId1
func (t AssociationResponse_ToObjectId) AsAssociationResponseToObjectId1() (AssociationResponseToObjectId1, error) {
	var body AssociationResponseToObjectId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssociationResponseToObjectId1 overwrites any union data inside the AssociationResponse_ToObjectId as the provided AssociationResponseToObjectId1
func (t *AssociationResponse_ToObjectId) FromAssociationResponseToObjectId1(v AssociationResponseToObjectId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssociationResponseToObjectId1 performs a merge with any union data inside the AssociationResponse_ToObjectId, using the provided AssociationResponseToObjectId1
func (t *AssociationResponse_ToObjectId) MergeAssociationResponseToObjectId1(v AssociationResponseToObjectId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AssociationResponse_ToObjectId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AssociationResponse_ToObjectId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
