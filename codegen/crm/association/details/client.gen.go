// Package details provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package details

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateDefaultAssociationsDetails request
	CreateDefaultAssociationsDetails(ctx context.Context, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssociationsDetails request
	GetAssociationsDetails(ctx context.Context, objectType string, objectId string, toObjectType string, params *GetAssociationsDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAssociation request
	DeleteAssociation(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAssociationsDetailsWithBody request with any body
	CreateAssociationsDetailsWithBody(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAssociationsDetails(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, body CreateAssociationsDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateDefaultAssociationsDetails(ctx context.Context, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDefaultAssociationsDetailsRequest(c.Server, fromObjectType, fromObjectId, toObjectType, toObjectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssociationsDetails(ctx context.Context, objectType string, objectId string, toObjectType string, params *GetAssociationsDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssociationsDetailsRequest(c.Server, objectType, objectId, toObjectType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAssociation(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssociationRequest(c.Server, objectType, objectId, toObjectType, toObjectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssociationsDetailsWithBody(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssociationsDetailsRequestWithBody(c.Server, objectType, objectId, toObjectType, toObjectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssociationsDetails(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, body CreateAssociationsDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssociationsDetailsRequest(c.Server, objectType, objectId, toObjectType, toObjectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateDefaultAssociationsDetailsRequest generates requests for CreateDefaultAssociationsDetails
func NewCreateDefaultAssociationsDetailsRequest(server string, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fromObjectType", runtime.ParamLocationPath, fromObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fromObjectId", runtime.ParamLocationPath, fromObjectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v4/objects/%s/%s/associations/default/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssociationsDetailsRequest generates requests for GetAssociationsDetails
func NewGetAssociationsDetailsRequest(server string, objectType string, objectId string, toObjectType string, params *GetAssociationsDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v4/objects/%s/%s/associations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("authorization", headerParam0)

	}

	return req, nil
}

// NewDeleteAssociationRequest generates requests for DeleteAssociation
func NewDeleteAssociationRequest(server string, objectType string, objectId string, toObjectType string, toObjectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v4/objects/%s/%s/associations/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAssociationsDetailsRequest calls the generic CreateAssociationsDetails builder with application/json body
func NewCreateAssociationsDetailsRequest(server string, objectType string, objectId string, toObjectType string, toObjectId string, body CreateAssociationsDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssociationsDetailsRequestWithBody(server, objectType, objectId, toObjectType, toObjectId, "application/json", bodyReader)
}

// NewCreateAssociationsDetailsRequestWithBody generates requests for CreateAssociationsDetails with any type of body
func NewCreateAssociationsDetailsRequestWithBody(server string, objectType string, objectId string, toObjectType string, toObjectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "toObjectType", runtime.ParamLocationPath, toObjectType)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "toObjectId", runtime.ParamLocationPath, toObjectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v4/objects/%s/%s/associations/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateDefaultAssociationsDetailsWithResponse request
	CreateDefaultAssociationsDetailsWithResponse(ctx context.Context, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*CreateDefaultAssociationsDetailsResponse, error)

	// GetAssociationsDetailsWithResponse request
	GetAssociationsDetailsWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, params *GetAssociationsDetailsParams, reqEditors ...RequestEditorFn) (*GetAssociationsDetailsResponse, error)

	// DeleteAssociationWithResponse request
	DeleteAssociationWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*DeleteAssociationResponse, error)

	// CreateAssociationsDetailsWithBodyWithResponse request with any body
	CreateAssociationsDetailsWithBodyWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssociationsDetailsResponse, error)

	CreateAssociationsDetailsWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, body CreateAssociationsDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssociationsDetailsResponse, error)
}

type CreateDefaultAssociationsDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateDefaultAssociationsDetailResponse
}

// Status returns HTTPResponse.Status
func (r CreateDefaultAssociationsDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDefaultAssociationsDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssociationsDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssociationsResponse
}

// Status returns HTTPResponse.Status
func (r GetAssociationsDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssociationsDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssociationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAssociationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssociationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssociationsDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateAssociationsDetailResponse
}

// Status returns HTTPResponse.Status
func (r CreateAssociationsDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssociationsDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateDefaultAssociationsDetailsWithResponse request returning *CreateDefaultAssociationsDetailsResponse
func (c *ClientWithResponses) CreateDefaultAssociationsDetailsWithResponse(ctx context.Context, fromObjectType string, fromObjectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*CreateDefaultAssociationsDetailsResponse, error) {
	rsp, err := c.CreateDefaultAssociationsDetails(ctx, fromObjectType, fromObjectId, toObjectType, toObjectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDefaultAssociationsDetailsResponse(rsp)
}

// GetAssociationsDetailsWithResponse request returning *GetAssociationsDetailsResponse
func (c *ClientWithResponses) GetAssociationsDetailsWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, params *GetAssociationsDetailsParams, reqEditors ...RequestEditorFn) (*GetAssociationsDetailsResponse, error) {
	rsp, err := c.GetAssociationsDetails(ctx, objectType, objectId, toObjectType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssociationsDetailsResponse(rsp)
}

// DeleteAssociationWithResponse request returning *DeleteAssociationResponse
func (c *ClientWithResponses) DeleteAssociationWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, reqEditors ...RequestEditorFn) (*DeleteAssociationResponse, error) {
	rsp, err := c.DeleteAssociation(ctx, objectType, objectId, toObjectType, toObjectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssociationResponse(rsp)
}

// CreateAssociationsDetailsWithBodyWithResponse request with arbitrary body returning *CreateAssociationsDetailsResponse
func (c *ClientWithResponses) CreateAssociationsDetailsWithBodyWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssociationsDetailsResponse, error) {
	rsp, err := c.CreateAssociationsDetailsWithBody(ctx, objectType, objectId, toObjectType, toObjectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociationsDetailsResponse(rsp)
}

func (c *ClientWithResponses) CreateAssociationsDetailsWithResponse(ctx context.Context, objectType string, objectId string, toObjectType string, toObjectId string, body CreateAssociationsDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssociationsDetailsResponse, error) {
	rsp, err := c.CreateAssociationsDetails(ctx, objectType, objectId, toObjectType, toObjectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssociationsDetailsResponse(rsp)
}

// ParseCreateDefaultAssociationsDetailsResponse parses an HTTP response from a CreateDefaultAssociationsDetailsWithResponse call
func ParseCreateDefaultAssociationsDetailsResponse(rsp *http.Response) (*CreateDefaultAssociationsDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDefaultAssociationsDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateDefaultAssociationsDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssociationsDetailsResponse parses an HTTP response from a GetAssociationsDetailsWithResponse call
func ParseGetAssociationsDetailsResponse(rsp *http.Response) (*GetAssociationsDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssociationsDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssociationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAssociationResponse parses an HTTP response from a DeleteAssociationWithResponse call
func ParseDeleteAssociationResponse(rsp *http.Response) (*DeleteAssociationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssociationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAssociationsDetailsResponse parses an HTTP response from a CreateAssociationsDetailsWithResponse call
func ParseCreateAssociationsDetailsResponse(rsp *http.Response) (*CreateAssociationsDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssociationsDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateAssociationsDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
