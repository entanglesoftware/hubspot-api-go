// Package schemas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schemas

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// CreateAssociationSchemaJSONBody defines parameters for CreateAssociationSchema.
type CreateAssociationSchemaJSONBody struct {
	// InverseLabel Label for the reverse association.
	InverseLabel string `json:"inverseLabel"`

	// Label Display label for the association.
	Label string `json:"label"`

	// Name Internal name of the association label.
	Name string `json:"name"`
}

// UpdateAssociationSchemaJSONBody defines parameters for UpdateAssociationSchema.
type UpdateAssociationSchemaJSONBody struct {
	// AssociationTypeId The ID of the association type
	AssociationTypeId int `json:"associationTypeId"`

	// InverseLabel The label shown on the associated record (inverse direction)
	InverseLabel string `json:"inverseLabel"`

	// Label The label shown on the source record
	Label string `json:"label"`
}

// CreateAssociationSchemaJSONRequestBody defines body for CreateAssociationSchema for application/json ContentType.
type CreateAssociationSchemaJSONRequestBody CreateAssociationSchemaJSONBody

// UpdateAssociationSchemaJSONRequestBody defines body for UpdateAssociationSchema for application/json ContentType.
type UpdateAssociationSchemaJSONRequestBody UpdateAssociationSchemaJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all association types between two object types
	// (GET /crm/v4/associations/{fromObjectType}/{toObjectType}/labels)
	GetAssociationsSchema(ctx echo.Context, fromObjectType string, toObjectType string) error
	// Create a user defined association definition
	// (POST /crm/v4/associations/{fromObjectType}/{toObjectType}/labels)
	CreateAssociationSchema(ctx echo.Context, fromObjectType string, toObjectType string) error
	// Update a user defined association definition
	// (PUT /crm/v4/associations/{fromObjectType}/{toObjectType}/labels)
	UpdateAssociationSchema(ctx echo.Context, fromObjectType string, toObjectType string) error
	// Deletes an association definition
	// (DELETE /crm/v4/associations/{fromObjectType}/{toObjectType}/labels/{associationTypeId})
	DeleteAssociationsSchema(ctx echo.Context, fromObjectType string, toObjectType string, associationTypeId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssociationsSchema converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssociationsSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fromObjectType" -------------
	var fromObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "fromObjectType", ctx.Param("fromObjectType"), &fromObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAssociationsSchema(ctx, fromObjectType, toObjectType)
	return err
}

// CreateAssociationSchema converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAssociationSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fromObjectType" -------------
	var fromObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "fromObjectType", ctx.Param("fromObjectType"), &fromObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAssociationSchema(ctx, fromObjectType, toObjectType)
	return err
}

// UpdateAssociationSchema converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAssociationSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fromObjectType" -------------
	var fromObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "fromObjectType", ctx.Param("fromObjectType"), &fromObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateAssociationSchema(ctx, fromObjectType, toObjectType)
	return err
}

// DeleteAssociationsSchema converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAssociationsSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fromObjectType" -------------
	var fromObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "fromObjectType", ctx.Param("fromObjectType"), &fromObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fromObjectType: %s", err))
	}

	// ------------- Path parameter "toObjectType" -------------
	var toObjectType string

	err = runtime.BindStyledParameterWithOptions("simple", "toObjectType", ctx.Param("toObjectType"), &toObjectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter toObjectType: %s", err))
	}

	// ------------- Path parameter "associationTypeId" -------------
	var associationTypeId int

	err = runtime.BindStyledParameterWithOptions("simple", "associationTypeId", ctx.Param("associationTypeId"), &associationTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associationTypeId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAssociationsSchema(ctx, fromObjectType, toObjectType, associationTypeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v4/associations/:fromObjectType/:toObjectType/labels", wrapper.GetAssociationsSchema)
	router.POST(baseURL+"/crm/v4/associations/:fromObjectType/:toObjectType/labels", wrapper.CreateAssociationSchema)
	router.PUT(baseURL+"/crm/v4/associations/:fromObjectType/:toObjectType/labels", wrapper.UpdateAssociationSchema)
	router.DELETE(baseURL+"/crm/v4/associations/:fromObjectType/:toObjectType/labels/:associationTypeId", wrapper.DeleteAssociationsSchema)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXT2/jthP9KgR/v0MLyFa63ZNvaYK2BrboItmeFkFNU2OLW4lkhqRdw9B3L4aU11Kk",
	"eG1sUhRFT5Yocv68efM43nNpams0aO/4bM+dLKEW8fH44fdr54xUwiujP+wsxM8WjQX0Kr1J4WFtcEfP",
	"BTiJytJuPuM37RdmVsyXwMTRFvM7C1OecfrlM+48Kr3mGf9zsjYTWpy4P5SdmGhLVBNrlPaAfOYxQJPx",
	"SiyhGrp8R8uv4Y+2zIuhw/ntGd7I1BrwbHfN55Nm+QmkvyDO8dK5O3DWaAfD8iG4UCUGKA91fPg/worP",
	"+P/yo7W8pUd+ihvHuAWi2L1+vnRS6ZUZ1uX6/ZytDLIVeFkqve6Wx7GUDFuC3wJolrw6pjT7OSzvraEI",
	"vPIVhdSusC6c7Pr9nGd8A+iSu813lLyxoIVVfMa/n15Nr3jGrfBlhDSXWOebt3k3jHy/QlP/Gp0TgE2+",
	"96b7Gkkej6/BD3P8kXIDdzI1YqazINVKQdEmyoQumNDGl4CHJYKabZUvmRVrpRONXbDWoCcmE2XiIjUB",
	"/wl8F4776DOmi6IGD+j47OPTcD+UkNy0DeNMQAltAORD0S5CjGdci5rA7wPEM47wGBRCkQiQtapF2PQ7",
	"u2myMf9Bq8cATBWgPUGClwTTLc5FoTzQ5tSAsZpvrq6SzGoPOhZWWFspGdHMPzkKd9+xd3k/Hhs+9kgf",
	"iPsgJTi3ClW1YwgeFWygGKPRlHDkLtS1IIHnd+ADasdEVQ30zh05tzVdWkVdsMaNMPgGQXhiMNOw7VmM",
	"1O9ZPPThzd0vPetDdiarHTTO52e3G4h7bFsqWQ703aCKTZK8/w287cblzTNRRW10r0LexwDO/2CK3UW8",
	"7d80SpNewrtTNzdJNqWFEPd20xve3s+PAbfK2UrsWhYdjH7JWEJqcMPTfaNFxejz2GUfnYwYbLoof+yn",
	"3zo7JPDw9AJs+qfby/3fISKpPZlgwQGyAlZK9w+mNRUdkXSEE8phkAVbJBHRIwoSHF3+VLK12oBmC9Ef",
	"WubFImOLuHeRxYtx0S3UYqguv0V3/6nLP0xdBnUdcoZSfX5eH47rcbg8pVlkMNHMlWarmdE9y1AwBGmw",
	"YN+0dlihECSd/vYCNXvGTTuyJBeXys8Qrq/TorcjI3gH4HYqTa1aMNcVjwIq8FA8lYnUZ+fKRJN9zYid",
	"7wd4NCkhCo2e+hpwG9fPGYFfvHtfsvnGzY1R44s2P/fMyLD78txI+A8kv0cIOgAyoPK7WAkjgi/fUCtI",
	"rKftX76pA9woCW6KIAr+QNHT0qF8ASs+46X31s3yXFg1LcOSfqSpc948NH8FAAD//9kvI8lGEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
