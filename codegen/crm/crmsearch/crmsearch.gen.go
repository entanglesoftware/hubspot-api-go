// Package crmsearch provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package crmsearch

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for FilterOperator.
const (
	CONTAINSTOKEN    FilterOperator = "CONTAINS_TOKEN"
	EQ               FilterOperator = "EQ"
	GT               FilterOperator = "GT"
	GTE              FilterOperator = "GTE"
	HASPROPERTY      FilterOperator = "HAS_PROPERTY"
	LT               FilterOperator = "LT"
	LTE              FilterOperator = "LTE"
	NEQ              FilterOperator = "NEQ"
	NOTCONTAINSTOKEN FilterOperator = "NOT_CONTAINS_TOKEN"
	NOTHASPROPERTY   FilterOperator = "NOT_HAS_PROPERTY"
)

// Defines values for SortDirection.
const (
	ASCENDING  SortDirection = "ASCENDING"
	DESCENDING SortDirection = "DESCENDING"
)

// Defines values for CrmSearchParamsObjectType.
const (
	Companies CrmSearchParamsObjectType = "companies"
	Contacts  CrmSearchParamsObjectType = "contacts"
)

// CRMObject Represents a generic CRM object returned by the API.
type CRMObject struct {
	// Archived Indicates whether the CRM object is archived.
	Archived *bool `json:"archived,omitempty"`

	// CreatedAt The timestamp when the CRM object was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id The unique identifier of the CRM object.
	Id         *string            `json:"id,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`

	// UpdatedAt The timestamp when the CRM object was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Filter A filter applied to a property in the search.
type Filter struct {
	// Operator The filter operator.
	Operator *FilterOperator `json:"operator,omitempty"`

	// PropertyName The name of the property to filter on.
	PropertyName *string `json:"propertyName,omitempty"`

	// Value The value to filter by.
	Value *string `json:"value,omitempty"`
}

// FilterOperator The filter operator.
type FilterOperator string

// FilterGroup A group of filters applied to the search.
type FilterGroup struct {
	// Filters A list of individual filters.
	Filters *[]Filter `json:"filters,omitempty"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	// After A pagination token for retrieving the next page of results.
	After *string `json:"after,omitempty"`

	// FilterGroups A list of filter groups for the search query.
	FilterGroups *[]FilterGroup `json:"filterGroups,omitempty"`

	// Limit The number of results to return per page.
	Limit *int `json:"limit,omitempty"`

	// Properties A list of properties to include in the response.
	Properties *[]string `json:"properties,omitempty"`

	// Sorts A list of sorting options for the search query.
	Sorts *[]Sort `json:"sorts,omitempty"`
}

// SearchResponse The response from the CRM Search API.
type SearchResponse struct {
	// Paging Pagination details for the response.
	Paging *struct {
		// Next Information about the next page of results.
		Next *struct {
			// After The token for the next page.
			After *string `json:"after,omitempty"`
		} `json:"next,omitempty"`
	} `json:"paging,omitempty"`

	// Results A list of CRM objects matching the search criteria.
	Results *[]CRMObject `json:"results,omitempty"`
}

// Sort Defines a sorting option for the search.
type Sort struct {
	// Direction The direction of sorting.
	Direction *SortDirection `json:"direction,omitempty"`

	// PropertyName The property to sort by.
	PropertyName *string `json:"propertyName,omitempty"`
}

// SortDirection The direction of sorting.
type SortDirection string

// CrmSearchParamsObjectType defines parameters for CrmSearch.
type CrmSearchParamsObjectType string

// CrmSearchJSONRequestBody defines body for CrmSearch for application/json ContentType.
type CrmSearchJSONRequestBody = SearchRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search CRM objects
	// (POST /crm/v3/objects/{objectType}/search)
	CrmSearch(ctx echo.Context, objectType CrmSearchParamsObjectType) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CrmSearch converts echo context to params.
func (w *ServerInterfaceWrapper) CrmSearch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType CrmSearchParamsObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CrmSearch(ctx, objectType)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/crm/v3/objects/:objectType/search", wrapper.CrmSearch)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xXT3PbthP9Khj8fod2hpGcJifdHMdJNG1k11IPnUwmgYiVuAkJwAColM34u3cWAEX9",
	"gTVy04sMgsDb3bdvd+nvvNSN0QqUd3zynbuygkaE5dXd+5vlFyg9PUhwpUXjUSs+4XdgLDi6wwRbgwKL",
	"Jbu6e890uMAs+NYqkGzZMV8Bu7ydjnjBjdUGrEcI+MKWFW5AHsNPlcRSeHDsWwW+AhtAdvDRsf424frO",
	"AJ/wpdY1CMUfCl5aEB7kZcb3RQXMYwPOi8aQAXWI/k04lgAIfaVtIzyfcCk8PKOrg0nnLao1WUSZN9Uq",
	"vG+BoQTlcYVgmV4dGBzl8A64khIJVNS3e/v79i5ZIwzhp8sdU6IBx4SSZBIt24i6BcdW2p7jQ9qIJ2ij",
	"NfLHaK2F8yyhnMttzpE3WHuwOQZW4Q0TxtQIknnNxEAHRqcckHqOFUlr4bXNR5eQ+0N0HVTb8MkHfv07",
	"L/gs/P62CD/XvOBvF+GHlu8u559u725ur+8Wf9LRm8Wng62rm9nicjqbf1rc/Ho9S2cONj8+rpNuJhrI",
	"+00a6EW3ZcLrbTwqm/uglDxgeLWDsOxGT8naW6tbk0vdml6QpxHX7SbxVNrS8Rxkjc4TIiqJG5StqHtw",
	"gkEPTbj2fwsrPuH/Gw/NcJw64ThJbYhHWCu6fIDz4OEd3LfgQo0cVPHqEdEasUYl6JF5/RVUKFAL3iJs",
	"UK1D9Ar+8nQw5NKCa2vvsplbDSyf5CRlL7A+tIRIMrtvwXZP5Cgm9oiogtfY4CMtQ7XNMvbEFBIlO44P",
	"ZsCGgHeiROVhHbNhTjbCPsjhFAGjKutWQt8HLDijlYO9OB/rgttonLb+pE06QFnT4dUPUjvX1j9NfDGm",
	"PN19xGxldbNt0PFmfkoHaa6P0W4HyUrwAushzl1a98FIw7lxH8cAYYmlbv1JvZ9VUmEabStpD+6sXpXj",
	"N/lwKvPDtHOsEb6s+uJNqS8terAozs7+8A12ngRILEf+vYYVKvoMOFDmgTCPyZVooYwgOYK3r3dEvzsV",
	"L+dX17PX09lbXvDX19uHfzfFdicX2Tp36tAWqpXOpO12GhiI0RMtu+lDxd61y7nRnqygrwk07RwUDS/4",
	"BqyLqM9HF6MLCkkbUMIgn/AXYavgRvgq8DoubTPevBgnW+PvcbHoDDyMozuh9LTLZPMPB8xX6BgoaTQq",
	"HxiJzlA4uz72wfwEo/WoYKVWXpTe0aoxQiG4gkkQtfuZuIxfNqjVVPIJv7JNDDF4bkUDcch+yNZaZ0Kd",
	"pk+9waNk+XNv+nNYJ+P0EMx/DvaR0IgkXnAVhMAHYjgV4H2Llv5h8LaFIv2vQgz1iuut8IJvjWT09vAx",
	"goHzr7TsCIFuggp0h6+OMhAx/uKi+AdTJ3v13vgP0tunar7fBkK+4hg+kN/oKNzYgEJfDRr65eLiP/c7",
	"TY6M40OL27a1PW8fCv4yOrR/75WQLDGdDj3PKFqJ1lfa4t8g2TM2VRtRo2TasgadI1tUql+hSxAvjyFm",
	"2rM3ulV795MWOwOj0Blc2zTCdkMedkKIQTuwm7zI+6oiT+IpXvDW1nzCK++Nm4zHwuCoapf0p9QNf/j4",
	"8E8AAAD//yLOwkpdDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
