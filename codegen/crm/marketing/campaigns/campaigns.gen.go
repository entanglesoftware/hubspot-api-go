// Package campaigns provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package campaigns

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetCampaignDetailsParams defines parameters for GetCampaignDetails.
type GetCampaignDetailsParams struct {
	// Properties Properties to include in the campaign response.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// StartDate Start date filter for the campaign data.
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate End date filter for the campaign data.
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve campaign details
	// (GET /marketing/v3/campaigns/{campaignGuid})
	GetCampaignDetails(ctx echo.Context, campaignGuid string, params GetCampaignDetailsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCampaignDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetCampaignDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "campaignGuid" -------------
	var campaignGuid string

	err = runtime.BindStyledParameterWithOptions("simple", "campaignGuid", ctx.Param("campaignGuid"), &campaignGuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter campaignGuid: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.services.read", "marketing.events.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCampaignDetailsParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", true, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "startDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDate: %s", err))
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "endDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDate: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCampaignDetails(ctx, campaignGuid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/marketing/v3/campaigns/:campaignGuid", wrapper.GetCampaignDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW/jNhD9K8S0R1vyZoEedAuy7TaHLYykPW2DgiFHFjcSyZBDJ66h/14MZfkjcrZJ",
	"gZ4kU8OZN2/4Hr0F5TrvLFqKUG0hqgY7mV8PH/5aypWxK170wXkMZDCHWHwmfv4YsIYKfigPe8pdpnKS",
	"5jfe1PczoI1HqMDdf0NFMIPn+crNeXEeH4yfO0/GWdnOvTOWMEBFIWE/g/MZJ+BknTdtQWNUweRsUMHv",
	"DQqVQnRBkHtAK2p+a1BwM8LLFQpXi4AxtRQL2MOMFJiDt8NsjX04X56//E9lJ7Se8qVk56VZ2U9I0rTx",
	"BqN3NuIZ8mLE4URM0wWUhPoyU1670EmCCrQknJPpcAK9n4HRR5kOy35/rN51gPLWE7QTjDse+Zsh7OK0",
	"wVcgdUjBqPNJrezwzKZzlO8WZAhyw7+T1+/jbJq0n0FElYKhzS0zM7ThZKLmImdt3dMwukSNC+ZvyQfk",
	"ymmcLP4RWqigIfKxKkvpfdGk++gdFcp1ZU5ZjhsYW1TOD+VU6IoBUCwihrVRGIuAUkMFNyi1kEphjIKc",
	"uLr5IoZQIWN0yuTSEWbQyfCAZOyqwDWP9ZUE+zAxhGVeWbEv4RuGz48D+vWHMoeeEDlQ1fOSsbWbavNy",
	"eZ1lWSOphguPchF60IuQVp90I+6RnhDtrtMojBW/pvtb5pKHaqjl0rsl8WXf0p9psbj4KZN0ubyGGawx",
	"xAHF+gN36jxa6Q1U8LFYFAtgtVCTh1DumSnXH8sRYyy34+vnZHTPkSukaZe/cHcYp809GWpE9KhMbVCL",
	"g15EHVwnpk1cLq+5Sw7LdFzzFD8jXZ26TMYeZIeEIUL19ZwlJmseEwqj0RKXD+yGbI8jSi5kOJppgFGM",
	"cNwysO4fkwmoBzec7a6zs6J9iWJ5aJecMFa1SSPP8xgFG3R2TIaDz77N8hpqZXSPCcPmAO/Ic47B7D1p",
	"4j+nxjFFeUsykGDjELVpCcP+HjmMU5Lcs/UCT+TtnyQhvIubn63+7zXR6n+teJctOzObeblYLIa/IJbQ",
	"5jMsvW+Nyses/BYZ1fYo3xvvj9euv+wJL4hO2Yjq1LYbEfhWwDXqiWiKwZhT18mwyR42RE4Chxqjg2cV",
	"jN799Tu2+ppb3jFlHDpKKn3PFKG/6/8JAAD///FEmz3qCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
