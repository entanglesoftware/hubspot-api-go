// Package invoices provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package invoices

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateInvoiceJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateInvoiceJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateInvoiceJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateInvoiceJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateInvoiceJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetInvoicesParams defines parameters for GetInvoices.
type GetInvoicesParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateInvoiceJSONBody defines parameters for CreateInvoice.
type CreateInvoiceJSONBody struct {
	// Associations List of associations for the invoice.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateInvoiceJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of invoice properties.
	Properties map[string]string `json:"properties"`
}

// CreateInvoiceJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateInvoice.
type CreateInvoiceJSONBodyAssociationsTypesAssociationCategory string

// SearchInvoicesJSONBody defines parameters for SearchInvoices.
type SearchInvoicesJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetInvoiceByIdParams defines parameters for GetInvoiceById.
type GetInvoiceByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateInvoiceJSONBody defines parameters for UpdateInvoice.
type UpdateInvoiceJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateInvoiceJSONRequestBody defines body for CreateInvoice for application/json ContentType.
type CreateInvoiceJSONRequestBody CreateInvoiceJSONBody

// SearchInvoicesJSONRequestBody defines body for SearchInvoices for application/json ContentType.
type SearchInvoicesJSONRequestBody SearchInvoicesJSONBody

// UpdateInvoiceJSONRequestBody defines body for UpdateInvoice for application/json ContentType.
type UpdateInvoiceJSONRequestBody UpdateInvoiceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of invoices
	// (GET /crm/v3/objects/invoices)
	GetInvoices(ctx echo.Context, params GetInvoicesParams) error
	// Create a new invoice
	// (POST /crm/v3/objects/invoices)
	CreateInvoice(ctx echo.Context) error
	// Search for invoices by email
	// (POST /crm/v3/objects/invoices/search)
	SearchInvoices(ctx echo.Context) error
	// Delete a invoice
	// (DELETE /crm/v3/objects/invoices/{invoiceId})
	DeleteInvoiceById(ctx echo.Context, invoiceId string) error
	// Get Invoice Details
	// (GET /crm/v3/objects/invoices/{invoiceId})
	GetInvoiceById(ctx echo.Context, invoiceId int64, params GetInvoiceByIdParams) error
	// Update a invoice
	// (PATCH /crm/v3/objects/invoices/{invoiceId})
	UpdateInvoice(ctx echo.Context, invoiceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoices(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.invoices.write", "crm.schemas.invoices.write", "crm.objects.invoices.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoicesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvoices(ctx, params)
	return err
}

// CreateInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvoice(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.invoices.write", "crm.schemas.invoices.write", "crm.objects.invoices.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvoice(ctx)
	return err
}

// SearchInvoices converts echo context to params.
func (w *ServerInterfaceWrapper) SearchInvoices(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.invoices.write", "crm.schemas.invoices.write", "crm.objects.invoices.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchInvoices(ctx)
	return err
}

// DeleteInvoiceById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvoiceById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.invoices.write", "crm.schemas.invoices.write", "crm.objects.invoices.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInvoiceById(ctx, invoiceId)
	return err
}

// GetInvoiceById converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoiceById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId int64

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.invoices.write", "crm.schemas.invoices.write", "crm.objects.invoices.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoiceByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvoiceById(ctx, invoiceId, params)
	return err
}

// UpdateInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceId" -------------
	var invoiceId string

	err = runtime.BindStyledParameterWithOptions("simple", "invoiceId", ctx.Param("invoiceId"), &invoiceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.invoices.write", "crm.schemas.invoices.write", "crm.objects.invoices.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateInvoice(ctx, invoiceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/invoices", wrapper.GetInvoices)
	router.POST(baseURL+"/crm/v3/objects/invoices", wrapper.CreateInvoice)
	router.POST(baseURL+"/crm/v3/objects/invoices/search", wrapper.SearchInvoices)
	router.DELETE(baseURL+"/crm/v3/objects/invoices/:invoiceId", wrapper.DeleteInvoiceById)
	router.GET(baseURL+"/crm/v3/objects/invoices/:invoiceId", wrapper.GetInvoiceById)
	router.PATCH(baseURL+"/crm/v3/objects/invoices/:invoiceId", wrapper.UpdateInvoice)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
