// Package orders provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package orders

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateOrderJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateOrderJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateOrderJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateOrderJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateOrderJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateOrderJSONBody defines parameters for CreateOrder.
type CreateOrderJSONBody struct {
	// Associations List of associations for the order.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateOrderJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of order properties.
	Properties map[string]string `json:"properties"`
}

// CreateOrderJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateOrder.
type CreateOrderJSONBodyAssociationsTypesAssociationCategory string

// SearchOrdersJSONBody defines parameters for SearchOrders.
type SearchOrdersJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetOrderByIdParams defines parameters for GetOrderById.
type GetOrderByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateOrderJSONBody defines parameters for UpdateOrder.
type UpdateOrderJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody CreateOrderJSONBody

// SearchOrdersJSONRequestBody defines body for SearchOrders for application/json ContentType.
type SearchOrdersJSONRequestBody SearchOrdersJSONBody

// UpdateOrderJSONRequestBody defines body for UpdateOrder for application/json ContentType.
type UpdateOrderJSONRequestBody UpdateOrderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of orders
	// (GET /crm/v3/objects/orders)
	GetOrders(ctx echo.Context, params GetOrdersParams) error
	// Create a new order
	// (POST /crm/v3/objects/orders)
	CreateOrder(ctx echo.Context) error
	// Search for orders by email
	// (POST /crm/v3/objects/orders/search)
	SearchOrders(ctx echo.Context) error
	// Delete a order
	// (DELETE /crm/v3/objects/orders/{orderId})
	DeleteOrderById(ctx echo.Context, orderId string) error
	// Get Order Details
	// (GET /crm/v3/objects/orders/{orderId})
	GetOrderById(ctx echo.Context, orderId int64, params GetOrderByIdParams) error
	// Update a order
	// (PATCH /crm/v3/objects/orders/{orderId})
	UpdateOrder(ctx echo.Context, orderId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.orders.write", "crm.objects.orders.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrders(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.orders.write", "crm.objects.orders.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// SearchOrders converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrders(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.orders.write", "crm.objects.orders.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchOrders(ctx)
	return err
}

// DeleteOrderById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.orders.write", "crm.objects.orders.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrderById(ctx, orderId)
	return err
}

// GetOrderById converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.orders.write", "crm.objects.orders.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrderByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderById(ctx, orderId, params)
	return err
}

// UpdateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.orders.write", "crm.objects.orders.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrder(ctx, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/orders", wrapper.GetOrders)
	router.POST(baseURL+"/crm/v3/objects/orders", wrapper.CreateOrder)
	router.POST(baseURL+"/crm/v3/objects/orders/search", wrapper.SearchOrders)
	router.DELETE(baseURL+"/crm/v3/objects/orders/:orderId", wrapper.DeleteOrderById)
	router.GET(baseURL+"/crm/v3/objects/orders/:orderId", wrapper.GetOrderById)
	router.PATCH(baseURL+"/crm/v3/objects/orders/:orderId", wrapper.UpdateOrder)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa3W/bOBL/VwjeAfei2Ol27x4M7EOapK2xrZNN3C0O2yDLSGOLrUSqJJXEKPy/H4ak",
	"vuWv2NkCe31Ja4kfM8OZ38xvqG80lGkmBQij6egbzZhiKRhQ9lf17vZEhTG/hwgfR6BDxTPDpaAjOhZh",
	"kkdApEgWhPlhRIHOE6MHNKDwyNIsATqasURDQDnO+pqDWtCACpYCHdFiHg2oDmNImdtnxvLElBPNIsOx",
	"d1ImwARdLoOGhFrLkDOUSnelPJVpyo40oIIGIpJwbYicEXn3GUJDcGlNjCQKjOJwD4T55SAi4zNNZlIN",
	"PomJFPDItQFhygG4H3ngSULugPC5kAqiwSdRKa5rurSF1HmaMrWgI3ruBjeWpQG9Z0kOdPQHjYAlmt6g",
	"0vCYJTLaYNDmMpVRuYHUbu2tqY3iYk6XpXmZUmyBv7VZ4KnRmVQpbdr6UskMlOGwg6Wzcg7amXuv4YKY",
	"GNBdMik0DD6J8YwwojMI+YxDVExbEK6JkIZkCjQIExButrZ6U9yuzSvR6haP9a3zjluOfhnr21ABqsQM",
	"bH8QjbWf7Rg+chO/5dpI1Gu/E3ngJsYz4YrEdkUesoRYq+jBJ/G2ehYxw4iCKA9xhRhIyh55mqdE5Okd",
	"qCq8NIZVrgQeJyii4GsO2mxxXC211p2ckzv2g5/xGOsyHeJEl8UiHcitQvjKh4eF6IYz8x5EnsZAxmdo",
	"fjyUGpA5OyAm49bM0BHlwvznZ1rKyIWBOSga0MejuTzCp0f6C8+OpF2cJUeZxDGKjozKoVSuTwR8g0LU",
	"oGhQ7eTNs+1GlRmdEjtIWDPpa57YN20rxnwe/+4cpq3JCcGXR9adyMzOJ6HiBtRe+gQU92dGqu6WEcy4",
	"AE1SGUGCmYc4uQcXxZSAgshT9O7z32hAJ/bvu6n9c04D+mZq/+B/355c315eXVyeX03/i0MvpretR6cX",
	"k+nJeHJ9O7349Xzix7Qe3jxdzwLAJzaQ+hylhHiMNYQib+a7xT72vV91npqLeQIO0XC3lJkwtmY2NWH2",
	"3ronNb7zwOver997Szh5cvz0BcYbJfNMd8PDnYduoNw/FczoiP5jWK0y9Dg27EbcwcR+Uthf2Ln12ms1",
	"oPrC9Sm69gH2d1ZcRaDaNWdT31AKw0Kzi55rzLkMfKF6qNUMD7/AwaQ7oFVXexBbQ5UiHjIDmnCXmyWu",
	"hJVtMaeGOgXN2V5E1jrobQ3WcRJU19VIJ6arxccYRE36B6aJH92oLLC+OjI8hT2AtK+6+SD41xwIj0AY",
	"pAiqhE8rzz643TrHKOJuYJM/dAC5nWC+wMLXCynLijLMx9m/dK1mrcm6sz9mq4rkVWLvimZ+9qJYuqeQ",
	"bSu+QV1PMbiY9zCLPUyRZ9EOvpowbYifcmCH3ZBkbaCtST0Zm+NuOxyRm7AM9slaTTR7pvrislStqbKA",
	"R7OzwhOctN2OE79+K7JnngV0a9EwVxrhRH4BUQILSkkyNrd0ptbZeirOJFx86d8e3zzTtofJfW1U6NhW",
	"y1yFMF5BS93bGjutAUFJAywi7GNft8s7dgfJWjESHFGau0eU/YWYrqTHXoaCJT+bMRDRtGFptgYdm7tZ",
	"mNRgDp7OPeq+WnzQoFa5SK5BoYM8xLKA6VXEbPduxQpSOG0a31nBH8r+vtBFKnzExUz20NPLsXXIGZgw",
	"xkxpE5cmMyVT8ja/u84kRq7hxraQ/BPiUgs5uRzTgN6D0m61+5fUdRoEyzgd0ZeD48ExDWjGTGyjdRiq",
	"dHj/cuj7dEO3G76ZQ086fY1SgS6Esi03m7Vs4UiYiFrVjWtycCnwtOkbME5QK0J10/BHe5/3nUaihz/b",
	"P0RIbFws/Pu4v2mX8JSb/iuFF8cdL1oug07ndJdsUIpD338+efH+5Jdf6IrevE0/dbFaJSUK0pcRK5sN",
	"+5vxT51YLyF3W6PFG3aaWvCk5Y0tYGwBYn3vp+PjgpqCsG7IsixB6sSlGH7WeDbfaubbpdKps8FOCXvp",
	"fLl+P2TnDFybtmw/X5W3RK2BGG6Z1D2hc2opEmFEwEPB+xz4FjF8evW+GzJumpWcopVs5/yVjBY7Gah0",
	"zU7jU9+GuVIgQlTrw/WZ65AX8GL3JbZzt+zyo7UXbkWvq3FN1mFqZbHaXNr0IOOUqTmY4sIuAsN4Uq3Y",
	"ajJv0SRvLDc+68J7b4VpLwobZfZKo5wyA/P+Cxn/pt2i98IXvd1rYCqMaUDffnh1fXkxvT07fz2enOMZ",
	"fbg+v6r9HE+m52+uTqYX1cNOx7bZIMC6pC8Dd+8NENhxpfa1wcufaB+E9pusYo2bRwT+zUfFDUwVW1FN",
	"4gusE9AD/Ck+4AxSBlBPsXwokv9rSfEzxpUuAWAtuV8uXQRzBRGeb02Sm94SobmnC8bC8Y30XZc6pAxo",
	"fQdf87Sg9cVOyLFta+tjDCYGF4thro1Mm40tIhUR0uzX3/Jr9RH9aVHlkocu5a931w5a0K7pkq0V6Dv0",
	"y6rA9psful3WyqRV12fDtn+3zpfV73v3vdZ631/aAVuFY4U76DwMQetZniSLdpnVrZlQMDZHykA9k7A3",
	"+P00ZqhdAkUY663JfstBcf/tQq0KcynFUZw7ptFnnQn/rH9L8GfFDO2HDM26zeXuku08tXBb0bfqZKdZ",
	"6/7uadd0fv5Te4CBJ1z1gvNFt0boVGeFrOWkTR9tBJu/sXCUq89UWqpWo3TDYv0+vSnNficG44KrWSS3",
	"w8r5ZsPLFwRSxpN2eK2Nrm/233G0dIGVgOnprJzZ55owjz/1PgbJNWKib7Lc86jIDr4cb0aUW8mK9Wox",
	"jja1EGwrqZ363OpGEifuoCDoGTNxxc+9Xp1aah1j71LYn7vGmEhy6jxiQKYNSK6joBcuah+bM0BhSfTT",
	"3h5NyU1lvV4MakmoQcmYiEiVOEkKhkXMsNXNm22N32P14uPKPey+6cOlniZO4xMTI0mukdxYyZyf9fVo",
	"eFRUAT8aNd+nUbMO5eQWKPcGfFuUnLkBNvMw4wqCVo1siyHnEwXBkrMStLhY36Rx04smzbawVLvBbgeK",
	"K84ODU+HKEG2oeaecZg6Q7fqFUbbg5c3d/q9r1HfNOCORF6B/8C4yEwRVLcx/kvZzuLPxO+rfQ5bbPzg",
	"9H87Tl9clP3FnH7Vtj84/f8Zp7+u16/1W1vvGc3U7PJlVcnatxDmipuFzZmS5Sb+CTE0VOnA846Bv4ux",
	"XV4a9L1SwCJ6g9lOg7ovMnCuEjqisTGZHg2HLOODOL/Df0KZDunyZvm/AAAA///S5qXJBjUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
