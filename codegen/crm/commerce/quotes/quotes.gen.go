// Package quotes provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package quotes

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateQuoteJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateQuoteJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateQuoteJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateQuoteJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateQuoteJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetQuotesParams defines parameters for GetQuotes.
type GetQuotesParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateQuoteJSONBody defines parameters for CreateQuote.
type CreateQuoteJSONBody struct {
	// Associations List of associations for the quote.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateQuoteJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of quote properties.
	Properties map[string]string `json:"properties"`
}

// CreateQuoteJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateQuote.
type CreateQuoteJSONBodyAssociationsTypesAssociationCategory string

// SearchQuotesJSONBody defines parameters for SearchQuotes.
type SearchQuotesJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetQuoteByIdParams defines parameters for GetQuoteById.
type GetQuoteByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateQuoteJSONBody defines parameters for UpdateQuote.
type UpdateQuoteJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateQuoteJSONRequestBody defines body for CreateQuote for application/json ContentType.
type CreateQuoteJSONRequestBody CreateQuoteJSONBody

// SearchQuotesJSONRequestBody defines body for SearchQuotes for application/json ContentType.
type SearchQuotesJSONRequestBody SearchQuotesJSONBody

// UpdateQuoteJSONRequestBody defines body for UpdateQuote for application/json ContentType.
type UpdateQuoteJSONRequestBody UpdateQuoteJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of quotes
	// (GET /crm/v3/objects/quotes)
	GetQuotes(ctx echo.Context, params GetQuotesParams) error
	// Create a new quote
	// (POST /crm/v3/objects/quotes)
	CreateQuote(ctx echo.Context) error
	// Search for quotes by email
	// (POST /crm/v3/objects/quotes/search)
	SearchQuotes(ctx echo.Context) error
	// Delete a quote
	// (DELETE /crm/v3/objects/quotes/{quoteId})
	DeleteQuoteById(ctx echo.Context, quoteId string) error
	// Get Quote Details
	// (GET /crm/v3/objects/quotes/{quoteId})
	GetQuoteById(ctx echo.Context, quoteId int64, params GetQuoteByIdParams) error
	// Update a quote
	// (PATCH /crm/v3/objects/quotes/{quoteId})
	UpdateQuote(ctx echo.Context, quoteId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetQuotes converts echo context to params.
func (w *ServerInterfaceWrapper) GetQuotes(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.quotes.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuotesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQuotes(ctx, params)
	return err
}

// CreateQuote converts echo context to params.
func (w *ServerInterfaceWrapper) CreateQuote(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.quotes.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateQuote(ctx)
	return err
}

// SearchQuotes converts echo context to params.
func (w *ServerInterfaceWrapper) SearchQuotes(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.quotes.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchQuotes(ctx)
	return err
}

// DeleteQuoteById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteQuoteById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "quoteId" -------------
	var quoteId string

	err = runtime.BindStyledParameterWithOptions("simple", "quoteId", ctx.Param("quoteId"), &quoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quoteId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.quotes.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteQuoteById(ctx, quoteId)
	return err
}

// GetQuoteById converts echo context to params.
func (w *ServerInterfaceWrapper) GetQuoteById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "quoteId" -------------
	var quoteId int64

	err = runtime.BindStyledParameterWithOptions("simple", "quoteId", ctx.Param("quoteId"), &quoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quoteId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.quotes.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetQuoteByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQuoteById(ctx, quoteId, params)
	return err
}

// UpdateQuote converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateQuote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "quoteId" -------------
	var quoteId string

	err = runtime.BindStyledParameterWithOptions("simple", "quoteId", ctx.Param("quoteId"), &quoteId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quoteId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.quotes.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateQuote(ctx, quoteId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/quotes", wrapper.GetQuotes)
	router.POST(baseURL+"/crm/v3/objects/quotes", wrapper.CreateQuote)
	router.POST(baseURL+"/crm/v3/objects/quotes/search", wrapper.SearchQuotes)
	router.DELETE(baseURL+"/crm/v3/objects/quotes/:quoteId", wrapper.DeleteQuoteById)
	router.GET(baseURL+"/crm/v3/objects/quotes/:quoteId", wrapper.GetQuoteById)
	router.PATCH(baseURL+"/crm/v3/objects/quotes/:quoteId", wrapper.UpdateQuote)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
