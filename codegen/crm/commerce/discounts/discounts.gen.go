// Package discounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package discounts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateDiscountJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateDiscountJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateDiscountJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateDiscountJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateDiscountJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetDiscountsParams defines parameters for GetDiscounts.
type GetDiscountsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateDiscountJSONBody defines parameters for CreateDiscount.
type CreateDiscountJSONBody struct {
	// Associations List of associations for the discount.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateDiscountJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of discount properties.
	Properties map[string]string `json:"properties"`
}

// CreateDiscountJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateDiscount.
type CreateDiscountJSONBodyAssociationsTypesAssociationCategory string

// SearchDiscountsJSONBody defines parameters for SearchDiscounts.
type SearchDiscountsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetDiscountByIdParams defines parameters for GetDiscountById.
type GetDiscountByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateDiscountJSONBody defines parameters for UpdateDiscount.
type UpdateDiscountJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateDiscountJSONRequestBody defines body for CreateDiscount for application/json ContentType.
type CreateDiscountJSONRequestBody CreateDiscountJSONBody

// SearchDiscountsJSONRequestBody defines body for SearchDiscounts for application/json ContentType.
type SearchDiscountsJSONRequestBody SearchDiscountsJSONBody

// UpdateDiscountJSONRequestBody defines body for UpdateDiscount for application/json ContentType.
type UpdateDiscountJSONRequestBody UpdateDiscountJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of discounts
	// (GET /crm/v3/objects/discounts)
	GetDiscounts(ctx echo.Context, params GetDiscountsParams) error
	// Create a new discount
	// (POST /crm/v3/objects/discounts)
	CreateDiscount(ctx echo.Context) error
	// Search for discounts by email
	// (POST /crm/v3/objects/discounts/search)
	SearchDiscounts(ctx echo.Context) error
	// Delete a discount
	// (DELETE /crm/v3/objects/discounts/{discountId})
	DeleteDiscountById(ctx echo.Context, discountId string) error
	// Get Discount Details
	// (GET /crm/v3/objects/discounts/{discountId})
	GetDiscountById(ctx echo.Context, discountId int64, params GetDiscountByIdParams) error
	// Update a discount
	// (PATCH /crm/v3/objects/discounts/{discountId})
	UpdateDiscount(ctx echo.Context, discountId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiscounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscounts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.discounts.write", "crm.schemas.discounts.write", "crm.objects.discounts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscountsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiscounts(ctx, params)
	return err
}

// CreateDiscount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDiscount(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.discounts.write", "crm.schemas.discounts.write", "crm.objects.discounts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDiscount(ctx)
	return err
}

// SearchDiscounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDiscounts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.discounts.write", "crm.schemas.discounts.write", "crm.objects.discounts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchDiscounts(ctx)
	return err
}

// DeleteDiscountById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDiscountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "discountId" -------------
	var discountId string

	err = runtime.BindStyledParameterWithOptions("simple", "discountId", ctx.Param("discountId"), &discountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter discountId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.discounts.write", "crm.schemas.discounts.write", "crm.objects.discounts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDiscountById(ctx, discountId)
	return err
}

// GetDiscountById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscountById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "discountId" -------------
	var discountId int64

	err = runtime.BindStyledParameterWithOptions("simple", "discountId", ctx.Param("discountId"), &discountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter discountId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.discounts.write", "crm.schemas.discounts.write", "crm.objects.discounts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscountByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiscountById(ctx, discountId, params)
	return err
}

// UpdateDiscount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDiscount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "discountId" -------------
	var discountId string

	err = runtime.BindStyledParameterWithOptions("simple", "discountId", ctx.Param("discountId"), &discountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter discountId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.discounts.write", "crm.schemas.discounts.write", "crm.objects.discounts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDiscount(ctx, discountId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/discounts", wrapper.GetDiscounts)
	router.POST(baseURL+"/crm/v3/objects/discounts", wrapper.CreateDiscount)
	router.POST(baseURL+"/crm/v3/objects/discounts/search", wrapper.SearchDiscounts)
	router.DELETE(baseURL+"/crm/v3/objects/discounts/:discountId", wrapper.DeleteDiscountById)
	router.GET(baseURL+"/crm/v3/objects/discounts/:discountId", wrapper.GetDiscountById)
	router.PATCH(baseURL+"/crm/v3/objects/discounts/:discountId", wrapper.UpdateDiscount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
