// Package discounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package discounts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDiscounts request
	GetDiscounts(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDiscountWithBody request with any body
	CreateDiscountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDiscount(ctx context.Context, body CreateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchDiscountsWithBody request with any body
	SearchDiscountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchDiscounts(ctx context.Context, body SearchDiscountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDiscountById request
	DeleteDiscountById(ctx context.Context, discountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiscountById request
	GetDiscountById(ctx context.Context, discountId int64, params *GetDiscountByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDiscountWithBody request with any body
	UpdateDiscountWithBody(ctx context.Context, discountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDiscount(ctx context.Context, discountId string, body UpdateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDiscounts(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDiscountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDiscountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDiscount(ctx context.Context, body CreateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDiscountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDiscountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDiscountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDiscounts(ctx context.Context, body SearchDiscountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDiscountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDiscountById(ctx context.Context, discountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDiscountByIdRequest(c.Server, discountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiscountById(ctx context.Context, discountId int64, params *GetDiscountByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscountByIdRequest(c.Server, discountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDiscountWithBody(ctx context.Context, discountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDiscountRequestWithBody(c.Server, discountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDiscount(ctx context.Context, discountId string, body UpdateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDiscountRequest(c.Server, discountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDiscountsRequest generates requests for GetDiscounts
func NewGetDiscountsRequest(server string, params *GetDiscountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/discounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Properties != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PropertiesWithHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "propertiesWithHistory", runtime.ParamLocationQuery, *params.PropertiesWithHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Associations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDiscountRequest calls the generic CreateDiscount builder with application/json body
func NewCreateDiscountRequest(server string, body CreateDiscountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDiscountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDiscountRequestWithBody generates requests for CreateDiscount with any type of body
func NewCreateDiscountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/discounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchDiscountsRequest calls the generic SearchDiscounts builder with application/json body
func NewSearchDiscountsRequest(server string, body SearchDiscountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchDiscountsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchDiscountsRequestWithBody generates requests for SearchDiscounts with any type of body
func NewSearchDiscountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/discounts/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDiscountByIdRequest generates requests for DeleteDiscountById
func NewDeleteDiscountByIdRequest(server string, discountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "discountId", runtime.ParamLocationPath, discountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/discounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDiscountByIdRequest generates requests for GetDiscountById
func NewGetDiscountByIdRequest(server string, discountId int64, params *GetDiscountByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "discountId", runtime.ParamLocationPath, discountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/discounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdProperty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idProperty", runtime.ParamLocationQuery, *params.IdProperty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Properties != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PropertiesWithHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "propertiesWithHistory", runtime.ParamLocationQuery, *params.PropertiesWithHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Associations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDiscountRequest calls the generic UpdateDiscount builder with application/json body
func NewUpdateDiscountRequest(server string, discountId string, body UpdateDiscountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDiscountRequestWithBody(server, discountId, "application/json", bodyReader)
}

// NewUpdateDiscountRequestWithBody generates requests for UpdateDiscount with any type of body
func NewUpdateDiscountRequestWithBody(server string, discountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "discountId", runtime.ParamLocationPath, discountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/discounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDiscountsWithResponse request
	GetDiscountsWithResponse(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*GetDiscountsResponse, error)

	// CreateDiscountWithBodyWithResponse request with any body
	CreateDiscountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDiscountResponse, error)

	CreateDiscountWithResponse(ctx context.Context, body CreateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDiscountResponse, error)

	// SearchDiscountsWithBodyWithResponse request with any body
	SearchDiscountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDiscountsResponse, error)

	SearchDiscountsWithResponse(ctx context.Context, body SearchDiscountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDiscountsResponse, error)

	// DeleteDiscountByIdWithResponse request
	DeleteDiscountByIdWithResponse(ctx context.Context, discountId string, reqEditors ...RequestEditorFn) (*DeleteDiscountByIdResponse, error)

	// GetDiscountByIdWithResponse request
	GetDiscountByIdWithResponse(ctx context.Context, discountId int64, params *GetDiscountByIdParams, reqEditors ...RequestEditorFn) (*GetDiscountByIdResponse, error)

	// UpdateDiscountWithBodyWithResponse request with any body
	UpdateDiscountWithBodyWithResponse(ctx context.Context, discountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDiscountResponse, error)

	UpdateDiscountWithResponse(ctx context.Context, discountId string, body UpdateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDiscountResponse, error)
}

type GetDiscountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DiscountsResponse
}

// Status returns HTTPResponse.Status
func (r GetDiscountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDiscountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Archived Whether the customer is archived or not.
		Archived bool `json:"archived,omitempty"`

		// ArchivedAt Timestamp when the discount was archived.
		ArchivedAt time.Time `json:"archivedAt,omitempty"`

		// CreatedAt Timestamp when the discount was created.
		CreatedAt time.Time `json:"createdAt,omitempty"`

		// Id Unique ID of the created discount.
		Id string `json:"id,omitempty"`

		// Properties Properties of the created discount.
		Properties map[string]interface{} `json:"properties,omitempty"`

		// PropertiesWithHistory A map of the discount's properties including historical values.
		PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

		// UpdatedAt Timestamp when the discount was last updated.
		UpdatedAt time.Time `json:"updatedAt,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateDiscountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDiscountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchDiscountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DiscountsResponse
}

// Status returns HTTPResponse.Status
func (r SearchDiscountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDiscountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDiscountByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDiscountByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDiscountByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiscountByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DiscountResponse
}

// Status returns HTTPResponse.Status
func (r GetDiscountByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscountByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDiscountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Archived Whether the customer is archived or not.
		Archived bool `json:"archived,omitempty"`

		// ArchivedAt Timestamp when the discount was archived.
		ArchivedAt time.Time `json:"archivedAt,omitempty"`

		// CreatedAt Timestamp when the discount was created.
		CreatedAt time.Time `json:"createdAt,omitempty"`

		// Id Unique ID of the updated discount.
		Id string `json:"id,omitempty"`

		// Properties Properties of the updated discount.
		Properties map[string]interface{} `json:"properties,omitempty"`

		// PropertiesWithHistory A map of the discount's properties including historical values.
		PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

		// UpdatedAt Timestamp when the discount was last updated.
		UpdatedAt time.Time `json:"updatedAt,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateDiscountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDiscountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDiscountsWithResponse request returning *GetDiscountsResponse
func (c *ClientWithResponses) GetDiscountsWithResponse(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*GetDiscountsResponse, error) {
	rsp, err := c.GetDiscounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscountsResponse(rsp)
}

// CreateDiscountWithBodyWithResponse request with arbitrary body returning *CreateDiscountResponse
func (c *ClientWithResponses) CreateDiscountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDiscountResponse, error) {
	rsp, err := c.CreateDiscountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDiscountResponse(rsp)
}

func (c *ClientWithResponses) CreateDiscountWithResponse(ctx context.Context, body CreateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDiscountResponse, error) {
	rsp, err := c.CreateDiscount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDiscountResponse(rsp)
}

// SearchDiscountsWithBodyWithResponse request with arbitrary body returning *SearchDiscountsResponse
func (c *ClientWithResponses) SearchDiscountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDiscountsResponse, error) {
	rsp, err := c.SearchDiscountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDiscountsResponse(rsp)
}

func (c *ClientWithResponses) SearchDiscountsWithResponse(ctx context.Context, body SearchDiscountsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDiscountsResponse, error) {
	rsp, err := c.SearchDiscounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDiscountsResponse(rsp)
}

// DeleteDiscountByIdWithResponse request returning *DeleteDiscountByIdResponse
func (c *ClientWithResponses) DeleteDiscountByIdWithResponse(ctx context.Context, discountId string, reqEditors ...RequestEditorFn) (*DeleteDiscountByIdResponse, error) {
	rsp, err := c.DeleteDiscountById(ctx, discountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDiscountByIdResponse(rsp)
}

// GetDiscountByIdWithResponse request returning *GetDiscountByIdResponse
func (c *ClientWithResponses) GetDiscountByIdWithResponse(ctx context.Context, discountId int64, params *GetDiscountByIdParams, reqEditors ...RequestEditorFn) (*GetDiscountByIdResponse, error) {
	rsp, err := c.GetDiscountById(ctx, discountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscountByIdResponse(rsp)
}

// UpdateDiscountWithBodyWithResponse request with arbitrary body returning *UpdateDiscountResponse
func (c *ClientWithResponses) UpdateDiscountWithBodyWithResponse(ctx context.Context, discountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDiscountResponse, error) {
	rsp, err := c.UpdateDiscountWithBody(ctx, discountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDiscountResponse(rsp)
}

func (c *ClientWithResponses) UpdateDiscountWithResponse(ctx context.Context, discountId string, body UpdateDiscountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDiscountResponse, error) {
	rsp, err := c.UpdateDiscount(ctx, discountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDiscountResponse(rsp)
}

// ParseGetDiscountsResponse parses an HTTP response from a GetDiscountsWithResponse call
func ParseGetDiscountsResponse(rsp *http.Response) (*GetDiscountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiscountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiscountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDiscountResponse parses an HTTP response from a CreateDiscountWithResponse call
func ParseCreateDiscountResponse(rsp *http.Response) (*CreateDiscountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDiscountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Archived Whether the customer is archived or not.
			Archived bool `json:"archived,omitempty"`

			// ArchivedAt Timestamp when the discount was archived.
			ArchivedAt time.Time `json:"archivedAt,omitempty"`

			// CreatedAt Timestamp when the discount was created.
			CreatedAt time.Time `json:"createdAt,omitempty"`

			// Id Unique ID of the created discount.
			Id string `json:"id,omitempty"`

			// Properties Properties of the created discount.
			Properties map[string]interface{} `json:"properties,omitempty"`

			// PropertiesWithHistory A map of the discount's properties including historical values.
			PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

			// UpdatedAt Timestamp when the discount was last updated.
			UpdatedAt time.Time `json:"updatedAt,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseSearchDiscountsResponse parses an HTTP response from a SearchDiscountsWithResponse call
func ParseSearchDiscountsResponse(rsp *http.Response) (*SearchDiscountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDiscountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiscountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDiscountByIdResponse parses an HTTP response from a DeleteDiscountByIdWithResponse call
func ParseDeleteDiscountByIdResponse(rsp *http.Response) (*DeleteDiscountByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDiscountByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDiscountByIdResponse parses an HTTP response from a GetDiscountByIdWithResponse call
func ParseGetDiscountByIdResponse(rsp *http.Response) (*GetDiscountByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiscountByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DiscountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDiscountResponse parses an HTTP response from a UpdateDiscountWithResponse call
func ParseUpdateDiscountResponse(rsp *http.Response) (*UpdateDiscountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDiscountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Archived Whether the customer is archived or not.
			Archived bool `json:"archived,omitempty"`

			// ArchivedAt Timestamp when the discount was archived.
			ArchivedAt time.Time `json:"archivedAt,omitempty"`

			// CreatedAt Timestamp when the discount was created.
			CreatedAt time.Time `json:"createdAt,omitempty"`

			// Id Unique ID of the updated discount.
			Id string `json:"id,omitempty"`

			// Properties Properties of the updated discount.
			Properties map[string]interface{} `json:"properties,omitempty"`

			// PropertiesWithHistory A map of the discount's properties including historical values.
			PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

			// UpdatedAt Timestamp when the discount was last updated.
			UpdatedAt time.Time `json:"updatedAt,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
