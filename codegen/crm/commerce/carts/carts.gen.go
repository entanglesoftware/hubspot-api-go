// Package carts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package carts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateCartJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateCartJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateCartJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateCartJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateCartJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetCartsParams defines parameters for GetCarts.
type GetCartsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateCartJSONBody defines parameters for CreateCart.
type CreateCartJSONBody struct {
	// Associations List of associations for the cart.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateCartJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// Properties Key-value pairs of cart properties.
	Properties map[string]string `json:"properties"`
}

// CreateCartJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateCart.
type CreateCartJSONBodyAssociationsTypesAssociationCategory string

// SearchCartsJSONBody defines parameters for SearchCarts.
type SearchCartsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetCartByIdParams defines parameters for GetCartById.
type GetCartByIdParams struct {
	// Properties Properties to include in the response.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Properties to include with their history.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Associations to include in the response.
	Associations *string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Whether to include archived carts.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateCartJSONBody defines parameters for UpdateCart.
type UpdateCartJSONBody struct {
	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateCartJSONRequestBody defines body for CreateCart for application/json ContentType.
type CreateCartJSONRequestBody CreateCartJSONBody

// BatchUpsertCartsJSONRequestBody defines body for BatchUpsertCarts for application/json ContentType.
type BatchUpsertCartsJSONRequestBody = BatchCartsUpsertRequest

// SearchCartsJSONRequestBody defines body for SearchCarts for application/json ContentType.
type SearchCartsJSONRequestBody SearchCartsJSONBody

// UpdateCartJSONRequestBody defines body for UpdateCart for application/json ContentType.
type UpdateCartJSONRequestBody UpdateCartJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of carts
	// (GET /crm/v3/objects/carts)
	GetCarts(ctx echo.Context, params GetCartsParams) error
	// Create a single cart
	// (POST /crm/v3/objects/carts)
	CreateCart(ctx echo.Context) error
	// Batch create or update carts
	// (POST /crm/v3/objects/carts/batch/upsert)
	BatchUpsertCarts(ctx echo.Context) error
	// Search for carts
	// (POST /crm/v3/objects/carts/search)
	SearchCarts(ctx echo.Context) error
	// Delete a cart
	// (DELETE /crm/v3/objects/carts/{cartId})
	DeleteCartById(ctx echo.Context, cartId string) error
	// Get a cart by ID
	// (GET /crm/v3/objects/carts/{cartId})
	GetCartById(ctx echo.Context, cartId string, params GetCartByIdParams) error
	// Update a cart
	// (PATCH /crm/v3/objects/carts/{cartId})
	UpdateCart(ctx echo.Context, cartId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCarts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.carts.write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCartsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCarts(ctx, params)
	return err
}

// CreateCart converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCart(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.carts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCart(ctx)
	return err
}

// BatchUpsertCarts converts echo context to params.
func (w *ServerInterfaceWrapper) BatchUpsertCarts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchUpsertCarts(ctx)
	return err
}

// SearchCarts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCarts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.carts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchCarts(ctx)
	return err
}

// DeleteCartById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCartById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cartId" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cartId", ctx.Param("cartId"), &cartId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cartId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.carts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCartById(ctx, cartId)
	return err
}

// GetCartById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCartById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cartId" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cartId", ctx.Param("cartId"), &cartId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cartId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.carts.write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCartByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", true, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", true, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", true, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCartById(ctx, cartId, params)
	return err
}

// UpdateCart converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cartId" -------------
	var cartId string

	err = runtime.BindStyledParameterWithOptions("simple", "cartId", ctx.Param("cartId"), &cartId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cartId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.carts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCart(ctx, cartId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/carts", wrapper.GetCarts)
	router.POST(baseURL+"/crm/v3/objects/carts", wrapper.CreateCart)
	router.POST(baseURL+"/crm/v3/objects/carts/batch/upsert", wrapper.BatchUpsertCarts)
	router.POST(baseURL+"/crm/v3/objects/carts/search", wrapper.SearchCarts)
	router.DELETE(baseURL+"/crm/v3/objects/carts/:cartId", wrapper.DeleteCartById)
	router.GET(baseURL+"/crm/v3/objects/carts/:cartId", wrapper.GetCartById)
	router.PATCH(baseURL+"/crm/v3/objects/carts/:cartId", wrapper.UpdateCart)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hkOW80FczPBXKNIhXd2t/hsAAP//1WP2ECI7AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
