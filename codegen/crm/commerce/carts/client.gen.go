// Package carts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package carts

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCarts request
	GetCarts(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCartWithBody request with any body
	CreateCartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCart(ctx context.Context, body CreateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchUpsertCartsWithBody request with any body
	BatchUpsertCartsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchUpsertCarts(ctx context.Context, body BatchUpsertCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCartsWithBody request with any body
	SearchCartsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchCarts(ctx context.Context, body SearchCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCartById request
	DeleteCartById(ctx context.Context, cartId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCartById request
	GetCartById(ctx context.Context, cartId string, params *GetCartByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCartWithBody request with any body
	UpdateCartWithBody(ctx context.Context, cartId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCart(ctx context.Context, cartId string, body UpdateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCarts(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCartsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCart(ctx context.Context, body CreateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchUpsertCartsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchUpsertCartsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchUpsertCarts(ctx context.Context, body BatchUpsertCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchUpsertCartsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCartsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCartsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCarts(ctx context.Context, body SearchCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCartsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCartById(ctx context.Context, cartId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCartByIdRequest(c.Server, cartId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCartById(ctx context.Context, cartId string, params *GetCartByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCartByIdRequest(c.Server, cartId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCartWithBody(ctx context.Context, cartId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCartRequestWithBody(c.Server, cartId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCart(ctx context.Context, cartId string, body UpdateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCartRequest(c.Server, cartId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCartsRequest generates requests for GetCarts
func NewGetCartsRequest(server string, params *GetCartsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Properties != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PropertiesWithHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "propertiesWithHistory", runtime.ParamLocationQuery, *params.PropertiesWithHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Associations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCartRequest calls the generic CreateCart builder with application/json body
func NewCreateCartRequest(server string, body CreateCartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCartRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCartRequestWithBody generates requests for CreateCart with any type of body
func NewCreateCartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBatchUpsertCartsRequest calls the generic BatchUpsertCarts builder with application/json body
func NewBatchUpsertCartsRequest(server string, body BatchUpsertCartsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchUpsertCartsRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchUpsertCartsRequestWithBody generates requests for BatchUpsertCarts with any type of body
func NewBatchUpsertCartsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts/batch/upsert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchCartsRequest calls the generic SearchCarts builder with application/json body
func NewSearchCartsRequest(server string, body SearchCartsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchCartsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchCartsRequestWithBody generates requests for SearchCarts with any type of body
func NewSearchCartsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCartByIdRequest generates requests for DeleteCartById
func NewDeleteCartByIdRequest(server string, cartId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cartId", runtime.ParamLocationPath, cartId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCartByIdRequest generates requests for GetCartById
func NewGetCartByIdRequest(server string, cartId string, params *GetCartByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cartId", runtime.ParamLocationPath, cartId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Properties != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "properties", runtime.ParamLocationQuery, *params.Properties); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PropertiesWithHistory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "propertiesWithHistory", runtime.ParamLocationQuery, *params.PropertiesWithHistory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Associations != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "associations", runtime.ParamLocationQuery, *params.Associations); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Archived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "archived", runtime.ParamLocationQuery, *params.Archived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCartRequest calls the generic UpdateCart builder with application/json body
func NewUpdateCartRequest(server string, cartId string, body UpdateCartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCartRequestWithBody(server, cartId, "application/json", bodyReader)
}

// NewUpdateCartRequestWithBody generates requests for UpdateCart with any type of body
func NewUpdateCartRequestWithBody(server string, cartId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cartId", runtime.ParamLocationPath, cartId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/objects/carts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCartsWithResponse request
	GetCartsWithResponse(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*GetCartsResponse, error)

	// CreateCartWithBodyWithResponse request with any body
	CreateCartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCartResponse, error)

	CreateCartWithResponse(ctx context.Context, body CreateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCartResponse, error)

	// BatchUpsertCartsWithBodyWithResponse request with any body
	BatchUpsertCartsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchUpsertCartsResponse, error)

	BatchUpsertCartsWithResponse(ctx context.Context, body BatchUpsertCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchUpsertCartsResponse, error)

	// SearchCartsWithBodyWithResponse request with any body
	SearchCartsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchCartsResponse, error)

	SearchCartsWithResponse(ctx context.Context, body SearchCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchCartsResponse, error)

	// DeleteCartByIdWithResponse request
	DeleteCartByIdWithResponse(ctx context.Context, cartId string, reqEditors ...RequestEditorFn) (*DeleteCartByIdResponse, error)

	// GetCartByIdWithResponse request
	GetCartByIdWithResponse(ctx context.Context, cartId string, params *GetCartByIdParams, reqEditors ...RequestEditorFn) (*GetCartByIdResponse, error)

	// UpdateCartWithBodyWithResponse request with any body
	UpdateCartWithBodyWithResponse(ctx context.Context, cartId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCartResponse, error)

	UpdateCartWithResponse(ctx context.Context, cartId string, body UpdateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCartResponse, error)
}

type GetCartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CartsResponse
}

// Status returns HTTPResponse.Status
func (r GetCartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CartResponse
}

// Status returns HTTPResponse.Status
func (r CreateCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchUpsertCartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchCartsResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BatchUpsertCartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchUpsertCartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CartsResponse
}

// Status returns HTTPResponse.Status
func (r SearchCartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCartByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCartByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCartByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCartByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CartResponse
}

// Status returns HTTPResponse.Status
func (r GetCartByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCartByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Archived Whether the customer is archived or not.
		Archived bool `json:"archived,omitempty"`

		// ArchivedAt Timestamp when the cart was archived.
		ArchivedAt time.Time `json:"archivedAt,omitempty"`

		// CreatedAt Timestamp when the cart was created.
		CreatedAt time.Time `json:"createdAt,omitempty"`

		// Id Unique ID of the updated cart.
		Id string `json:"id,omitempty"`

		// Properties Properties of the updated cart.
		Properties map[string]interface{} `json:"properties,omitempty"`

		// PropertiesWithHistory A map of the cart's properties including historical values.
		PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

		// UpdatedAt Timestamp when the cart was last updated.
		UpdatedAt time.Time `json:"updatedAt,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UpdateCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCartsWithResponse request returning *GetCartsResponse
func (c *ClientWithResponses) GetCartsWithResponse(ctx context.Context, params *GetCartsParams, reqEditors ...RequestEditorFn) (*GetCartsResponse, error) {
	rsp, err := c.GetCarts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCartsResponse(rsp)
}

// CreateCartWithBodyWithResponse request with arbitrary body returning *CreateCartResponse
func (c *ClientWithResponses) CreateCartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCartResponse, error) {
	rsp, err := c.CreateCartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCartResponse(rsp)
}

func (c *ClientWithResponses) CreateCartWithResponse(ctx context.Context, body CreateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCartResponse, error) {
	rsp, err := c.CreateCart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCartResponse(rsp)
}

// BatchUpsertCartsWithBodyWithResponse request with arbitrary body returning *BatchUpsertCartsResponse
func (c *ClientWithResponses) BatchUpsertCartsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchUpsertCartsResponse, error) {
	rsp, err := c.BatchUpsertCartsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchUpsertCartsResponse(rsp)
}

func (c *ClientWithResponses) BatchUpsertCartsWithResponse(ctx context.Context, body BatchUpsertCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchUpsertCartsResponse, error) {
	rsp, err := c.BatchUpsertCarts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchUpsertCartsResponse(rsp)
}

// SearchCartsWithBodyWithResponse request with arbitrary body returning *SearchCartsResponse
func (c *ClientWithResponses) SearchCartsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchCartsResponse, error) {
	rsp, err := c.SearchCartsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCartsResponse(rsp)
}

func (c *ClientWithResponses) SearchCartsWithResponse(ctx context.Context, body SearchCartsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchCartsResponse, error) {
	rsp, err := c.SearchCarts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCartsResponse(rsp)
}

// DeleteCartByIdWithResponse request returning *DeleteCartByIdResponse
func (c *ClientWithResponses) DeleteCartByIdWithResponse(ctx context.Context, cartId string, reqEditors ...RequestEditorFn) (*DeleteCartByIdResponse, error) {
	rsp, err := c.DeleteCartById(ctx, cartId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCartByIdResponse(rsp)
}

// GetCartByIdWithResponse request returning *GetCartByIdResponse
func (c *ClientWithResponses) GetCartByIdWithResponse(ctx context.Context, cartId string, params *GetCartByIdParams, reqEditors ...RequestEditorFn) (*GetCartByIdResponse, error) {
	rsp, err := c.GetCartById(ctx, cartId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCartByIdResponse(rsp)
}

// UpdateCartWithBodyWithResponse request with arbitrary body returning *UpdateCartResponse
func (c *ClientWithResponses) UpdateCartWithBodyWithResponse(ctx context.Context, cartId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCartResponse, error) {
	rsp, err := c.UpdateCartWithBody(ctx, cartId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCartResponse(rsp)
}

func (c *ClientWithResponses) UpdateCartWithResponse(ctx context.Context, cartId string, body UpdateCartJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCartResponse, error) {
	rsp, err := c.UpdateCart(ctx, cartId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCartResponse(rsp)
}

// ParseGetCartsResponse parses an HTTP response from a GetCartsWithResponse call
func ParseGetCartsResponse(rsp *http.Response) (*GetCartsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CartsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCartResponse parses an HTTP response from a CreateCartWithResponse call
func ParseCreateCartResponse(rsp *http.Response) (*CreateCartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseBatchUpsertCartsResponse parses an HTTP response from a BatchUpsertCartsWithResponse call
func ParseBatchUpsertCartsResponse(rsp *http.Response) (*BatchUpsertCartsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchUpsertCartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchCartsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSearchCartsResponse parses an HTTP response from a SearchCartsWithResponse call
func ParseSearchCartsResponse(rsp *http.Response) (*SearchCartsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CartsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCartByIdResponse parses an HTTP response from a DeleteCartByIdWithResponse call
func ParseDeleteCartByIdResponse(rsp *http.Response) (*DeleteCartByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCartByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCartByIdResponse parses an HTTP response from a GetCartByIdWithResponse call
func ParseGetCartByIdResponse(rsp *http.Response) (*GetCartByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCartByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCartResponse parses an HTTP response from a UpdateCartWithResponse call
func ParseUpdateCartResponse(rsp *http.Response) (*UpdateCartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Archived Whether the customer is archived or not.
			Archived bool `json:"archived,omitempty"`

			// ArchivedAt Timestamp when the cart was archived.
			ArchivedAt time.Time `json:"archivedAt,omitempty"`

			// CreatedAt Timestamp when the cart was created.
			CreatedAt time.Time `json:"createdAt,omitempty"`

			// Id Unique ID of the updated cart.
			Id string `json:"id,omitempty"`

			// Properties Properties of the updated cart.
			Properties map[string]interface{} `json:"properties,omitempty"`

			// PropertiesWithHistory A map of the cart's properties including historical values.
			PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

			// UpdatedAt Timestamp when the cart was last updated.
			UpdatedAt time.Time `json:"updatedAt,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
