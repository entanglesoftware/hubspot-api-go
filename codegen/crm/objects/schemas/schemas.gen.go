// Package schemas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schemas

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetObjectSchemasParams defines parameters for GetObjectSchemas.
type GetObjectSchemasParams struct {
	// Archived Whether to include archived schemas.
	Archived bool `form:"archived" json:"archived"`
}

// DeleteSchemaParams defines parameters for DeleteSchema.
type DeleteSchemaParams struct {
	// Archived Whether the object schema is archived.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateSchemaJSONBody defines parameters for UpdateSchema.
type UpdateSchemaJSONBody struct {
	ClearDescription *bool   `json:"clearDescription,omitempty"`
	Description      *string `json:"description,omitempty"`
	Labels           *struct {
		// Plural Plural label of the custom object.
		Plural *string `json:"plural,omitempty"`

		// Singular Singular label of the custom object.
		Singular *string `json:"singular,omitempty"`
	} `json:"labels,omitempty"`
	PrimaryDisplayProperty     *string   `json:"primaryDisplayProperty,omitempty"`
	RequiredProperties         *[]string `json:"requiredProperties,omitempty"`
	Restorable                 *bool     `json:"restorable,omitempty"`
	SearchableProperties       *[]string `json:"searchableProperties,omitempty"`
	SecondaryDisplayProperties *[]string `json:"secondaryDisplayProperties,omitempty"`
}

// CreateAssociationJSONBody defines parameters for CreateAssociation.
type CreateAssociationJSONBody struct {
	FromObjectTypeId string  `json:"fromObjectTypeId"`
	Name             *string `json:"name,omitempty"`
	ToObjectTypeId   string  `json:"toObjectTypeId"`
}

// CreateCustomObjectSchemaJSONRequestBody defines body for CreateCustomObjectSchema for application/json ContentType.
type CreateCustomObjectSchemaJSONRequestBody = SchemaRequestBody

// UpdateSchemaJSONRequestBody defines body for UpdateSchema for application/json ContentType.
type UpdateSchemaJSONRequestBody UpdateSchemaJSONBody

// CreateAssociationJSONRequestBody defines body for CreateAssociation for application/json ContentType.
type CreateAssociationJSONRequestBody CreateAssociationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get CRM Object Schemas
	// (GET /crm-object-schemas/v3/schemas)
	GetObjectSchemas(ctx echo.Context, params GetObjectSchemasParams) error
	// Create a custom object schema
	// (POST /crm-object-schemas/v3/schemas)
	CreateCustomObjectSchema(ctx echo.Context) error
	// Delete CRM Object Schema
	// (DELETE /crm-object-schemas/v3/schemas/{objectType})
	DeleteSchema(ctx echo.Context, objectType string, params DeleteSchemaParams) error
	// Get CRM Object Schema
	// (GET /crm-object-schemas/v3/schemas/{objectType})
	GetExistingObjectSchema(ctx echo.Context, objectType string) error
	// Update a CRM object schema
	// (PATCH /crm-object-schemas/v3/schemas/{objectType})
	UpdateSchema(ctx echo.Context, objectType string) error
	// Create association between object schemas
	// (POST /crm-object-schemas/v3/schemas/{objectType}/associations)
	CreateAssociation(ctx echo.Context, objectType string) error
	// Delete an association in HubSpot CRM schema
	// (DELETE /crm-object-schemas/v3/schemas/{objectType}/associations/{associationIdentifier})
	DeleteAssociation(ctx echo.Context, objectType string, associationIdentifier string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetObjectSchemas converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSchemas(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSchemasParams
	// ------------- Required query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, true, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectSchemas(ctx, params)
	return err
}

// CreateCustomObjectSchema converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomObjectSchema(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCustomObjectSchema(ctx)
	return err
}

// DeleteSchema converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSchemaParams
	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchema(ctx, objectType, params)
	return err
}

// GetExistingObjectSchema converts echo context to params.
func (w *ServerInterfaceWrapper) GetExistingObjectSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExistingObjectSchema(ctx, objectType)
	return err
}

// UpdateSchema converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSchema(ctx, objectType)
	return err
}

// CreateAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAssociation(ctx, objectType)
	return err
}

// DeleteAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "associationIdentifier" -------------
	var associationIdentifier string

	err = runtime.BindStyledParameterWithOptions("simple", "associationIdentifier", ctx.Param("associationIdentifier"), &associationIdentifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associationIdentifier: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAssociation(ctx, objectType, associationIdentifier)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm-object-schemas/v3/schemas", wrapper.GetObjectSchemas)
	router.POST(baseURL+"/crm-object-schemas/v3/schemas", wrapper.CreateCustomObjectSchema)
	router.DELETE(baseURL+"/crm-object-schemas/v3/schemas/:objectType", wrapper.DeleteSchema)
	router.GET(baseURL+"/crm-object-schemas/v3/schemas/:objectType", wrapper.GetExistingObjectSchema)
	router.PATCH(baseURL+"/crm-object-schemas/v3/schemas/:objectType", wrapper.UpdateSchema)
	router.POST(baseURL+"/crm-object-schemas/v3/schemas/:objectType/associations", wrapper.CreateAssociation)
	router.DELETE(baseURL+"/crm-object-schemas/v3/schemas/:objectType/associations/:associationIdentifier", wrapper.DeleteAssociation)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
