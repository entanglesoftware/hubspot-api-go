// Package schemas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package schemas

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetObjectSchemasParams defines parameters for GetObjectSchemas.
type GetObjectSchemasParams struct {
	// Archived Whether to include archived schemas.
	Archived bool `form:"archived" json:"archived"`
}

// CreateCustomObjectSchemaJSONRequestBody defines body for CreateCustomObjectSchema for application/json ContentType.
type CreateCustomObjectSchemaJSONRequestBody = SchemaRequestBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get CRM Object Schemas
	// (GET /crm-object-schemas/v3/schemas)
	GetObjectSchemas(ctx echo.Context, params GetObjectSchemasParams) error
	// Create a custom object schema
	// (POST /crm-object-schemas/v3/schemas)
	CreateCustomObjectSchema(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetObjectSchemas converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSchemas(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSchemasParams
	// ------------- Required query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, true, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectSchemas(ctx, params)
	return err
}

// CreateCustomObjectSchema converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomObjectSchema(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.custom.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCustomObjectSchema(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm-object-schemas/v3/schemas", wrapper.GetObjectSchemas)
	router.POST(baseURL+"/crm-object-schemas/v3/schemas", wrapper.CreateCustomObjectSchema)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xXUW/bNhD+KwS3R9fO2u3Fb62HtQa61oib7SEwBlo6WywoUjmSTrXA/304UrIli3Fs",
	"ZE9RSN53H+++u6OfeGbKymjQzvLpE7dZAaUIn8eNf5ZhdYGmAnQSwrZ0UIaPqrecg81QVk4aPfiX/378",
	"j5kNcwWwxroe8xF3dQV8yq1Dqbd8P+K5tJUS9VfMARNocZcZ2j6DJ7WDLSABbiSo/FtYPkX7g7YYmVxE",
	"bWOwDCZDpLnOZSYcWCb7QExaJhhZskCkA7w2RoHQhLxF46svokxw/EhbTIvyMo6FsHdaPnj4SygP1xAt",
	"vXWsEDtgPgCwHSHYNOFC5jkksv13Aa4AHIQgnk9jSbtAWQqsm+R+FmtQLzKXtucgOgwwrJEQUwSU9qnS",
	"PoLri+Ksk8n6cmmatC/XgM2FP0ntnpd6IbUjAbFoE2Vkk6gm2C4NuqVD4WBbD2FnRjs0yrLCPPbTFK0t",
	"e5RKsTUwa9BBzqQOxz759bIyjt3Nz7ju9BP6+hlhw6edrjKuRal+mhwXJk3zmZy2m68N3n4/4ggbQNAZ",
	"5F/X3yFz6WK+PZxiJhyLhU2RezEdFgRmhVgrmOuPyqyFWoaVKwv9CENR2wagZjEtQ1uYx5lHol0v63Jt",
	"1JmSMoyOM8GyxoLZYJKGdvDDXacvsjinLpcM+7fLuufBnsfk8JDXBy8Rcj69bwqyOdSU1+pgIxBFTSaD",
	"AXULDx6s+2DyejiYhLUmk8K1whlOK95sMFcIxzKhSfhHM/YoXRGulnnrTNkoi+53mIXPxOnI+drxOHA1",
	"8BCC9dpa+xxB9hc1s5c5Vb0e3hRyov8sTpr0sf1c7qmb4+beyYuee8509Ld4/jXDj3tRIgKBtXaH3vIK",
	"cRxbxrUsOs3mf+GRGZ0PEphks2zPniaR+L2ay0ljSCSpEewoUd89dRwK5Vl1rgZdidxLvTHDW79fzMPl",
	"NuCyQuotiypjGzRlOx1JrtIpAmznZRQee7+Y8xHfAdqItnsXpyZoUUk+5e/GN+MbIipcEaI0ybB8E1m9",
	"afW8ezfpPNa34FJT0KGEHbDZ7Z/tHGxsekxHTOpM+ZwuQjqSO8jbg5QtCpAgzHlOj1BwMcLLxj0RRVGC",
	"A7R8en9mZkU3kHQi6eyDB6zbnJIK4jnelYFDD6NOs4MfoqwozHHjdPrtV2RsK6Nt1O/bm5v480Y7iLNQ",
	"VJWiQS6Nnny3sTMf8fstBsF65fq/gE60MQx3p3UdJ95A6Qn1ndSazzKwduMVa28UDK0vSdAxN8F7TBBr",
	"M0SN0thw134uZwjCwSyUZzepTcA7w/TicF3Vg7sTO3HhhaiVETlJJwtMw4On00ua+A70sX9lzq9Ihaob",
	"bvmw1R3Svx/xXyOFPswHkbMm0Cz3EGtkJ5Skp3blXWP5y9DyTgvvCoPyX8iZCGTC4d9SbubaAerw/sQd",
	"IANEg+MT7cxeiLATWypv3tMWX4XgWMg8Shrx90/cELO3dDTDctyWeEQdI4icr6goI5fYMTwqPuWFc5Wd",
	"TiaikuPCr+lPZsoJ36/2/wUAAP//b47Q2qgQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
