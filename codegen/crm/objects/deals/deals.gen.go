// Package deals provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package deals

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateDealJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateDealJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateDealJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateDealJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateDealJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetDealsParams defines parameters for GetDeals.
type GetDealsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateDealJSONBody defines parameters for CreateDeal.
type CreateDealJSONBody struct {
	// Associations List of associations for the deal.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateDealJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of deal properties.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateDeal.
type CreateDealJSONBodyAssociationsTypesAssociationCategory string

// SearchDealsJSONBody defines parameters for SearchDeals.
type SearchDealsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetDealByIdParams defines parameters for GetDealById.
type GetDealByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateDealJSONBody defines parameters for UpdateDeal.
type UpdateDealJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONRequestBody defines body for CreateDeal for application/json ContentType.
type CreateDealJSONRequestBody CreateDealJSONBody

// SearchDealsJSONRequestBody defines body for SearchDeals for application/json ContentType.
type SearchDealsJSONRequestBody SearchDealsJSONBody

// UpdateDealJSONRequestBody defines body for UpdateDeal for application/json ContentType.
type UpdateDealJSONRequestBody UpdateDealJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of deals
	// (GET /crm/v3/objects/deals)
	GetDeals(ctx echo.Context, params GetDealsParams) error
	// Create a new deal
	// (POST /crm/v3/objects/deals)
	CreateDeal(ctx echo.Context) error
	// Search for deals by email
	// (POST /crm/v3/objects/deals/search)
	SearchDeals(ctx echo.Context) error
	// Delete a deal
	// (DELETE /crm/v3/objects/deals/{dealId})
	DeleteDealById(ctx echo.Context, dealId string) error
	// Get Deal Details
	// (GET /crm/v3/objects/deals/{dealId})
	GetDealById(ctx echo.Context, dealId string, params GetDealByIdParams) error
	// Update a deal
	// (PATCH /crm/v3/objects/deals/{dealId})
	UpdateDeal(ctx echo.Context, dealId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeals(ctx, params)
	return err
}

// CreateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeal(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDeal(ctx)
	return err
}

// SearchDeals converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchDeals(ctx)
	return err
}

// DeleteDealById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDealById(ctx, dealId)
	return err
}

// GetDealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDealById(ctx, dealId, params)
	return err
}

// UpdateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeal(ctx, dealId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/deals", wrapper.GetDeals)
	router.POST(baseURL+"/crm/v3/objects/deals", wrapper.CreateDeal)
	router.POST(baseURL+"/crm/v3/objects/deals/search", wrapper.SearchDeals)
	router.DELETE(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.DeleteDealById)
	router.GET(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.GetDealById)
	router.PATCH(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.UpdateDeal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
