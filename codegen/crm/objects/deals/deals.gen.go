// Package deals provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package deals

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateDealJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateDealJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateDealJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateDealJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateDealJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetDealsParams defines parameters for GetDeals.
type GetDealsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateDealJSONBody defines parameters for CreateDeal.
type CreateDealJSONBody struct {
	// Associations List of associations for the deal.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateDealJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of deal properties.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateDeal.
type CreateDealJSONBodyAssociationsTypesAssociationCategory string

// SearchDealsJSONBody defines parameters for SearchDeals.
type SearchDealsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// SearchDealsParams defines parameters for SearchDeals.
type SearchDealsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetDealByIdParams defines parameters for GetDealById.
type GetDealByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateDealJSONBody defines parameters for UpdateDeal.
type UpdateDealJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONRequestBody defines body for CreateDeal for application/json ContentType.
type CreateDealJSONRequestBody CreateDealJSONBody

// SearchDealsJSONRequestBody defines body for SearchDeals for application/json ContentType.
type SearchDealsJSONRequestBody SearchDealsJSONBody

// UpdateDealJSONRequestBody defines body for UpdateDeal for application/json ContentType.
type UpdateDealJSONRequestBody UpdateDealJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of deals
	// (GET /crm/v3/objects/deals)
	GetDeals(ctx echo.Context, params GetDealsParams) error
	// Create a new deal
	// (POST /crm/v3/objects/deals)
	CreateDeal(ctx echo.Context) error
	// Search for deals by email
	// (POST /crm/v3/objects/deals/search)
	SearchDeals(ctx echo.Context, params SearchDealsParams) error
	// Delete a deal
	// (DELETE /crm/v3/objects/deals/{dealId})
	DeleteDealById(ctx echo.Context, dealId string) error
	// Get Deal Details
	// (GET /crm/v3/objects/deals/{dealId})
	GetDealById(ctx echo.Context, dealId string, params GetDealByIdParams) error
	// Update a deal
	// (PATCH /crm/v3/objects/deals/{dealId})
	UpdateDeal(ctx echo.Context, dealId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeals(ctx, params)
	return err
}

// CreateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeal(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDeal(ctx)
	return err
}

// SearchDeals converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDealsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchDeals(ctx, params)
	return err
}

// DeleteDealById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDealById(ctx, dealId)
	return err
}

// GetDealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDealById(ctx, dealId, params)
	return err
}

// UpdateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeal(ctx, dealId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/deals", wrapper.GetDeals)
	router.POST(baseURL+"/crm/v3/objects/deals", wrapper.CreateDeal)
	router.POST(baseURL+"/crm/v3/objects/deals/search", wrapper.SearchDeals)
	router.DELETE(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.DeleteDealById)
	router.GET(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.GetDealById)
	router.PATCH(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.UpdateDeal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"y+W/AwAA//80J6IpbzMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
