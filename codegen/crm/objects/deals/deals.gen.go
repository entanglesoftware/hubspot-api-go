// Package deals provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package deals

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateDealJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateDealJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateDealJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateDealJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateDealJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetDealsParams defines parameters for GetDeals.
type GetDealsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateDealJSONBody defines parameters for CreateDeal.
type CreateDealJSONBody struct {
	// Associations List of associations for the deal.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateDealJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of deal properties.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONBodyAssociationsAssociationCategory defines parameters for CreateDeal.
type CreateDealJSONBodyAssociationsAssociationCategory string

// SearchDealsJSONBody defines parameters for SearchDeals.
type SearchDealsJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchDealsParams defines parameters for SearchDeals.
type SearchDealsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetDealByIdParams defines parameters for GetDealById.
type GetDealByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateDealJSONBody defines parameters for UpdateDeal.
type UpdateDealJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONRequestBody defines body for CreateDeal for application/json ContentType.
type CreateDealJSONRequestBody CreateDealJSONBody

// SearchDealsJSONRequestBody defines body for SearchDeals for application/json ContentType.
type SearchDealsJSONRequestBody SearchDealsJSONBody

// UpdateDealJSONRequestBody defines body for UpdateDeal for application/json ContentType.
type UpdateDealJSONRequestBody UpdateDealJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of deals
	// (GET /crm/v3/objects/deals)
	GetDeals(ctx echo.Context, params GetDealsParams) error
	// Create a new deal
	// (POST /crm/v3/objects/deals)
	CreateDeal(ctx echo.Context) error
	// Search for deals by email
	// (POST /crm/v3/objects/deals/search)
	SearchDeals(ctx echo.Context, params SearchDealsParams) error
	// Delete a deal
	// (DELETE /crm/v3/objects/deals/{dealId})
	DeleteDealById(ctx echo.Context, dealId string) error
	// Get Deal Details
	// (GET /crm/v3/objects/deals/{dealId})
	GetDealById(ctx echo.Context, dealId string, params GetDealByIdParams) error
	// Update a deal
	// (PATCH /crm/v3/objects/deals/{dealId})
	UpdateDeal(ctx echo.Context, dealId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeals(ctx, params)
	return err
}

// CreateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeal(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDeal(ctx)
	return err
}

// SearchDeals converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDealsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchDeals(ctx, params)
	return err
}

// DeleteDealById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDealById(ctx, dealId)
	return err
}

// GetDealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDealById(ctx, dealId, params)
	return err
}

// UpdateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeal(ctx, dealId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/deals", wrapper.GetDeals)
	router.POST(baseURL+"/crm/v3/objects/deals", wrapper.CreateDeal)
	router.POST(baseURL+"/crm/v3/objects/deals/search", wrapper.SearchDeals)
	router.DELETE(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.DeleteDealById)
	router.GET(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.GetDealById)
	router.PATCH(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.UpdateDeal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
