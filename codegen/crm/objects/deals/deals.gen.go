// Package deals provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package deals

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateDealJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateDealJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateDealJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateDealJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateDealJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetDealsParams defines parameters for GetDeals.
type GetDealsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateDealJSONBody defines parameters for CreateDeal.
type CreateDealJSONBody struct {
	// Associations List of associations for the deal.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateDealJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of deal properties.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateDeal.
type CreateDealJSONBodyAssociationsTypesAssociationCategory string

// SearchDealsJSONBody defines parameters for SearchDeals.
type SearchDealsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetDealByIdParams defines parameters for GetDealById.
type GetDealByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateDealJSONBody defines parameters for UpdateDeal.
type UpdateDealJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONRequestBody defines body for CreateDeal for application/json ContentType.
type CreateDealJSONRequestBody CreateDealJSONBody

// SearchDealsJSONRequestBody defines body for SearchDeals for application/json ContentType.
type SearchDealsJSONRequestBody SearchDealsJSONBody

// UpdateDealJSONRequestBody defines body for UpdateDeal for application/json ContentType.
type UpdateDealJSONRequestBody UpdateDealJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of deals
	// (GET /crm/v3/objects/deals)
	GetDeals(ctx echo.Context, params GetDealsParams) error
	// Create a new deal
	// (POST /crm/v3/objects/deals)
	CreateDeal(ctx echo.Context) error
	// Search for deals by email
	// (POST /crm/v3/objects/deals/search)
	SearchDeals(ctx echo.Context) error
	// Delete a deal
	// (DELETE /crm/v3/objects/deals/{dealId})
	DeleteDealById(ctx echo.Context, dealId string) error
	// Get Deal Details
	// (GET /crm/v3/objects/deals/{dealId})
	GetDealById(ctx echo.Context, dealId string, params GetDealByIdParams) error
	// Update a deal
	// (PATCH /crm/v3/objects/deals/{dealId})
	UpdateDeal(ctx echo.Context, dealId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeals(ctx, params)
	return err
}

// CreateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeal(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDeal(ctx)
	return err
}

// SearchDeals converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchDeals(ctx)
	return err
}

// DeleteDealById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDealById(ctx, dealId)
	return err
}

// GetDealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDealById(ctx, dealId, params)
	return err
}

// UpdateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeal(ctx, dealId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/deals", wrapper.GetDeals)
	router.POST(baseURL+"/crm/v3/objects/deals", wrapper.CreateDeal)
	router.POST(baseURL+"/crm/v3/objects/deals/search", wrapper.SearchDeals)
	router.DELETE(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.DeleteDealById)
	router.GET(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.GetDealById)
	router.PATCH(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.UpdateDeal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
