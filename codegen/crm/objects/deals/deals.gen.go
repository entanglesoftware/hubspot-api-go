// Package deals provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package deals

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateDealJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateDealJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateDealJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateDealJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateDealJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetDealsParams defines parameters for GetDeals.
type GetDealsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateDealJSONBody defines parameters for CreateDeal.
type CreateDealJSONBody struct {
	// Associations List of associations for the deal.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateDealJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of deal properties.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONBodyAssociationsAssociationCategory defines parameters for CreateDeal.
type CreateDealJSONBodyAssociationsAssociationCategory string

// SearchDealsJSONBody defines parameters for SearchDeals.
type SearchDealsJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchDealsParams defines parameters for SearchDeals.
type SearchDealsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetDealByIdParams defines parameters for GetDealById.
type GetDealByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateDealJSONBody defines parameters for UpdateDeal.
type UpdateDealJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateDealJSONRequestBody defines body for CreateDeal for application/json ContentType.
type CreateDealJSONRequestBody CreateDealJSONBody

// SearchDealsJSONRequestBody defines body for SearchDeals for application/json ContentType.
type SearchDealsJSONRequestBody SearchDealsJSONBody

// UpdateDealJSONRequestBody defines body for UpdateDeal for application/json ContentType.
type UpdateDealJSONRequestBody UpdateDealJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of deals
	// (GET /crm/v3/objects/deals)
	GetDeals(ctx echo.Context, params GetDealsParams) error
	// Create a new deal
	// (POST /crm/v3/objects/deals)
	CreateDeal(ctx echo.Context) error
	// Search for deals by email
	// (POST /crm/v3/objects/deals/search)
	SearchDeals(ctx echo.Context, params SearchDealsParams) error
	// Delete a deal
	// (DELETE /crm/v3/objects/deals/{dealId})
	DeleteDealById(ctx echo.Context, dealId string) error
	// Get Deal Details
	// (GET /crm/v3/objects/deals/{dealId})
	GetDealById(ctx echo.Context, dealId string, params GetDealByIdParams) error
	// Update a deal
	// (PATCH /crm/v3/objects/deals/{dealId})
	UpdateDeal(ctx echo.Context, dealId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDeals converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeals(ctx, params)
	return err
}

// CreateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeal(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateDeal(ctx)
	return err
}

// SearchDeals converts echo context to params.
func (w *ServerInterfaceWrapper) SearchDeals(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDealsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchDeals(ctx, params)
	return err
}

// DeleteDealById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDealById(ctx, dealId)
	return err
}

// GetDealById converts echo context to params.
func (w *ServerInterfaceWrapper) GetDealById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDealByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDealById(ctx, dealId, params)
	return err
}

// UpdateDeal converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDeal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dealId" -------------
	var dealId string

	err = runtime.BindStyledParameterWithOptions("simple", "dealId", ctx.Param("dealId"), &dealId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dealId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.deals.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateDeal(ctx, dealId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/deals", wrapper.GetDeals)
	router.POST(baseURL+"/crm/v3/objects/deals", wrapper.CreateDeal)
	router.POST(baseURL+"/crm/v3/objects/deals/search", wrapper.SearchDeals)
	router.DELETE(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.DeleteDealById)
	router.GET(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.GetDealById)
	router.PATCH(baseURL+"/crm/v3/objects/deals/:dealId", wrapper.UpdateDeal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
