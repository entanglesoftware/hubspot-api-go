// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package products

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateProductJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateProductJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateProductJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateProductJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateProductJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	// Associations List of associations for the product.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateProductJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of product properties.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateProduct.
type CreateProductJSONBodyAssociationsTypesAssociationCategory string

// SearchProductsJSONBody defines parameters for SearchProducts.
type SearchProductsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetProductByIdParams defines parameters for GetProductById.
type GetProductByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// SearchProductsJSONRequestBody defines body for SearchProducts for application/json ContentType.
type SearchProductsJSONRequestBody SearchProductsJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of products
	// (GET /crm/v3/objects/products)
	GetProducts(ctx echo.Context, params GetProductsParams) error
	// Create a new product
	// (POST /crm/v3/objects/products)
	CreateProduct(ctx echo.Context) error
	// Search for products by email
	// (POST /crm/v3/objects/products/search)
	SearchProducts(ctx echo.Context) error
	// Delete a product
	// (DELETE /crm/v3/objects/products/{productId})
	DeleteProductById(ctx echo.Context, productId string) error
	// Get Product Details
	// (GET /crm/v3/objects/products/{productId})
	GetProductById(ctx echo.Context, productId string, params GetProductByIdParams) error
	// Update a product
	// (PATCH /crm/v3/objects/products/{productId})
	UpdateProduct(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProducts(ctx, params)
	return err
}

// CreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProduct(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProduct(ctx)
	return err
}

// SearchProducts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchProducts(ctx)
	return err
}

// DeleteProductById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProductById(ctx, productId)
	return err
}

// GetProductById converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProductById(ctx, productId, params)
	return err
}

// UpdateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProduct(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/products", wrapper.GetProducts)
	router.POST(baseURL+"/crm/v3/objects/products", wrapper.CreateProduct)
	router.POST(baseURL+"/crm/v3/objects/products/search", wrapper.SearchProducts)
	router.DELETE(baseURL+"/crm/v3/objects/products/:productId", wrapper.DeleteProductById)
	router.GET(baseURL+"/crm/v3/objects/products/:productId", wrapper.GetProductById)
	router.PATCH(baseURL+"/crm/v3/objects/products/:productId", wrapper.UpdateProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
