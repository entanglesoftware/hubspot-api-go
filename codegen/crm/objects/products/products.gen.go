// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package products

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateProductJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateProductJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateProductJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateProductJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateProductJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	// Associations List of associations for the product.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateProductJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of product properties.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateProduct.
type CreateProductJSONBodyAssociationsTypesAssociationCategory string

// SearchProductsJSONBody defines parameters for SearchProducts.
type SearchProductsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetProductByIdParams defines parameters for GetProductById.
type GetProductByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// SearchProductsJSONRequestBody defines body for SearchProducts for application/json ContentType.
type SearchProductsJSONRequestBody SearchProductsJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of products
	// (GET /crm/v3/objects/products)
	GetProducts(ctx echo.Context, params GetProductsParams) error
	// Create a new product
	// (POST /crm/v3/objects/products)
	CreateProduct(ctx echo.Context) error
	// Search for products by email
	// (POST /crm/v3/objects/products/search)
	SearchProducts(ctx echo.Context) error
	// Delete a product
	// (DELETE /crm/v3/objects/products/{productId})
	DeleteProductById(ctx echo.Context, productId string) error
	// Get Product Details
	// (GET /crm/v3/objects/products/{productId})
	GetProductById(ctx echo.Context, productId string, params GetProductByIdParams) error
	// Update a product
	// (PATCH /crm/v3/objects/products/{productId})
	UpdateProduct(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProducts(ctx, params)
	return err
}

// CreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProduct(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProduct(ctx)
	return err
}

// SearchProducts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchProducts(ctx)
	return err
}

// DeleteProductById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProductById(ctx, productId)
	return err
}

// GetProductById converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProductById(ctx, productId, params)
	return err
}

// UpdateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProduct(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/products", wrapper.GetProducts)
	router.POST(baseURL+"/crm/v3/objects/products", wrapper.CreateProduct)
	router.POST(baseURL+"/crm/v3/objects/products/search", wrapper.SearchProducts)
	router.DELETE(baseURL+"/crm/v3/objects/products/:productId", wrapper.DeleteProductById)
	router.GET(baseURL+"/crm/v3/objects/products/:productId", wrapper.GetProductById)
	router.PATCH(baseURL+"/crm/v3/objects/products/:productId", wrapper.UpdateProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
