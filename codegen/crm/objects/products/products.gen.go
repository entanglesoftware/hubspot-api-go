// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package products

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateProductJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateProductJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateProductJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateProductJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateProductJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	// Associations List of associations for the product.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateProductJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of product properties.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONBodyAssociationsAssociationCategory defines parameters for CreateProduct.
type CreateProductJSONBodyAssociationsAssociationCategory string

// SearchProductsJSONBody defines parameters for SearchProducts.
type SearchProductsJSONBody struct {
	After   *string `json:"after,omitempty"`
	Filters *[]struct {
		HighValue    *string   `json:"highValue,omitempty"`
		Operator     *string   `json:"operator,omitempty"`
		PropertyName *string   `json:"propertyName,omitempty"`
		Value        *string   `json:"value,omitempty"`
		Values       *[]string `json:"values,omitempty"`
	} `json:"filters,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchProductsParams defines parameters for SearchProducts.
type SearchProductsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetProductByIdParams defines parameters for GetProductById.
type GetProductByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`
	Properties         struct {
		// HsSku The new sku of the product.
		HsSku *string `json:"hs_sku,omitempty"`

		// Name The new name of the product.
		Name *string `json:"name,omitempty"`

		// Price The new price of the product.
		Price *int `json:"price,omitempty"`
	} `json:"properties"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// SearchProductsJSONRequestBody defines body for SearchProducts for application/json ContentType.
type SearchProductsJSONRequestBody SearchProductsJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of products
	// (GET /crm/v3/objects/products)
	GetProducts(ctx echo.Context, params GetProductsParams) error
	// Create a new product
	// (POST /crm/v3/objects/products)
	CreateProduct(ctx echo.Context) error
	// Search for products by email
	// (POST /crm/v3/objects/products/search)
	SearchProducts(ctx echo.Context, params SearchProductsParams) error
	// Delete a product
	// (DELETE /crm/v3/objects/products/{productId})
	DeleteProductById(ctx echo.Context, productId string) error
	// Get Product Details
	// (GET /crm/v3/objects/products/{productId})
	GetProductById(ctx echo.Context, productId string, params GetProductByIdParams) error
	// Update a product
	// (PATCH /crm/v3/objects/products/{productId})
	UpdateProduct(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProducts(ctx, params)
	return err
}

// CreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProduct(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProduct(ctx)
	return err
}

// SearchProducts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchProductsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchProducts(ctx, params)
	return err
}

// DeleteProductById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProductById(ctx, productId)
	return err
}

// GetProductById converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProductById(ctx, productId, params)
	return err
}

// UpdateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProduct(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/products", wrapper.GetProducts)
	router.POST(baseURL+"/crm/v3/objects/products", wrapper.CreateProduct)
	router.POST(baseURL+"/crm/v3/objects/products/search", wrapper.SearchProducts)
	router.DELETE(baseURL+"/crm/v3/objects/products/:productId", wrapper.DeleteProductById)
	router.GET(baseURL+"/crm/v3/objects/products/:productId", wrapper.GetProductById)
	router.PATCH(baseURL+"/crm/v3/objects/products/:productId", wrapper.UpdateProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
