// Package products provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package products

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateProductJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateProductJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateProductJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateProductJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateProductJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateProductJSONBody defines parameters for CreateProduct.
type CreateProductJSONBody struct {
	// Associations List of associations for the product.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateProductJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of product properties.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONBodyAssociationsAssociationCategory defines parameters for CreateProduct.
type CreateProductJSONBodyAssociationsAssociationCategory string

// SearchProductsJSONBody defines parameters for SearchProducts.
type SearchProductsJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchProductsParams defines parameters for SearchProducts.
type SearchProductsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetProductByIdParams defines parameters for GetProductById.
type GetProductByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateProductJSONBody defines parameters for UpdateProduct.
type UpdateProductJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody CreateProductJSONBody

// SearchProductsJSONRequestBody defines body for SearchProducts for application/json ContentType.
type SearchProductsJSONRequestBody SearchProductsJSONBody

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody UpdateProductJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of products
	// (GET /crm/v3/objects/products)
	GetProducts(ctx echo.Context, params GetProductsParams) error
	// Create a new product
	// (POST /crm/v3/objects/products)
	CreateProduct(ctx echo.Context) error
	// Search for products by email
	// (POST /crm/v3/objects/products/search)
	SearchProducts(ctx echo.Context, params SearchProductsParams) error
	// Delete a product
	// (DELETE /crm/v3/objects/products/{productId})
	DeleteProductById(ctx echo.Context, productId string) error
	// Get Product Details
	// (GET /crm/v3/objects/products/{productId})
	GetProductById(ctx echo.Context, productId string, params GetProductByIdParams) error
	// Update a product
	// (PATCH /crm/v3/objects/products/{productId})
	UpdateProduct(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProducts converts echo context to params.
func (w *ServerInterfaceWrapper) GetProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProducts(ctx, params)
	return err
}

// CreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProduct(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProduct(ctx)
	return err
}

// SearchProducts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchProducts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchProductsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchProducts(ctx, params)
	return err
}

// DeleteProductById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProductById(ctx, productId)
	return err
}

// GetProductById converts echo context to params.
func (w *ServerInterfaceWrapper) GetProductById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProductByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProductById(ctx, productId, params)
	return err
}

// UpdateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"e-commerce"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProduct(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/products", wrapper.GetProducts)
	router.POST(baseURL+"/crm/v3/objects/products", wrapper.CreateProduct)
	router.POST(baseURL+"/crm/v3/objects/products/search", wrapper.SearchProducts)
	router.DELETE(baseURL+"/crm/v3/objects/products/:productId", wrapper.DeleteProductById)
	router.GET(baseURL+"/crm/v3/objects/products/:productId", wrapper.GetProductById)
	router.PATCH(baseURL+"/crm/v3/objects/products/:productId", wrapper.UpdateProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
