// Package leads provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package leads

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateLeadJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateLeadJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateLeadJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateLeadJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateLeadJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetLeadsParams defines parameters for GetLeads.
type GetLeadsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateLeadJSONBody defines parameters for CreateLead.
type CreateLeadJSONBody struct {
	// Associations List of associations for the lead.
	Associations []struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateLeadJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of lead properties.
	Properties map[string]string `json:"properties"`
}

// CreateLeadJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateLead.
type CreateLeadJSONBodyAssociationsTypesAssociationCategory string

// SearchLeadsJSONBody defines parameters for SearchLeads.
type SearchLeadsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// SearchLeadsParams defines parameters for SearchLeads.
type SearchLeadsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetLeadByIdParams defines parameters for GetLeadById.
type GetLeadByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateLeadJSONBody defines parameters for UpdateLead.
type UpdateLeadJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the lead properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateLeadJSONRequestBody defines body for CreateLead for application/json ContentType.
type CreateLeadJSONRequestBody CreateLeadJSONBody

// SearchLeadsJSONRequestBody defines body for SearchLeads for application/json ContentType.
type SearchLeadsJSONRequestBody SearchLeadsJSONBody

// UpdateLeadJSONRequestBody defines body for UpdateLead for application/json ContentType.
type UpdateLeadJSONRequestBody UpdateLeadJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of leads
	// (GET /crm/v3/objects/leads)
	GetLeads(ctx echo.Context, params GetLeadsParams) error
	// Create a new lead
	// (POST /crm/v3/objects/leads)
	CreateLead(ctx echo.Context) error
	// Search for leads by email
	// (POST /crm/v3/objects/leads/search)
	SearchLeads(ctx echo.Context, params SearchLeadsParams) error
	// Delete a lead
	// (DELETE /crm/v3/objects/leads/{leadId})
	DeleteLeadById(ctx echo.Context, leadId string) error
	// Get Lead Details
	// (GET /crm/v3/objects/leads/{leadId})
	GetLeadById(ctx echo.Context, leadId string, params GetLeadByIdParams) error
	// Update a lead
	// (PATCH /crm/v3/objects/leads/{leadId})
	UpdateLead(ctx echo.Context, leadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLeads converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeads(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeads(ctx, params)
	return err
}

// CreateLead converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLead(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLead(ctx)
	return err
}

// SearchLeads converts echo context to params.
func (w *ServerInterfaceWrapper) SearchLeads(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLeadsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchLeads(ctx, params)
	return err
}

// DeleteLeadById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLeadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLeadById(ctx, leadId)
	return err
}

// GetLeadById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeadById(ctx, leadId, params)
	return err
}

// UpdateLead converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLead(ctx, leadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/leads", wrapper.GetLeads)
	router.POST(baseURL+"/crm/v3/objects/leads", wrapper.CreateLead)
	router.POST(baseURL+"/crm/v3/objects/leads/search", wrapper.SearchLeads)
	router.DELETE(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.DeleteLeadById)
	router.GET(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.GetLeadById)
	router.PATCH(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.UpdateLead)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//8U9UlHkjMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
