// Package leads provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package leads

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateLeadJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateLeadJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateLeadJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateLeadJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateLeadJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetLeadsParams defines parameters for GetLeads.
type GetLeadsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateLeadJSONBody defines parameters for CreateLead.
type CreateLeadJSONBody struct {
	// Associations List of associations for the lead.
	Associations []struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateLeadJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of lead properties.
	Properties map[string]string `json:"properties"`
}

// CreateLeadJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateLead.
type CreateLeadJSONBodyAssociationsTypesAssociationCategory string

// SearchLeadsJSONBody defines parameters for SearchLeads.
type SearchLeadsJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchLeadsParams defines parameters for SearchLeads.
type SearchLeadsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetLeadByIdParams defines parameters for GetLeadById.
type GetLeadByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateLeadJSONBody defines parameters for UpdateLead.
type UpdateLeadJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the lead properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateLeadJSONRequestBody defines body for CreateLead for application/json ContentType.
type CreateLeadJSONRequestBody CreateLeadJSONBody

// SearchLeadsJSONRequestBody defines body for SearchLeads for application/json ContentType.
type SearchLeadsJSONRequestBody SearchLeadsJSONBody

// UpdateLeadJSONRequestBody defines body for UpdateLead for application/json ContentType.
type UpdateLeadJSONRequestBody UpdateLeadJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of leads
	// (GET /crm/v3/objects/leads)
	GetLeads(ctx echo.Context, params GetLeadsParams) error
	// Create a new lead
	// (POST /crm/v3/objects/leads)
	CreateLead(ctx echo.Context) error
	// Search for leads by email
	// (POST /crm/v3/objects/leads/search)
	SearchLeads(ctx echo.Context, params SearchLeadsParams) error
	// Delete a lead
	// (DELETE /crm/v3/objects/leads/{leadId})
	DeleteLeadById(ctx echo.Context, leadId string) error
	// Get Lead Details
	// (GET /crm/v3/objects/leads/{leadId})
	GetLeadById(ctx echo.Context, leadId string, params GetLeadByIdParams) error
	// Update a lead
	// (PATCH /crm/v3/objects/leads/{leadId})
	UpdateLead(ctx echo.Context, leadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLeads converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeads(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeads(ctx, params)
	return err
}

// CreateLead converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLead(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLead(ctx)
	return err
}

// SearchLeads converts echo context to params.
func (w *ServerInterfaceWrapper) SearchLeads(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchLeadsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchLeads(ctx, params)
	return err
}

// DeleteLeadById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLeadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLeadById(ctx, leadId)
	return err
}

// GetLeadById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeadById(ctx, leadId, params)
	return err
}

// UpdateLead converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLead(ctx, leadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/leads", wrapper.GetLeads)
	router.POST(baseURL+"/crm/v3/objects/leads", wrapper.CreateLead)
	router.POST(baseURL+"/crm/v3/objects/leads/search", wrapper.SearchLeads)
	router.DELETE(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.DeleteLeadById)
	router.GET(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.GetLeadById)
	router.PATCH(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.UpdateLead)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
