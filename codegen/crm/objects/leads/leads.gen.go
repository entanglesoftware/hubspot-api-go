// Package leads provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package leads

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateLeadJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateLeadJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateLeadJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateLeadJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateLeadJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetLeadsParams defines parameters for GetLeads.
type GetLeadsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateLeadJSONBody defines parameters for CreateLead.
type CreateLeadJSONBody struct {
	// Associations List of associations for the lead.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateLeadJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of lead properties.
	Properties map[string]string `json:"properties"`
}

// CreateLeadJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateLead.
type CreateLeadJSONBodyAssociationsTypesAssociationCategory string

// SearchLeadsJSONBody defines parameters for SearchLeads.
type SearchLeadsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetLeadByIdParams defines parameters for GetLeadById.
type GetLeadByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateLeadJSONBody defines parameters for UpdateLead.
type UpdateLeadJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the lead properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateLeadJSONRequestBody defines body for CreateLead for application/json ContentType.
type CreateLeadJSONRequestBody CreateLeadJSONBody

// SearchLeadsJSONRequestBody defines body for SearchLeads for application/json ContentType.
type SearchLeadsJSONRequestBody SearchLeadsJSONBody

// UpdateLeadJSONRequestBody defines body for UpdateLead for application/json ContentType.
type UpdateLeadJSONRequestBody UpdateLeadJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of leads
	// (GET /crm/v3/objects/leads)
	GetLeads(ctx echo.Context, params GetLeadsParams) error
	// Create a new lead
	// (POST /crm/v3/objects/leads)
	CreateLead(ctx echo.Context) error
	// Search for leads by email
	// (POST /crm/v3/objects/leads/search)
	SearchLeads(ctx echo.Context) error
	// Delete a lead
	// (DELETE /crm/v3/objects/leads/{leadId})
	DeleteLeadById(ctx echo.Context, leadId string) error
	// Get Lead Details
	// (GET /crm/v3/objects/leads/{leadId})
	GetLeadById(ctx echo.Context, leadId string, params GetLeadByIdParams) error
	// Update a lead
	// (PATCH /crm/v3/objects/leads/{leadId})
	UpdateLead(ctx echo.Context, leadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLeads converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeads(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeads(ctx, params)
	return err
}

// CreateLead converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLead(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLead(ctx)
	return err
}

// SearchLeads converts echo context to params.
func (w *ServerInterfaceWrapper) SearchLeads(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchLeads(ctx)
	return err
}

// DeleteLeadById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLeadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLeadById(ctx, leadId)
	return err
}

// GetLeadById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLeadById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLeadByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLeadById(ctx, leadId, params)
	return err
}

// UpdateLead converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLead(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "leadId" -------------
	var leadId string

	err = runtime.BindStyledParameterWithOptions("simple", "leadId", ctx.Param("leadId"), &leadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leadId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"leads"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLead(ctx, leadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/leads", wrapper.GetLeads)
	router.POST(baseURL+"/crm/v3/objects/leads", wrapper.CreateLead)
	router.POST(baseURL+"/crm/v3/objects/leads/search", wrapper.SearchLeads)
	router.DELETE(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.DeleteLeadById)
	router.GET(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.GetLeadById)
	router.PATCH(baseURL+"/crm/v3/objects/leads/:leadId", wrapper.UpdateLead)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
