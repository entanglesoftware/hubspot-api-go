// Package companies provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package companies

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateCompanyJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetCompaniesParams defines parameters for GetCompanies.
type GetCompaniesParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateCompanyJSONBody defines parameters for CreateCompany.
type CreateCompanyJSONBody struct {
	// Associations List of associations for the company.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateCompanyJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of company properties.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateCompany.
type CreateCompanyJSONBodyAssociationsTypesAssociationCategory string

// SearchCompanyJSONBody defines parameters for SearchCompany.
type SearchCompanyJSONBody struct {
	After      *string       `json:"after,omitempty"`
	Limit      *int          `json:"limit,omitempty"`
	Properties *[]string     `json:"properties,omitempty"`
	Query      *string       `json:"query,omitempty"`
	Schema     *FilterGroups `json:"schema,omitempty"`
	Sorts      *[]string     `json:"sorts,omitempty"`
}

// SearchCompanyParams defines parameters for SearchCompany.
type SearchCompanyParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetCompanyByIdParams defines parameters for GetCompanyById.
type GetCompanyByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateCompanyJSONBody defines parameters for UpdateCompany.
type UpdateCompanyJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONRequestBody defines body for CreateCompany for application/json ContentType.
type CreateCompanyJSONRequestBody CreateCompanyJSONBody

// SearchCompanyJSONRequestBody defines body for SearchCompany for application/json ContentType.
type SearchCompanyJSONRequestBody SearchCompanyJSONBody

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody UpdateCompanyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of companies
	// (GET /crm/v3/objects/companies)
	GetCompanies(ctx echo.Context, params GetCompaniesParams) error
	// Create a new company
	// (POST /crm/v3/objects/companies)
	CreateCompany(ctx echo.Context) error
	// Search for companies by email
	// (POST /crm/v3/objects/companies/search)
	SearchCompany(ctx echo.Context, params SearchCompanyParams) error
	// Delete a company
	// (DELETE /crm/v3/objects/companies/{companyId})
	DeleteCompanyById(ctx echo.Context, companyId string) error
	// Get Company Details
	// (GET /crm/v3/objects/companies/{companyId})
	GetCompanyById(ctx echo.Context, companyId int64, params GetCompanyByIdParams) error
	// Update a company
	// (PATCH /crm/v3/objects/companies/{companyId})
	UpdateCompany(ctx echo.Context, companyId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompaniesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanies(ctx, params)
	return err
}

// CreateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCompany(ctx)
	return err
}

// SearchCompany converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCompanyParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchCompany(ctx, params)
	return err
}

// DeleteCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyById(ctx, companyId)
	return err
}

// GetCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId int64

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyById(ctx, companyId, params)
	return err
}

// UpdateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCompany(ctx, companyId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/companies", wrapper.GetCompanies)
	router.POST(baseURL+"/crm/v3/objects/companies", wrapper.CreateCompany)
	router.POST(baseURL+"/crm/v3/objects/companies/search", wrapper.SearchCompany)
	router.DELETE(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.DeleteCompanyById)
	router.GET(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.GetCompanyById)
	router.PATCH(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.UpdateCompany)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Z9KB/TQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
