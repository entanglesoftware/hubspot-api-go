// Package companies provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package companies

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateCompanyJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateCompanyJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateCompanyJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateCompanyJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateCompanyJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetCompaniesParams defines parameters for GetCompanies.
type GetCompaniesParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateCompanyJSONBody defines parameters for CreateCompany.
type CreateCompanyJSONBody struct {
	// Associations List of associations for the company.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateCompanyJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of company properties.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONBodyAssociationsAssociationCategory defines parameters for CreateCompany.
type CreateCompanyJSONBodyAssociationsAssociationCategory string

// SearchCompanyJSONBody defines parameters for SearchCompany.
type SearchCompanyJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchCompanyParams defines parameters for SearchCompany.
type SearchCompanyParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetCompanyByIdParams defines parameters for GetCompanyById.
type GetCompanyByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateCompanyJSONBody defines parameters for UpdateCompany.
type UpdateCompanyJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONRequestBody defines body for CreateCompany for application/json ContentType.
type CreateCompanyJSONRequestBody CreateCompanyJSONBody

// SearchCompanyJSONRequestBody defines body for SearchCompany for application/json ContentType.
type SearchCompanyJSONRequestBody SearchCompanyJSONBody

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody UpdateCompanyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of companies
	// (GET /crm/v3/objects/companies)
	GetCompanies(ctx echo.Context, params GetCompaniesParams) error
	// Create a new company
	// (POST /crm/v3/objects/companies)
	CreateCompany(ctx echo.Context) error
	// Search for companies by email
	// (POST /crm/v3/objects/companies/search)
	SearchCompany(ctx echo.Context, params SearchCompanyParams) error
	// Delete a company
	// (DELETE /crm/v3/objects/companies/{companyId})
	DeleteCompanyById(ctx echo.Context, companyId string) error
	// Get Company Details
	// (GET /crm/v3/objects/companies/{companyId})
	GetCompanyById(ctx echo.Context, companyId int64, params GetCompanyByIdParams) error
	// Update a company
	// (PATCH /crm/v3/objects/companies/{companyId})
	UpdateCompany(ctx echo.Context, companyId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompaniesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanies(ctx, params)
	return err
}

// CreateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCompany(ctx)
	return err
}

// SearchCompany converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCompanyParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchCompany(ctx, params)
	return err
}

// DeleteCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyById(ctx, companyId)
	return err
}

// GetCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId int64

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyById(ctx, companyId, params)
	return err
}

// UpdateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCompany(ctx, companyId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/companies", wrapper.GetCompanies)
	router.POST(baseURL+"/crm/v3/objects/companies", wrapper.CreateCompany)
	router.POST(baseURL+"/crm/v3/objects/companies/search", wrapper.SearchCompany)
	router.DELETE(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.DeleteCompanyById)
	router.GET(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.GetCompanyById)
	router.PATCH(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.UpdateCompany)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JKODOL/Vv0KeDvHiavG/AAAA//+Gkr4tQTMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
