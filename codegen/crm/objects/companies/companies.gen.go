// Package companies provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package companies

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateCompanyJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateCompanyJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetCompaniesParams defines parameters for GetCompanies.
type GetCompaniesParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateCompanyJSONBody defines parameters for CreateCompany.
type CreateCompanyJSONBody struct {
	// Associations List of associations for the company.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateCompanyJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of company properties.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateCompany.
type CreateCompanyJSONBodyAssociationsTypesAssociationCategory string

// SearchCompanyJSONBody defines parameters for SearchCompany.
type SearchCompanyJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchCompanyParams defines parameters for SearchCompany.
type SearchCompanyParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetCompanyByIdParams defines parameters for GetCompanyById.
type GetCompanyByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateCompanyJSONBody defines parameters for UpdateCompany.
type UpdateCompanyJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONRequestBody defines body for CreateCompany for application/json ContentType.
type CreateCompanyJSONRequestBody CreateCompanyJSONBody

// SearchCompanyJSONRequestBody defines body for SearchCompany for application/json ContentType.
type SearchCompanyJSONRequestBody SearchCompanyJSONBody

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody UpdateCompanyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of companies
	// (GET /crm/v3/objects/companies)
	GetCompanies(ctx echo.Context, params GetCompaniesParams) error
	// Create a new company
	// (POST /crm/v3/objects/companies)
	CreateCompany(ctx echo.Context) error
	// Search for companies by email
	// (POST /crm/v3/objects/companies/search)
	SearchCompany(ctx echo.Context, params SearchCompanyParams) error
	// Delete a company
	// (DELETE /crm/v3/objects/companies/{companyId})
	DeleteCompanyById(ctx echo.Context, companyId string) error
	// Get Company Details
	// (GET /crm/v3/objects/companies/{companyId})
	GetCompanyById(ctx echo.Context, companyId int64, params GetCompanyByIdParams) error
	// Update a company
	// (PATCH /crm/v3/objects/companies/{companyId})
	UpdateCompany(ctx echo.Context, companyId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompaniesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanies(ctx, params)
	return err
}

// CreateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCompany(ctx)
	return err
}

// SearchCompany converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCompanyParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchCompany(ctx, params)
	return err
}

// DeleteCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyById(ctx, companyId)
	return err
}

// GetCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId int64

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyById(ctx, companyId, params)
	return err
}

// UpdateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCompany(ctx, companyId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/companies", wrapper.GetCompanies)
	router.POST(baseURL+"/crm/v3/objects/companies", wrapper.CreateCompany)
	router.POST(baseURL+"/crm/v3/objects/companies/search", wrapper.SearchCompany)
	router.DELETE(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.DeleteCompanyById)
	router.GET(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.GetCompanyById)
	router.PATCH(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.UpdateCompany)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW2/bOBb+KwR3gX1R7HQ6uw8G5sFNMq3R1skk7hbFNEgY6dhiI5EqSSURCv/3BSlK",
	"oiT6FrtTYLYvuUjk4eHhuXzno77hkKcZZ8CUxKNvOCOCpKBAmP+adzdjEcb0ASL9OAIZCpopyhke4QkL",
	"kzwCxFlSIGKHIQEyT5Qc4ADDE0mzBPBoThIJAaZ61tccRIEDzEgKeISreTjAMowhJeU6c5Inqp6oikyP",
	"veM8AcLwchm0NJSSh5RorWRfyxOepuRIgt6gggglVCrE54jffYFQIS1aIsWRACUoPAAiVhxEaHIq0ZyL",
	"wWc25QyeqFTAVD1Ar4ceaZKgO0B0wbiAaPCZNRuXzl66Sso8TYko8AiflYNbYnGAH0iSAx79iSMgiX6g",
	"aHgPSuJrvX14yhIebTBtW2BjXqogNUpYu0olKFvgZW1oIgQp9P9SFfr88JyLFLetfiF4BkJR2MHmWT1H",
	"W5xa/6EMqRi042ScSRh8ZpM5IkhmENI5haiaViAqEeMKZQIkMBUgqra2f1vdvvUb1VzbG0sGOBM01L/d",
	"XW59DC3J3+0QPlIVv6FScb2r/c7jkapYnwgVKDYSaUgSZGwiB5/Zm+ZZRBRBAqI81BJiQCl5ommeIpan",
	"dyCaMJM6vHLB9GGCQAK+5iDVFofV2da6cyv1ju3gVYf4jGNzdTjECS4rIb1U2wTspQ0Gk5pbrks9mXgW",
	"A5qcanPrQ3ASWGl9nYv10kThEaZM/edXXOtImYIFCBzgp6MFP9JPj+Q9zY64EU6So4zrMQKPlMih3pxP",
	"Bf1GK+EknkGzkjXPtgs1Ziw3sYOGjklPeJoRRkGuNmhGFlqv0Tf8TwFzPML/GDYChvakhm7QlROWAba1",
	"ruUMWwopFStqtbpe82wz+fZfdKtP2wIhZ4qEahf1z81irlh3J2XJOpS0qvAdRt4h/apY7VVkDWyKaEgU",
	"SETLeA1LWbq6VbOcsKlAz/Zqks5h7+aRLVfRmxagU8lY9XfyMQbW2sEjkciOb+WciCg4UtSk4edlg8Cb",
	"9z4w+jUHRCNgSkMFodGaq9FgjwU75xlFtBzYRhK93N/WcIzuoTgypQilJKtStI24f0mnfjm67uyZ2aqC",
	"uUrtXdOVnV1Uoj1FrrvxDdu1cIOyhQdl7GGKPIt28teESIXspAM77Ybc/DtNzNhu6tB/E8XNG2B5qjHM",
	"2R84wFPz893M/DjDAX49Mz/0n2/GVzcXl+cXZ5ezT3ro+eym8+jkfDobT6ZXN7Pzt2dTO6bz8DroO3SF",
	"vqcGF3k83gKt3puttu8pR/Pmxa5uak3a884NqqypFz3t9qj5Pnx3sLr/rDJ2UWOf9iYZPKmdEdFUTzqo",
	"YlOrRicVz23Y9BFomAupKwC/B1bXAr0ZlJGFwaYOPfHcwpBQdu9fXr/5TsseyKydNN6zreS5CGGyosco",
	"3zqthpO56ybdpIN97Fuu8o7cQbJWjUSPqM3tUWV/JWYrex2rQ9XyfDdj6AIkFUmzNeWsvZqpahLUwRGY",
	"LZKvig8SxCoXySUI7SCPMa+qakvHwT6tZ11p+ut2MUR1KPv7Qr926EeUzXlfk/HFxDjkHFQYa2gTVv0n",
	"mgueojf53VXGlWHzlKEE7BNUN6pofDHBAX4AIUuZDy91keAZMJJRPMIvB8eDYxzgjKjYxOwwFOnw4eXQ",
	"Ui3Dek39cgEeIPS7Vg+ko53hTkwnbMoTIizqQNMSlVDO9Mnj16BqjY0uDXv8Z3e19z1SyGZDwwXpDNki",
	"i/997CdkEppS5aeJXxz3nGq5DHos2C7FoVYHv/8yfvF+/NtveAXLaqqRq1YPBvnraGOzoZ9Wfe5EtwXY",
	"TUan99tpatXvLq8NL2LQjfHAX46PK5IBmHFGkmWJboEpZ8MvUp/NN8d8O7WrLrNj4rJ95BelRzuUZ+3y",
	"g5KIqwnFy5r/7481MJhLTySdmG4XEcTgsWnky7Rch/bl+34AlRNtz421yQwl+opHxU7Wqv20W8kjnhLj",
	"r3bEIORp47V2YWRA/bLf7a69Unln7dO6CPF03jU+bgtXnsQ5I2IBqrqUiUARmjQyO4TiFoRoS9zktJ/9",
	"vS2BuQxqIfuVZjkhChZ+st2+6dKxVvmqo7sCIsJYd24fXl1dnM9uTs9+n0zPTnGAP1ydXTr/Tqazs9eX",
	"49l589DXpznraNjiK9B9jljnei2pSxG//AX7UqrfZOv7rC5PUL75KKiCmSArwKZ+oWGE9gB7io96Bqqj",
	"yIOlD0XavK0pm4xQIZtUUKyla5bLMoypgEifsKPLtRdD9C5pzBKV8ytuubR2dhlgdxULjDoJ98VOKWRb",
	"4vJjDCoGG+W5VDwF4ZKWiAvEuNqPu7SyfPTNrILC6NFH5Ljc6UFx7xoGdINKP4ALbULcLn54KrRTYhtG",
	"b+PCfz9e0+zwR/OaG7zwL2U4V+e1yi1kHoYg5TxPkqILwnxwSitHFrqxwE3LYa5xVzY+Q1kWV53cvLDt",
	"jxwEtXfWDkwz5aZpiu6I1FmttOgtpIQmt01D+ZldmjttWRu7ytwyD2NEJLotMdhtgG417Lot77vbOLCE",
	"AQ0OXNtJVarqNvMeihUdSUwyWr5t14nABxvxp/MPlzfji8nN27NPHpR0/XxouoK16xXfsrFzlXrRxx49",
	"1FcFej2pvuiP5Y28z7ufawSbr+lLO/pU3Lk7qchtwySJDl28QRF/UG2q+T+uyaoCvA3eu6FdOno3wgpk",
	"wqoX48WmCP9mg24SLcvwTkB5qKFT81wiUgepy8OgXOo8bXmiBxo1Vcs2De1gLaVZDV8Vk2hTwBpGrFeY",
	"7QqKo1LtQRXIGVFxE8f1DtdGsjdgW57xa98sU45OSlcZoFmnXLj52SoYdQ+zNERjVe3EXqap7qo7OTJw",
	"ymSrjSQsQk1xRykoEhFF1jBQWx+E9wSqz/72OoNNH9d4yKiZy9sqjnKpmzKjXel5vsxOowqv/CScfhDh",
	"VKzLhOFWmfA1VHRvgU7LIaa+EVVClg6uN8Ct9IwKYPC5k9AoW880lQK2RBhOwnK+quiHTQknD5+4DoE0",
	"tiEYbLekXJ5Bb7E23R7sQnul//puI9om3JGOEGA/gK1qVwTNlZP9lrMn/LtxFM1Kh0UoP1mJvyUrUd0J",
	"/uWsxOqFf7IS/4esxJWLct2L6to/2kW7rKIu4jXvIcwFVYWppJzkKv5FZ9VQpAPbsgyaCycBJMLXus5J",
	"EA9V/c1Font2pTI5Gg5JRgdxfqd/hTwd4uX18n8BAAD//4aZM12qMwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
