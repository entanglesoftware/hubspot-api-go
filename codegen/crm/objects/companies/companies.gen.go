// Package companies provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package companies

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateCompanyJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateCompanyJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateCompanyJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateCompanyJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateCompanyJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetCompaniesParams defines parameters for GetCompanies.
type GetCompaniesParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateCompanyJSONBody defines parameters for CreateCompany.
type CreateCompanyJSONBody struct {
	// Associations List of associations for the company.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateCompanyJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of company properties.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONBodyAssociationsAssociationCategory defines parameters for CreateCompany.
type CreateCompanyJSONBodyAssociationsAssociationCategory string

// SearchCompanyJSONBody defines parameters for SearchCompany.
type SearchCompanyJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchCompanyParams defines parameters for SearchCompany.
type SearchCompanyParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetCompanyByIdParams defines parameters for GetCompanyById.
type GetCompanyByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateCompanyJSONBody defines parameters for UpdateCompany.
type UpdateCompanyJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateCompanyJSONRequestBody defines body for CreateCompany for application/json ContentType.
type CreateCompanyJSONRequestBody CreateCompanyJSONBody

// SearchCompanyJSONRequestBody defines body for SearchCompany for application/json ContentType.
type SearchCompanyJSONRequestBody SearchCompanyJSONBody

// UpdateCompanyJSONRequestBody defines body for UpdateCompany for application/json ContentType.
type UpdateCompanyJSONRequestBody UpdateCompanyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of companies
	// (GET /crm/v3/objects/companies)
	GetCompanies(ctx echo.Context, params GetCompaniesParams) error
	// Create a new company
	// (POST /crm/v3/objects/companies)
	CreateCompany(ctx echo.Context) error
	// Search for companies by email
	// (POST /crm/v3/objects/companies/search)
	SearchCompany(ctx echo.Context, params SearchCompanyParams) error
	// Delete a company
	// (DELETE /crm/v3/objects/companies/{companyId})
	DeleteCompanyById(ctx echo.Context, companyId string) error
	// Get Company Details
	// (GET /crm/v3/objects/companies/{companyId})
	GetCompanyById(ctx echo.Context, companyId int64, params GetCompanyByIdParams) error
	// Update a company
	// (PATCH /crm/v3/objects/companies/{companyId})
	UpdateCompany(ctx echo.Context, companyId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompaniesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanies(ctx, params)
	return err
}

// CreateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCompany(ctx)
	return err
}

// SearchCompany converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCompany(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCompanyParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchCompany(ctx, params)
	return err
}

// DeleteCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyById(ctx, companyId)
	return err
}

// GetCompanyById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId int64

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompanyByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyById(ctx, companyId, params)
	return err
}

// UpdateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCompany(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "companyId" -------------
	var companyId string

	err = runtime.BindStyledParameterWithOptions("simple", "companyId", ctx.Param("companyId"), &companyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter companyId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.companies.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCompany(ctx, companyId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/companies", wrapper.GetCompanies)
	router.POST(baseURL+"/crm/v3/objects/companies", wrapper.CreateCompany)
	router.POST(baseURL+"/crm/v3/objects/companies/search", wrapper.SearchCompany)
	router.DELETE(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.DeleteCompanyById)
	router.GET(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.GetCompanyById)
	router.PATCH(baseURL+"/crm/v3/objects/companies/:companyId", wrapper.UpdateCompany)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
