// Package lineItems provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package lineItems

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateLineItemJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetLineItemsParams defines parameters for GetLineItems.
type GetLineItemsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateLineItemJSONBody defines parameters for CreateLineItem.
type CreateLineItemJSONBody struct {
	// Associations List of associations for the lineItem.
	Associations []struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateLineItemJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of lineItem properties.
	Properties map[string]string `json:"properties"`
}

// CreateLineItemJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateLineItem.
type CreateLineItemJSONBodyAssociationsTypesAssociationCategory string

// SearchLineItemsJSONBody defines parameters for SearchLineItems.
type SearchLineItemsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetLineItemByIdParams defines parameters for GetLineItemById.
type GetLineItemByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateLineItemJSONBody defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the lineItem properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateLineItemJSONRequestBody defines body for CreateLineItem for application/json ContentType.
type CreateLineItemJSONRequestBody CreateLineItemJSONBody

// SearchLineItemsJSONRequestBody defines body for SearchLineItems for application/json ContentType.
type SearchLineItemsJSONRequestBody SearchLineItemsJSONBody

// UpdateLineItemJSONRequestBody defines body for UpdateLineItem for application/json ContentType.
type UpdateLineItemJSONRequestBody UpdateLineItemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of lineItems
	// (GET /crm/v3/objects/line_items)
	GetLineItems(ctx echo.Context, params GetLineItemsParams) error
	// Create a new lineItem
	// (POST /crm/v3/objects/line_items)
	CreateLineItem(ctx echo.Context) error
	// Search for lineItems by email
	// (POST /crm/v3/objects/line_items/search)
	SearchLineItems(ctx echo.Context) error
	// Delete a lineItem
	// (DELETE /crm/v3/objects/line_items/{lineItemId})
	DeleteLineItemById(ctx echo.Context, lineItemId string) error
	// Get LineItem Details
	// (GET /crm/v3/objects/line_items/{lineItemId})
	GetLineItemById(ctx echo.Context, lineItemId string, params GetLineItemByIdParams) error
	// Update a lineItem
	// (PATCH /crm/v3/objects/line_items/{lineItemId})
	UpdateLineItem(ctx echo.Context, lineItemId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItems(ctx, params)
	return err
}

// CreateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineItem(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLineItem(ctx)
	return err
}

// SearchLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) SearchLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchLineItems(ctx)
	return err
}

// DeleteLineItemById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLineItemById(ctx, lineItemId)
	return err
}

// GetLineItemById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItemById(ctx, lineItemId, params)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLineItem(ctx, lineItemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/line_items", wrapper.GetLineItems)
	router.POST(baseURL+"/crm/v3/objects/line_items", wrapper.CreateLineItem)
	router.POST(baseURL+"/crm/v3/objects/line_items/search", wrapper.SearchLineItems)
	router.DELETE(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.DeleteLineItemById)
	router.GET(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.GetLineItemById)
	router.PATCH(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.UpdateLineItem)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
