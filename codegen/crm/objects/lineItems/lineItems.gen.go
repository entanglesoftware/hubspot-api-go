// Package lineItems provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package lineItems

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetLineItemsParams defines parameters for GetLineItems.
type GetLineItemsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// SearchLineItemsJSONBody defines parameters for SearchLineItems.
type SearchLineItemsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetLineItemByIdParams defines parameters for GetLineItemById.
type GetLineItemByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateLineItemJSONBody defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the lineItem properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateLineItemJSONRequestBody defines body for CreateLineItem for application/json ContentType.
type CreateLineItemJSONRequestBody = LineItemCreateRequest

// BatchCreateLineItemsJSONRequestBody defines body for BatchCreateLineItems for application/json ContentType.
type BatchCreateLineItemsJSONRequestBody = BatchCreateLineItemsRequest

// SearchLineItemsJSONRequestBody defines body for SearchLineItems for application/json ContentType.
type SearchLineItemsJSONRequestBody SearchLineItemsJSONBody

// UpdateLineItemJSONRequestBody defines body for UpdateLineItem for application/json ContentType.
type UpdateLineItemJSONRequestBody UpdateLineItemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of lineItems
	// (GET /crm/v3/objects/line_items)
	GetLineItems(ctx echo.Context, params GetLineItemsParams) error
	// Create a new lineItem
	// (POST /crm/v3/objects/line_items)
	CreateLineItem(ctx echo.Context) error
	// Batch create line items
	// (POST /crm/v3/objects/line_items/batch/create)
	BatchCreateLineItems(ctx echo.Context) error
	// Search for lineItems by email
	// (POST /crm/v3/objects/line_items/search)
	SearchLineItems(ctx echo.Context) error
	// Delete a lineItem
	// (DELETE /crm/v3/objects/line_items/{lineItemId})
	DeleteLineItemById(ctx echo.Context, lineItemId string) error
	// Get LineItem Details
	// (GET /crm/v3/objects/line_items/{lineItemId})
	GetLineItemById(ctx echo.Context, lineItemId string, params GetLineItemByIdParams) error
	// Update a lineItem
	// (PATCH /crm/v3/objects/line_items/{lineItemId})
	UpdateLineItem(ctx echo.Context, lineItemId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItems(ctx, params)
	return err
}

// CreateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineItem(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLineItem(ctx)
	return err
}

// BatchCreateLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) BatchCreateLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchCreateLineItems(ctx)
	return err
}

// SearchLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) SearchLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchLineItems(ctx)
	return err
}

// DeleteLineItemById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLineItemById(ctx, lineItemId)
	return err
}

// GetLineItemById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItemById(ctx, lineItemId, params)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLineItem(ctx, lineItemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/line_items", wrapper.GetLineItems)
	router.POST(baseURL+"/crm/v3/objects/line_items", wrapper.CreateLineItem)
	router.POST(baseURL+"/crm/v3/objects/line_items/batch/create", wrapper.BatchCreateLineItems)
	router.POST(baseURL+"/crm/v3/objects/line_items/search", wrapper.SearchLineItems)
	router.DELETE(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.DeleteLineItemById)
	router.GET(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.GetLineItemById)
	router.PATCH(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.UpdateLineItem)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
