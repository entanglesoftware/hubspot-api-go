// Package lineItems provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package lineItems

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateLineItemJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateLineItemJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetLineItemsParams defines parameters for GetLineItems.
type GetLineItemsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateLineItemJSONBody defines parameters for CreateLineItem.
type CreateLineItemJSONBody struct {
	// Associations List of associations for the lineItem.
	Associations []struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateLineItemJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of lineItem properties.
	Properties map[string]string `json:"properties"`
}

// CreateLineItemJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateLineItem.
type CreateLineItemJSONBodyAssociationsTypesAssociationCategory string

// SearchLineItemsJSONBody defines parameters for SearchLineItems.
type SearchLineItemsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetLineItemByIdParams defines parameters for GetLineItemById.
type GetLineItemByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateLineItemJSONBody defines parameters for UpdateLineItem.
type UpdateLineItemJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the lineItem properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateLineItemJSONRequestBody defines body for CreateLineItem for application/json ContentType.
type CreateLineItemJSONRequestBody CreateLineItemJSONBody

// SearchLineItemsJSONRequestBody defines body for SearchLineItems for application/json ContentType.
type SearchLineItemsJSONRequestBody SearchLineItemsJSONBody

// UpdateLineItemJSONRequestBody defines body for UpdateLineItem for application/json ContentType.
type UpdateLineItemJSONRequestBody UpdateLineItemJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of lineItems
	// (GET /crm/v3/objects/line_items)
	GetLineItems(ctx echo.Context, params GetLineItemsParams) error
	// Create a new lineItem
	// (POST /crm/v3/objects/line_items)
	CreateLineItem(ctx echo.Context) error
	// Search for lineItems by email
	// (POST /crm/v3/objects/line_items/search)
	SearchLineItems(ctx echo.Context) error
	// Delete a lineItem
	// (DELETE /crm/v3/objects/line_items/{lineItemId})
	DeleteLineItemById(ctx echo.Context, lineItemId string) error
	// Get LineItem Details
	// (GET /crm/v3/objects/line_items/{lineItemId})
	GetLineItemById(ctx echo.Context, lineItemId string, params GetLineItemByIdParams) error
	// Update a lineItem
	// (PATCH /crm/v3/objects/line_items/{lineItemId})
	UpdateLineItem(ctx echo.Context, lineItemId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItems(ctx, params)
	return err
}

// CreateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLineItem(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLineItem(ctx)
	return err
}

// SearchLineItems converts echo context to params.
func (w *ServerInterfaceWrapper) SearchLineItems(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchLineItems(ctx)
	return err
}

// DeleteLineItemById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLineItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLineItemById(ctx, lineItemId)
	return err
}

// GetLineItemById converts echo context to params.
func (w *ServerInterfaceWrapper) GetLineItemById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLineItemByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLineItemById(ctx, lineItemId, params)
	return err
}

// UpdateLineItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLineItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "lineItemId" -------------
	var lineItemId string

	err = runtime.BindStyledParameterWithOptions("simple", "lineItemId", ctx.Param("lineItemId"), &lineItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter lineItemId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.line_items.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLineItem(ctx, lineItemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/line_items", wrapper.GetLineItems)
	router.POST(baseURL+"/crm/v3/objects/line_items", wrapper.CreateLineItem)
	router.POST(baseURL+"/crm/v3/objects/line_items/search", wrapper.SearchLineItems)
	router.DELETE(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.DeleteLineItemById)
	router.GET(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.GetLineItemById)
	router.PATCH(baseURL+"/crm/v3/objects/line_items/:lineItemId", wrapper.UpdateLineItem)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kDUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
