// Package tickets provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tickets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateTicketJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateTicketJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateTicketJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateTicketJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateTicketJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetTicketsParams defines parameters for GetTickets.
type GetTicketsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateTicketJSONBody defines parameters for CreateTicket.
type CreateTicketJSONBody struct {
	// Associations List of associations for the ticket.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateTicketJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of ticket properties.
	Properties map[string]string `json:"properties"`
}

// CreateTicketJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateTicket.
type CreateTicketJSONBodyAssociationsTypesAssociationCategory string

// SearchTicketsJSONBody defines parameters for SearchTickets.
type SearchTicketsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetTicketByIdParams defines parameters for GetTicketById.
type GetTicketByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateTicketJSONBody defines parameters for UpdateTicket.
type UpdateTicketJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the ticket properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateTicketJSONRequestBody defines body for CreateTicket for application/json ContentType.
type CreateTicketJSONRequestBody CreateTicketJSONBody

// SearchTicketsJSONRequestBody defines body for SearchTickets for application/json ContentType.
type SearchTicketsJSONRequestBody SearchTicketsJSONBody

// UpdateTicketJSONRequestBody defines body for UpdateTicket for application/json ContentType.
type UpdateTicketJSONRequestBody UpdateTicketJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of tickets
	// (GET /crm/v3/objects/tickets)
	GetTickets(ctx echo.Context, params GetTicketsParams) error
	// Create a new ticket
	// (POST /crm/v3/objects/tickets)
	CreateTicket(ctx echo.Context) error
	// Search for tickets by email
	// (POST /crm/v3/objects/tickets/search)
	SearchTickets(ctx echo.Context) error
	// Delete a ticket
	// (DELETE /crm/v3/objects/tickets/{ticketId})
	DeleteTicketById(ctx echo.Context, ticketId string) error
	// Get Ticket Details
	// (GET /crm/v3/objects/tickets/{ticketId})
	GetTicketById(ctx echo.Context, ticketId string, params GetTicketByIdParams) error
	// Update a ticket
	// (PATCH /crm/v3/objects/tickets/{ticketId})
	UpdateTicket(ctx echo.Context, ticketId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTickets(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTickets(ctx, params)
	return err
}

// CreateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTicket(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTicket(ctx)
	return err
}

// SearchTickets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchTickets(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchTickets(ctx)
	return err
}

// DeleteTicketById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTicketById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTicketById(ctx, ticketId)
	return err
}

// GetTicketById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicketById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTicketById(ctx, ticketId, params)
	return err
}

// UpdateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTicket(ctx, ticketId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/tickets", wrapper.GetTickets)
	router.POST(baseURL+"/crm/v3/objects/tickets", wrapper.CreateTicket)
	router.POST(baseURL+"/crm/v3/objects/tickets/search", wrapper.SearchTickets)
	router.DELETE(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.DeleteTicketById)
	router.GET(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.GetTicketById)
	router.PATCH(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.UpdateTicket)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
