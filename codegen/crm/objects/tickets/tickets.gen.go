// Package tickets provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tickets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateTicketJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateTicketJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateTicketJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateTicketJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateTicketJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetTicketsParams defines parameters for GetTickets.
type GetTicketsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateTicketJSONBody defines parameters for CreateTicket.
type CreateTicketJSONBody struct {
	// Associations List of associations for the ticket.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateTicketJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of ticket properties.
	Properties map[string]string `json:"properties"`
}

// CreateTicketJSONBodyAssociationsAssociationCategory defines parameters for CreateTicket.
type CreateTicketJSONBodyAssociationsAssociationCategory string

// SearchTicketsJSONBody defines parameters for SearchTickets.
type SearchTicketsJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchTicketsParams defines parameters for SearchTickets.
type SearchTicketsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetTicketByIdParams defines parameters for GetTicketById.
type GetTicketByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateTicketJSONBody defines parameters for UpdateTicket.
type UpdateTicketJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the ticket properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateTicketJSONRequestBody defines body for CreateTicket for application/json ContentType.
type CreateTicketJSONRequestBody CreateTicketJSONBody

// SearchTicketsJSONRequestBody defines body for SearchTickets for application/json ContentType.
type SearchTicketsJSONRequestBody SearchTicketsJSONBody

// UpdateTicketJSONRequestBody defines body for UpdateTicket for application/json ContentType.
type UpdateTicketJSONRequestBody UpdateTicketJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of tickets
	// (GET /crm/v3/objects/tickets)
	GetTickets(ctx echo.Context, params GetTicketsParams) error
	// Create a new ticket
	// (POST /crm/v3/objects/tickets)
	CreateTicket(ctx echo.Context) error
	// Search for tickets by email
	// (POST /crm/v3/objects/tickets/search)
	SearchTickets(ctx echo.Context, params SearchTicketsParams) error
	// Delete a ticket
	// (DELETE /crm/v3/objects/tickets/{ticketId})
	DeleteTicketById(ctx echo.Context, ticketId string) error
	// Get Ticket Details
	// (GET /crm/v3/objects/tickets/{ticketId})
	GetTicketById(ctx echo.Context, ticketId string, params GetTicketByIdParams) error
	// Update a ticket
	// (PATCH /crm/v3/objects/tickets/{ticketId})
	UpdateTicket(ctx echo.Context, ticketId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTickets(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTickets(ctx, params)
	return err
}

// CreateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTicket(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTicket(ctx)
	return err
}

// SearchTickets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchTickets(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchTicketsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchTickets(ctx, params)
	return err
}

// DeleteTicketById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTicketById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTicketById(ctx, ticketId)
	return err
}

// GetTicketById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicketById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTicketById(ctx, ticketId, params)
	return err
}

// UpdateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTicket(ctx, ticketId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/tickets", wrapper.GetTickets)
	router.POST(baseURL+"/crm/v3/objects/tickets", wrapper.CreateTicket)
	router.POST(baseURL+"/crm/v3/objects/tickets/search", wrapper.SearchTickets)
	router.DELETE(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.DeleteTicketById)
	router.GET(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.GetTicketById)
	router.PATCH(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.UpdateTicket)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+p+AJz28vFz+JwAA//9WWX5YYzIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
