// Package tickets provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package tickets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateTicketJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateTicketJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateTicketJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateTicketJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateTicketJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetTicketsParams defines parameters for GetTickets.
type GetTicketsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateTicketJSONBody defines parameters for CreateTicket.
type CreateTicketJSONBody struct {
	// Associations List of associations for the ticket.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateTicketJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of ticket properties.
	Properties map[string]string `json:"properties"`
}

// CreateTicketJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateTicket.
type CreateTicketJSONBodyAssociationsTypesAssociationCategory string

// SearchTicketsJSONBody defines parameters for SearchTickets.
type SearchTicketsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetTicketByIdParams defines parameters for GetTicketById.
type GetTicketByIdParams struct {
	// IdProperty The property to use as the ID.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateTicketJSONBody defines parameters for UpdateTicket.
type UpdateTicketJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the ticket properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateTicketJSONRequestBody defines body for CreateTicket for application/json ContentType.
type CreateTicketJSONRequestBody CreateTicketJSONBody

// SearchTicketsJSONRequestBody defines body for SearchTickets for application/json ContentType.
type SearchTicketsJSONRequestBody SearchTicketsJSONBody

// UpdateTicketJSONRequestBody defines body for UpdateTicket for application/json ContentType.
type UpdateTicketJSONRequestBody UpdateTicketJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of tickets
	// (GET /crm/v3/objects/tickets)
	GetTickets(ctx echo.Context, params GetTicketsParams) error
	// Create a new ticket
	// (POST /crm/v3/objects/tickets)
	CreateTicket(ctx echo.Context) error
	// Search for tickets by email
	// (POST /crm/v3/objects/tickets/search)
	SearchTickets(ctx echo.Context) error
	// Delete a ticket
	// (DELETE /crm/v3/objects/tickets/{ticketId})
	DeleteTicketById(ctx echo.Context, ticketId string) error
	// Get Ticket Details
	// (GET /crm/v3/objects/tickets/{ticketId})
	GetTicketById(ctx echo.Context, ticketId string, params GetTicketByIdParams) error
	// Update a ticket
	// (PATCH /crm/v3/objects/tickets/{ticketId})
	UpdateTicket(ctx echo.Context, ticketId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTickets converts echo context to params.
func (w *ServerInterfaceWrapper) GetTickets(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTickets(ctx, params)
	return err
}

// CreateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTicket(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTicket(ctx)
	return err
}

// SearchTickets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchTickets(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchTickets(ctx)
	return err
}

// DeleteTicketById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTicketById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTicketById(ctx, ticketId)
	return err
}

// GetTicketById converts echo context to params.
func (w *ServerInterfaceWrapper) GetTicketById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTicketByIdParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTicketById(ctx, ticketId, params)
	return err
}

// UpdateTicket converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTicket(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ticketId" -------------
	var ticketId string

	err = runtime.BindStyledParameterWithOptions("simple", "ticketId", ctx.Param("ticketId"), &ticketId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ticketId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"tickets"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTicket(ctx, ticketId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/tickets", wrapper.GetTickets)
	router.POST(baseURL+"/crm/v3/objects/tickets", wrapper.CreateTicket)
	router.POST(baseURL+"/crm/v3/objects/tickets/search", wrapper.SearchTickets)
	router.DELETE(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.DeleteTicketById)
	router.GET(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.GetTicketById)
	router.PATCH(baseURL+"/crm/v3/objects/tickets/:ticketId", wrapper.UpdateTicket)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
