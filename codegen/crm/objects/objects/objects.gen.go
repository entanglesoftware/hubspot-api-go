// Package objects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package objects

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateObjectJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateObjectJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateObjectJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateObjectJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateObjectJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetObjectsParams defines parameters for GetObjects.
type GetObjectsParams struct {
	// Limit Number of objects to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Archived Include archived objects.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateObjectJSONBody defines parameters for CreateObject.
type CreateObjectJSONBody struct {
	// Associations List of associations for the lead.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateObjectJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// Properties Key-value pairs of lead properties.
	Properties *map[string]string `json:"properties,omitempty"`
}

// CreateObjectJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateObject.
type CreateObjectJSONBodyAssociationsTypesAssociationCategory string

// SearchObjectsJSONBody defines parameters for SearchObjects.
type SearchObjectsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetObjectByTypeAndIdParams defines parameters for GetObjectByTypeAndId.
type GetObjectByTypeAndIdParams struct {
	// PropertiesWithHistory Properties to fetch with history.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Associations to include in the response.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Whether to include archived objects.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// IdProperty The property to use for ID lookups.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`
}

// UpdateObjectJSONBody defines parameters for UpdateObject.
type UpdateObjectJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// UpdateObjectParams defines parameters for UpdateObject.
type UpdateObjectParams struct {
	// IdProperty The property to identify the object (e.g., "email").
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`
}

// CreateObjectJSONRequestBody defines body for CreateObject for application/json ContentType.
type CreateObjectJSONRequestBody CreateObjectJSONBody

// SearchObjectsJSONRequestBody defines body for SearchObjects for application/json ContentType.
type SearchObjectsJSONRequestBody SearchObjectsJSONBody

// UpdateObjectJSONRequestBody defines body for UpdateObject for application/json ContentType.
type UpdateObjectJSONRequestBody UpdateObjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get CRM Objects
	// (GET /crm/v3/objects/{objectType})
	GetObjects(ctx echo.Context, objectType string, params GetObjectsParams) error
	// Create an object in HubSpot CRM
	// (POST /crm/v3/objects/{objectType})
	CreateObject(ctx echo.Context, objectType string) error
	// Search HubSpot CRM objects
	// (POST /crm/v3/objects/{objectType}/search)
	SearchObjects(ctx echo.Context, objectType string) error
	// Delete an object by objectType and objectId
	// (DELETE /crm/v3/objects/{objectType}/{objectId})
	DeleteObject(ctx echo.Context, objectType string, objectId string) error
	// Retrieve object details with associations and properties
	// (GET /crm/v3/objects/{objectType}/{objectId})
	GetObjectByTypeAndId(ctx echo.Context, objectType string, objectId string, params GetObjectByTypeAndIdParams) error
	// Update a CRM object
	// (PATCH /crm/v3/objects/{objectType}/{objectId})
	UpdateObject(ctx echo.Context, objectType string, objectId string, params UpdateObjectParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjects(ctx, objectType, params)
	return err
}

// CreateObject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateObject(ctx, objectType)
	return err
}

// SearchObjects converts echo context to params.
func (w *ServerInterfaceWrapper) SearchObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchObjects(ctx, objectType)
	return err
}

// DeleteObject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObject(ctx, objectType, objectId)
	return err
}

// GetObjectByTypeAndId converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectByTypeAndId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectByTypeAndIdParams
	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", true, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", true, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectByTypeAndId(ctx, objectType, objectId, params)
	return err
}

// UpdateObject converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateObjectParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateObject(ctx, objectType, objectId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/:objectType", wrapper.GetObjects)
	router.POST(baseURL+"/crm/v3/objects/:objectType", wrapper.CreateObject)
	router.POST(baseURL+"/crm/v3/objects/:objectType/search", wrapper.SearchObjects)
	router.DELETE(baseURL+"/crm/v3/objects/:objectType/:objectId", wrapper.DeleteObject)
	router.GET(baseURL+"/crm/v3/objects/:objectType/:objectId", wrapper.GetObjectByTypeAndId)
	router.PATCH(baseURL+"/crm/v3/objects/:objectType/:objectId", wrapper.UpdateObject)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wllOqLr2/X/AgAA////TXPQuiwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
