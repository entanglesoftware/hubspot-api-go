// Package objects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package objects

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateObjectJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateObjectJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateObjectJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateObjectJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateObjectJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetObjectsParams defines parameters for GetObjects.
type GetObjectsParams struct {
	// Limit Number of objects to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Archived Include archived objects.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateObjectJSONBody defines parameters for CreateObject.
type CreateObjectJSONBody struct {
	// Associations List of associations for the lead.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateObjectJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// Properties Key-value pairs of lead properties.
	Properties *map[string]string `json:"properties,omitempty"`
}

// CreateObjectJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateObject.
type CreateObjectJSONBodyAssociationsTypesAssociationCategory string

// SearchObjectsJSONBody defines parameters for SearchObjects.
type SearchObjectsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetObjectByTypeAndIdParams defines parameters for GetObjectByTypeAndId.
type GetObjectByTypeAndIdParams struct {
	// PropertiesWithHistory Properties to fetch with history.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Associations to include in the response.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Whether to include archived objects.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`

	// IdProperty The property to use for ID lookups.
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`
}

// UpdateObjectJSONBody defines parameters for UpdateObject.
type UpdateObjectJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// UpdateObjectParams defines parameters for UpdateObject.
type UpdateObjectParams struct {
	// IdProperty The property to identify the object (e.g., "email").
	IdProperty *string `form:"idProperty,omitempty" json:"idProperty,omitempty"`
}

// CreateObjectJSONRequestBody defines body for CreateObject for application/json ContentType.
type CreateObjectJSONRequestBody CreateObjectJSONBody

// SearchObjectsJSONRequestBody defines body for SearchObjects for application/json ContentType.
type SearchObjectsJSONRequestBody SearchObjectsJSONBody

// UpdateObjectJSONRequestBody defines body for UpdateObject for application/json ContentType.
type UpdateObjectJSONRequestBody UpdateObjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get CRM Objects
	// (GET /crm/v3/objects/{objectType})
	GetObjects(ctx echo.Context, objectType string, params GetObjectsParams) error
	// Create an object in HubSpot CRM
	// (POST /crm/v3/objects/{objectType})
	CreateObject(ctx echo.Context, objectType string) error
	// Search HubSpot CRM objects
	// (POST /crm/v3/objects/{objectType}/search)
	SearchObjects(ctx echo.Context, objectType string) error
	// Delete an object by objectType and objectId
	// (DELETE /crm/v3/objects/{objectType}/{objectId})
	DeleteObject(ctx echo.Context, objectType string, objectId string) error
	// Retrieve object details with associations and properties
	// (GET /crm/v3/objects/{objectType}/{objectId})
	GetObjectByTypeAndId(ctx echo.Context, objectType string, objectId string, params GetObjectByTypeAndIdParams) error
	// Update a CRM object
	// (PATCH /crm/v3/objects/{objectType}/{objectId})
	UpdateObject(ctx echo.Context, objectType string, objectId string, params UpdateObjectParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjects(ctx, objectType, params)
	return err
}

// CreateObject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateObject(ctx, objectType)
	return err
}

// SearchObjects converts echo context to params.
func (w *ServerInterfaceWrapper) SearchObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchObjects(ctx, objectType)
	return err
}

// DeleteObject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteObject(ctx, objectType, objectId)
	return err
}

// GetObjectByTypeAndId converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectByTypeAndId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectByTypeAndIdParams
	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", true, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", true, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetObjectByTypeAndId(ctx, objectType, objectId, params)
	return err
}

// UpdateObject converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType string

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithOptions("simple", "objectId", ctx.Param("objectId"), &objectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"objects"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateObjectParams
	// ------------- Optional query parameter "idProperty" -------------

	err = runtime.BindQueryParameter("form", true, false, "idProperty", ctx.QueryParams(), &params.IdProperty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter idProperty: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateObject(ctx, objectType, objectId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/:objectType", wrapper.GetObjects)
	router.POST(baseURL+"/crm/v3/objects/:objectType", wrapper.CreateObject)
	router.POST(baseURL+"/crm/v3/objects/:objectType/search", wrapper.SearchObjects)
	router.DELETE(baseURL+"/crm/v3/objects/:objectType/:objectId", wrapper.DeleteObject)
	router.GET(baseURL+"/crm/v3/objects/:objectType/:objectId", wrapper.GetObjectByTypeAndId)
	router.PATCH(baseURL+"/crm/v3/objects/:objectType/:objectId", wrapper.UpdateObject)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6Pp2/b8AAAD//zJN8mLSKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
