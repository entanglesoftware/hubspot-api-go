// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package users

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateUserJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateUserJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateUserJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateUserJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateUserJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *Properties `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *PropertiesWithHistory `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *Associations `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *Archived `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	// Associations List of associations for the lead.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateUserJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// Properties Key-value pairs of lead properties.
	Properties map[string]string `json:"properties"`
}

// CreateUserJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateUser.
type CreateUserJSONBodyAssociationsTypesAssociationCategory string

// SearchUsersJSONBody defines parameters for SearchUsers.
type SearchUsersJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetUserByIdParams defines parameters for GetUserById.
type GetUserByIdParams struct {
	// Properties Properties to include in the response.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Properties to include with their history.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Associations to include in the response.
	Associations *string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Whether to include archived users.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// SearchUsersJSONRequestBody defines body for SearchUsers for application/json ContentType.
type SearchUsersJSONRequestBody SearchUsersJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a list of users
	// (GET /crm/v3/objects/users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Create a user
	// (POST /crm/v3/objects/users)
	CreateUser(ctx echo.Context) error
	// Search for users
	// (POST /crm/v3/objects/users/search)
	SearchUsers(ctx echo.Context) error
	// Delete a user
	// (DELETE /crm/v3/objects/users/{userId})
	DeleteUserById(ctx echo.Context, userId string) error
	// Get a user by ID
	// (GET /crm/v3/objects/users/{userId})
	GetUserById(ctx echo.Context, userId string, params GetUserByIdParams) error
	// Update a user
	// (PATCH /crm/v3/objects/users/{userId})
	UpdateUser(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.users.write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.users.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// SearchUsers converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.users.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchUsers(ctx)
	return err
}

// DeleteUserById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.users.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserById(ctx, userId)
	return err
}

// GetUserById converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.users.write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", true, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", true, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", true, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserById(ctx, userId, params)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.users.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/users", wrapper.GetUsers)
	router.POST(baseURL+"/crm/v3/objects/users", wrapper.CreateUser)
	router.POST(baseURL+"/crm/v3/objects/users/search", wrapper.SearchUsers)
	router.DELETE(baseURL+"/crm/v3/objects/users/:userId", wrapper.DeleteUserById)
	router.GET(baseURL+"/crm/v3/objects/users/:userId", wrapper.GetUserById)
	router.PATCH(baseURL+"/crm/v3/objects/users/:userId", wrapper.UpdateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW2/bOBb+KwR3gX1R7HS6+2JgHtIkbY1pk0ziTrFogwwtHVtsJVIlqSRG4f++OCR1",
	"l2+x0wKz85LWknh4eK7fd6TvNJRpJgUIo+noO82YYikYUPZXde/uRIUxv4cIL0egQ8Uzw6WgIzoWYZJH",
	"QKRIFoT5x4gCnSdGD2hA4ZGlWQJ0NGOJhoByXPUtB7WgARUsBTqixToaUB3GkDK3z4zliSkXmkWGz06l",
	"TIAJulwGDQ21liFnqJXuankq05QdacADGohIwrUhckbk9AuEhqBoTYwkCozicA+EeXEQkfGZJjOpBp/F",
	"hRTwyLUBYcoHcD/ywJOETIHwuZAKosFnUR1c187SVlLnacrUgo7ouXu4IZYG9J4lOdDRJxoBSzS9xUPD",
	"Y5bIaINBm2Iqo3IDqd3aW1MbxcWcLkvzMqXYAn9rs0Cv0ZlUKW3a+krJDJThsIOls3IN2pn7qOGCmBgw",
	"XDIpNAw+i/GMMKIzCPmMQ1QsWxCuiZCGZAo0CBMQbra2elPdrs0r1eoWj/Wd4SYBGuB/w1wpEOFiexc0",
	"pD6bAz5yE7/l2kg80X6+eOAmRm9wRWIrkYcsIdYeevBZvK2uRcwwoiDKQ5QQA0nZI0/zlIg8nYKqEktj",
	"QuVKoCNBEQXfctBmC0e1jrXOZ07v2D/8LA6sa3MIXy4LIe0y+5onBpStxI2Yjfk8/sOdq+3jE4I3j+yp",
	"ycyuJ6HiBhSXAutvU7eAPh7N5RFePNJfeXYkrSCWHGWSC7u5UTksA4r7MyNVd8sIZlyAJqmMIMHSSJze",
	"g8tiSUBB5Ck64fx3GtAL+/fdxP45pwF9M7F/8L9vT27urq4vr86vJ//FRy8nd61Lp5cXk5Pxxc3d5PK3",
	"8wv/TOvi7dPPWVSYC+v19lknMVQ1CAMDM8abebrYx773q/ypuZgn4BIPd0uZCWNrZlNTZu+te2r3O18f",
	"3P31e28Z+9sqVa1zlaNV8FyAvVEyz3Q3PZw/dCMl/6lgRkf0H8NKytAn3bCbcQdTe3sn1Ms5m6PtOucS",
	"8Gh2OIsTc4GLNtmz9mhnVzbzNaibCWGuNMaC/AqijArUkmRsDhg6NeD31OhMuPjavz3eeaZtD+RInyC1",
	"1tW0rZa5CmEc9Z/P3SXjMzwSnrHWh8siZJNzH/u6Xd6xKSRr1UjwidLcParsr8TErl6jA0p6VmMYnoI2",
	"LM26anyMQTTKni/JD0wTDQZ3xXbODLZEZuAIZe2hSp6hlOjV4oMGtSpEcg0KA+QhlsQvWNUWUPoc1P4t",
	"adI0vrOCd8r+sbChUqExrj096KlVa3hpxENmQBPuNI24DmUuDDKJYllN64JWbm+tQsiJWRM75a4YNfVt",
	"Dxo6oQKMhO018QsOrgjv8cQHwb/lQHgEwiCpU2VNKVTaC6baoPmIiHeiWH9t9RoYvI/JU+zvIO6eOLkV",
	"kFHE3YNN1tlBSW3U9xUWHsSnLCuyK5TCsND8S9f4Tk3XnVtVtopgrVJ7VzjVboA9VKh98A3H9fSUi3kP",
	"K93DFL54bp8yCdOmKLkHzpvDgA+slHp1qcxKkLkTnESXeXT1lIBolO/DkQO8xMVM9vCnq7HNb1vhMGqY",
	"iEjKhD2MbZ8YUuRtPr3JpKs8dkgwov4SsXYkJ1djGtB7UNrJvX9JHSkWLON0RF8OjgfHNKAZM7E1yDBU",
	"6fD+5dBPPoZ2K7wxh54Yew0mjEF7hewIwzrIliOrczPjy1KF9Y2+AWO1tPtXI9tP7V3ed+Yy3pV2HIPg",
	"uTGh/c9x/yQk4Sk3/bPZF8cdvLFcBp1B1C68oVSHvv9y8uL9ya+/0hVDTktU6mq1qiwq0henlc2G/VPN",
	"py6sV9XdZDQmwzsuLTDQ8tamqs01G3m/HB+7AZMwIGwQsixLEBZxKYZfNPrme818O+R0VWhsLjbdfeUi",
	"uTZxtGE+cJOvcpZ3XQ7bm89homVS92TNqYUthBFtmIiYihwedulTtQxMn/oEvJtAThAehKLN7FjylYwW",
	"O5mr1fnXvoAoRiuN1wZFJiTAosZMpSnZ9JS5CVNzMMX7iwgM40klsLYLym2K68NoTXHjsy4g6sXp9r1J",
	"oy2stMkpMzDvn1L7OwUKaClfTBJvAOEzDejbD69uri4nd2fnr8cX52c0oB9uzq9rP8cXk/M31yeTy+pi",
	"Zz6I+L3aB3loH3CsmHjtYUtKGwiAC/PyF9pXCPtNVsGhzU8cCGD+VsLLjHGl8VgYdWtx5XLpcoMrJFif",
	"6orc9nbkFurG1Cwi00jPOQgjAh5s3g5oXb4HNK0C9mKfjFxJDj/GYGJwuRLm2sgUVJ0XEqmIkObZ6OGk",
	"mDqQhwJrukL2k0jiOn1+AlWs0s5vXobLYUhaq1tVjWP9rn81uoXH+9lca13k/UjGtap+FaGg8zAErWd5",
	"kizaOKZEJai5vdfLBYbadTCsU73o5vccFPdvVAsycnr93nZ1xxOmTGNxcnb6E2Hwn9UEzr5VbcIc1zML",
	"qnAgnFO8Huh0nFnrJc3T3sX49U/lioFnK6PvFZF40W3NHVC09atcR0L6ntRSmZ2E9Ufhppb4czC9zYYm",
	"3GzngYu2KlwxO9kceald7d6896fG99zOvJcuKRIwPWPoM3td+zwjMyXTMk1yjUXLD6TveeSLt0eyzaRw",
	"clCjV4txtIlC26F7uy1Z2UYSp+qg4KcZM3FFT92ROhhnHV/tErh/d+1wIcmp8/6ATOr1sl6jvGpR20fu",
	"8GWtCvqnEzVmZqVPF4QbTcZngeNaRe7VekdQfIIRNDhO4MhYgau0YSZfPdDY1iFdTxQfbh3OF8EanLDm",
	"CyZa+7jEbfEjPg7aTtfOFz6LndU99KcwHc3rg5ANdt7pw7eN7i05QbVnGbZ+fLHDx4udjxV/4GxmYxlf",
	"Ub/fgKkl/PjMdklmHGRpibGozEGVguLJWbG6mq8ifulmu1vtpy/bVt/a+6NW7juIeOAqfAiotB1zb574",
	"j763q81T7kj1FfiPJosWGUGjcvcKf54RQLXNYUHO37z/L8b7i08bfizvX7Hr37z//4r339RhdP0bGxcW",
	"zZ7pWlnF/fEmhLniZmHbmWS5iX/B0hmqdOBJz8DhiQfFDdBb7Dca1H3RAXOV0BGNjcn0aDhkGR/E+RT/",
	"CWU6pMvb5f8CAAD//2j9lB22MQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
