// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package users

import (
	"time"
)

// Defines values for AssociationTypeAssociationCategory.
const (
	AssociationCategoryHubspotDefined    AssociationTypeAssociationCategory = "HUBSPOT_DEFINED"
	AssociationCategoryIntegratorDefined AssociationTypeAssociationCategory = "INTEGRATOR_DEFINED"
	AssociationCategoryUserDefined       AssociationTypeAssociationCategory = "USER_DEFINED"
)

// Defines values for BatchUsersResponseStatus.
const (
	COMPLETE   BatchUsersResponseStatus = "COMPLETE"
	PENDING    BatchUsersResponseStatus = "PENDING"
	PROCESSING BatchUsersResponseStatus = "PROCESSING"
)

// Defines values for FilterOperator.
const (
	CONTAINSTOKEN    FilterOperator = "CONTAINS_TOKEN"
	EQ               FilterOperator = "EQ"
	GT               FilterOperator = "GT"
	GTE              FilterOperator = "GTE"
	HASPROPERTY      FilterOperator = "HAS_PROPERTY"
	LT               FilterOperator = "LT"
	LTE              FilterOperator = "LTE"
	NEQ              FilterOperator = "NEQ"
	NOTCONTAINSTOKEN FilterOperator = "NOT_CONTAINS_TOKEN"
	NOTHASPROPERTY   FilterOperator = "NOT_HAS_PROPERTY"
)

// Defines values for SortDirection.
const (
	ASCENDING  SortDirection = "ASCENDING"
	DESCENDING SortDirection = "DESCENDING"
)

// AssociationRequest defines model for AssociationRequest.
type AssociationRequest struct {
	To    *AssociationTarget `json:"to,omitempty"`
	Types *[]AssociationType `json:"types,omitempty"`
}

// AssociationTarget defines model for AssociationTarget.
type AssociationTarget struct {
	Id *string `json:"id,omitempty"`
}

// AssociationType defines model for AssociationType.
type AssociationType struct {
	AssociationCategory *AssociationTypeAssociationCategory `json:"associationCategory,omitempty"`
}

// AssociationTypeAssociationCategory defines model for AssociationType.AssociationCategory.
type AssociationTypeAssociationCategory string

// BatchInputItem defines model for BatchInputItem.
type BatchInputItem struct {
	Associations *[]AssociationRequest `json:"associations,omitempty"`

	// Id The ID of the product to update (optional for creates)
	Id string `json:"id"`

	// IdProperty The name of a property whose values are unique for this object
	IdProperty *string           `json:"idProperty,omitempty"`
	Properties map[string]string `json:"properties"`
}

// BatchUsersResponse defines model for BatchUsersResponse.
type BatchUsersResponse struct {
	Errors  *[]ErrorItem              `json:"errors,omitempty"`
	Results *[]UserResponse           `json:"results,omitempty"`
	Status  *BatchUsersResponseStatus `json:"status,omitempty"`
}

// BatchUsersResponseStatus defines model for BatchUsersResponse.Status.
type BatchUsersResponseStatus string

// BatchUsersUpsertRequest defines model for BatchUsersUpsertRequest.
type BatchUsersUpsertRequest struct {
	Inputs []BatchInputItem `json:"inputs"`
}

// Error defines model for Error.
type Error struct {
	Category      *string            `json:"category,omitempty"`
	Context       *ErrorContext      `json:"context,omitempty"`
	CorrelationId *string            `json:"correlationId,omitempty"`
	Errors        *[]ErrorDetail     `json:"errors,omitempty"`
	Links         *map[string]string `json:"links,omitempty"`
	Message       *string            `json:"message,omitempty"`
	SubCategory   *string            `json:"subCategory,omitempty"`
}

// ErrorContext defines model for ErrorContext.
type ErrorContext struct {
	InvalidPropertyName *[]string `json:"invalidPropertyName,omitempty"`
	MissingScopes       *[]string `json:"missingScopes,omitempty"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	Code        *string                 `json:"code,omitempty"`
	Context     *map[string]interface{} `json:"context,omitempty"`
	In          *string                 `json:"in,omitempty"`
	Message     *string                 `json:"message,omitempty"`
	SubCategory *string                 `json:"subCategory,omitempty"`
}

// ErrorItem defines model for ErrorItem.
type ErrorItem struct {
	Context   *map[string]interface{} `json:"context,omitempty"`
	ErrorType *string                 `json:"errorType,omitempty"`
	Message   *string                 `json:"message,omitempty"`
}

// Filter defines model for Filter.
type Filter struct {
	// HighValue A high-value filter criterion.
	HighValue string `json:"highValue,omitempty"`

	// Operator defines model for Filter.Operator
	Operator FilterOperator `json:"operator,omitempty"`

	// PropertyName The property name to filter by.
	PropertyName string `json:"propertyName,omitempty"`

	// Value A single value to match for the property.
	Value string `json:"value,omitempty"`

	// Values List of values to match for the property.
	Values []string `json:"values,omitempty"`
}

// FilterOperator defines model for Filter.Operator
type FilterOperator string

// FilterGroups defines model for FilterGroups.
type FilterGroups struct {
	Filters []Filter `json:"filters,omitempty"`
}

// Paging defines model for Paging.
type Paging struct {
	Next PagingNext `json:"next,omitempty"`
}

// PagingNext defines model for PagingNext.
type PagingNext struct {
	// After The cursor token for the next page of results.
	After string `json:"after,omitempty"`

	// Link The link for the next page of results.
	Link string `json:"link,omitempty"`
}

// PropertyHistory defines model for PropertyHistory.
type PropertyHistory struct {
	// SourceId The source ID of the historical property value.
	SourceId string `json:"sourceId,omitempty"`

	// SourceLabel The source label for the historical property.
	SourceLabel string `json:"sourceLabel,omitempty"`

	// SourceType The source type of the historical property value.
	SourceType string `json:"sourceType,omitempty"`

	// Timestamp When the property value was set.
	Timestamp time.Time `json:"timestamp,omitempty"`

	// UpdatedByUserId The user ID who updated the property.
	UpdatedByUserId int `json:"updatedByUserId,omitempty"`

	// Value The historical value of the property.
	Value string `json:"value,omitempty"`
}

// SearchParams defines model for SearchParams.
type SearchParams struct {
	After      *int         `json:"after,omitempty"`
	Limit      *int         `json:"limit,omitempty"`
	Properties *[]string    `json:"properties,omitempty"`
	Query      *string      `json:"query,omitempty"`
	Schema     FilterGroups `json:"schema,omitempty"`

	// Sorts Use a sorting rule in the request body to see results in a specific order (ascending or descending). Only one sorting rule can be applied to any search.
	Sorts *[]Sort `json:"sorts,omitempty"`
}

// Sort defines model for Sort.
type Sort struct {
	Direction    *SortDirection `json:"direction,omitempty"`
	PropertyName *string        `json:"propertyName,omitempty"`
}

// SortDirection defines model for Sort.Direction.
type SortDirection string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// Archived Indicates if the discount is archived.
	Archived bool `json:"archived,omitempty"`

	// ArchivedAt When the discount was archived.
	ArchivedAt time.Time `json:"archivedAt,omitempty"`

	// CreatedAt When the discount was created.
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// Id Unique identifier for the discount.
	Id string `json:"id,omitempty"`

	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId string `json:"objectWriteTraceId,omitempty"`

	// Properties A key-value map of the contact's properties.
	Properties map[string]string `json:"properties,omitempty"`

	// PropertiesWithHistory A map of the contact's properties including historical values.
	PropertiesWithHistory map[string][]PropertyHistory `json:"propertiesWithHistory,omitempty"`

	// UpdatedAt When the discount was last updated.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Paging  *Paging        `json:"paging,omitempty"`
	Results []UserResponse `json:"results,omitempty"`
}

// Archived defines model for Archived.
type Archived = bool

// Associations defines model for Associations.
type Associations = []string

// Properties defines model for Properties.
type Properties = []string

// PropertiesWithHistory defines model for PropertiesWithHistory.
type PropertiesWithHistory = []string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error
