// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	Filters *[]struct {
		Operator     *string `json:"operator,omitempty"`
		PropertyName *string `json:"propertyName,omitempty"`
		Value        *string `json:"value,omitempty"`
	} `json:"filters,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	Properties struct {
		// Email The new email address of the contact.
		Email *string `json:"email,omitempty"`

		// Firstname The new first name of the contact.
		Firstname *string `json:"firstname,omitempty"`

		// Lastname The new last name of the contact.
		Lastname *string `json:"lastname,omitempty"`
	} `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+cRjgNMyUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
