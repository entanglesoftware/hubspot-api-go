// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	Filters *[]struct {
		Operator     *string `json:"operator,omitempty"`
		PropertyName *string `json:"propertyName,omitempty"`
		Value        *string `json:"value,omitempty"`
	} `json:"filters,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	Properties struct {
		// Email The new email address of the contact.
		Email *string `json:"email,omitempty"`

		// Firstname The new first name of the contact.
		Firstname *string `json:"firstname,omitempty"`

		// Lastname The new last name of the contact.
		Lastname *string `json:"lastname,omitempty"`
	} `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteCrmV3ObjectsContactsContactId(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// DeleteCrmV3ObjectsContactsContactId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCrmV3ObjectsContactsContactId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCrmV3ObjectsContactsContactId(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteCrmV3ObjectsContactsContactId)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
