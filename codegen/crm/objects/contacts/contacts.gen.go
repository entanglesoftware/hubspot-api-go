// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateContactJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
