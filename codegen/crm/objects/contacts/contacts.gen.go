// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateContactJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsTypesAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsJSONBody defines parameters for SearchContacts.
type SearchContactsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsJSONRequestBody defines body for SearchContacts for application/json ContentType.
type SearchContactsJSONRequestBody SearchContactsJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContacts(ctx echo.Context) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContacts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContacts(ctx)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContacts)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
