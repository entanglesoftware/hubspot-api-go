// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateContactJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	After   *string `json:"after,omitempty"`
	Filters *[]struct {
		HighValue    *string   `json:"highValue,omitempty"`
		Operator     *string   `json:"operator,omitempty"`
		PropertyName *string   `json:"propertyName,omitempty"`
		Value        *string   `json:"value,omitempty"`
		Values       *[]string `json:"values,omitempty"`
	} `json:"filters,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`
	Properties         struct {
		// Email The new email address of the contact.
		Email *string `json:"email,omitempty"`

		// Firstname The new first name of the contact.
		Firstname *string `json:"firstname,omitempty"`

		// Lastname The new last name of the contact.
		Lastname *string `json:"lastname,omitempty"`
	} `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteCrmV3ObjectsContactsContactId(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// DeleteCrmV3ObjectsContactsContactId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCrmV3ObjectsContactsContactId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCrmV3ObjectsContactsContactId(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteCrmV3ObjectsContactsContactId)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ypdeOQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
