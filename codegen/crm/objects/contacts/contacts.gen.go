// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateContactJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	Filters *[]struct {
		Operator     *string `json:"operator,omitempty"`
		PropertyName *string `json:"propertyName,omitempty"`
		Value        *string `json:"value,omitempty"`
	} `json:"filters,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	Properties struct {
		// Email The new email address of the contact.
		Email *string `json:"email,omitempty"`

		// Firstname The new first name of the contact.
		Firstname *string `json:"firstname,omitempty"`

		// Lastname The new last name of the contact.
		Lastname *string `json:"lastname,omitempty"`
	} `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteCrmV3ObjectsContactsContactId(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// DeleteCrmV3ObjectsContactsContactId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCrmV3ObjectsContactsContactId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCrmV3ObjectsContactsContactId(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteCrmV3ObjectsContactsContactId)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"i+fX8/8HAAD//3OxXFa4NAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
