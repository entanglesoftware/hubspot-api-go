// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateContactJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsTypesAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsJSONBody defines parameters for SearchContacts.
type SearchContactsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// BatchUpsertContactsJSONRequestBody defines body for BatchUpsertContacts for application/json ContentType.
type BatchUpsertContactsJSONRequestBody = BatchUpsertInput

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsJSONRequestBody defines body for SearchContacts for application/json ContentType.
type SearchContactsJSONRequestBody SearchContactsJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// Batch upsert contacts
	// (POST /crm/v3/objects/contacts/batch/upsert)
	BatchUpsertContacts(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContacts(ctx echo.Context) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// BatchUpsertContacts converts echo context to params.
func (w *ServerInterfaceWrapper) BatchUpsertContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchUpsertContacts(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContacts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContacts(ctx)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/batch/upsert", wrapper.BatchUpsertContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContacts)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GJCU9qNsov8JeDLAy7vlfwMAAP//q1fEdgtHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
