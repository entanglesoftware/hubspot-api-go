// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateContactJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsTypesAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsJSONBody defines parameters for SearchContacts.
type SearchContactsJSONBody struct {
	After        *string       `json:"after,omitempty"`
	FilterGroups *FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int          `json:"limit,omitempty"`
	Properties   *[]string     `json:"properties,omitempty"`
	Query        *string       `json:"query,omitempty"`
	Sorts        *[]string     `json:"sorts,omitempty"`
}

// SearchContactsParams defines parameters for SearchContacts.
type SearchContactsParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsJSONRequestBody defines body for SearchContacts for application/json ContentType.
type SearchContactsJSONRequestBody SearchContactsJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContacts(ctx echo.Context, params SearchContactsParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContacts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContacts(ctx, params)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContacts)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b6QWHjsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
