// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateContactJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	After   *string `json:"after,omitempty"`
	Filters *[]struct {
		HighValue    *string   `json:"highValue,omitempty"`
		Operator     *string   `json:"operator,omitempty"`
		PropertyName *string   `json:"propertyName,omitempty"`
		Value        *string   `json:"value,omitempty"`
		Values       *[]string `json:"values,omitempty"`
	} `json:"filters,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`
	Properties         struct {
		// Email The new email address of the contact.
		Email *string `json:"email,omitempty"`

		// Firstname The new first name of the contact.
		Firstname *string `json:"firstname,omitempty"`

		// Lastname The new last name of the contact.
		Lastname *string `json:"lastname,omitempty"`
	} `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
