// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	Properties struct {
		// Email The new email address of the contact.
		Email *string `json:"email,omitempty"`

		// Firstname The new first name of the contact.
		Firstname *string `json:"firstname,omitempty"`

		// Lastname The new last name of the contact.
		Lastname *string `json:"lastname,omitempty"`
	} `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
