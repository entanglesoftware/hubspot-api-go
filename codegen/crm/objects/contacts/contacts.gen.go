// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// AssociationCategory Category of the association.
		AssociationCategory *CreateContactJSONBodyAssociationsAssociationCategory `json:"associationCategory,omitempty"`

		// AssociationTypeId ID of the association type.
		AssociationTypeId *int32 `json:"associationTypeId,omitempty"`

		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty *string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId *string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsByEmailJSONBody defines parameters for SearchContactsByEmail.
type SearchContactsByEmailJSONBody struct {
	After      *string   `json:"after,omitempty"`
	Limit      *int      `json:"limit,omitempty"`
	Properties *[]string `json:"properties,omitempty"`
	Query      *string   `json:"query,omitempty"`
	Schema     *Filters  `json:"schema,omitempty"`
	Sorts      *[]string `json:"sorts,omitempty"`
}

// SearchContactsByEmailParams defines parameters for SearchContactsByEmail.
type SearchContactsByEmailParams struct {
	// Hapikey HubSpot API key
	Hapikey string `form:"hapikey" json:"hapikey"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsByEmailJSONRequestBody defines body for SearchContactsByEmail for application/json ContentType.
type SearchContactsByEmailJSONRequestBody SearchContactsByEmailJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContactsByEmail(ctx echo.Context, params SearchContactsByEmailParams) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContactsByEmail converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContactsByEmail(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchContactsByEmailParams
	// ------------- Required query parameter "hapikey" -------------

	err = runtime.BindQueryParameter("form", true, true, "hapikey", ctx.QueryParams(), &params.Hapikey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hapikey: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContactsByEmail(ctx, params)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContactsByEmail)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
