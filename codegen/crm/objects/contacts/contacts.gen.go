// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateContactJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsTypesAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsJSONBody defines parameters for SearchContacts.
type SearchContactsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// BatchUpsertContactsJSONRequestBody defines body for BatchUpsertContacts for application/json ContentType.
type BatchUpsertContactsJSONRequestBody = BatchUpsertInput

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsJSONRequestBody defines body for SearchContacts for application/json ContentType.
type SearchContactsJSONRequestBody SearchContactsJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// Batch upsert contacts
	// (POST /crm/v3/objects/contacts/batch/upsert)
	BatchUpsertContacts(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContacts(ctx echo.Context) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// BatchUpsertContacts converts echo context to params.
func (w *ServerInterfaceWrapper) BatchUpsertContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchUpsertContacts(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContacts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContacts(ctx)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/batch/upsert", wrapper.BatchUpsertContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContacts)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
