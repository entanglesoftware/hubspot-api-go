// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XyjTGd1eb/8NAAD//0FoVHHgHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
