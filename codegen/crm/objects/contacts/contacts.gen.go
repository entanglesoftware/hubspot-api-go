// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contacts

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// Defines values for CreateContactJSONBodyAssociationsTypesAssociationCategory.
const (
	HUBSPOTDEFINED    CreateContactJSONBodyAssociationsTypesAssociationCategory = "HUBSPOT_DEFINED"
	INTEGRATORDEFINED CreateContactJSONBodyAssociationsTypesAssociationCategory = "INTEGRATOR_DEFINED"
	Search            CreateContactJSONBodyAssociationsTypesAssociationCategory = "Search"
	USERDEFINED       CreateContactJSONBodyAssociationsTypesAssociationCategory = "USER_DEFINED"
)

// GetContactsParams defines parameters for GetContacts.
type GetContactsParams struct {
	// Limit Maximum number of results per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Cursor token for the next page of results.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// PropertiesWithHistory Comma-separated list of properties to include with their historical values.
	// Historical data reduces the maximum number of objects returned per request.
	PropertiesWithHistory *[]string `form:"propertiesWithHistory,omitempty" json:"propertiesWithHistory,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// CreateContactJSONBody defines parameters for CreateContact.
type CreateContactJSONBody struct {
	// Associations List of associations for the contact.
	Associations *[]struct {
		// To Target object details for the association.
		To *struct {
			// Id Target object ID.
			Id *string `json:"id,omitempty"`
		} `json:"to,omitempty"`
		Types *[]struct {
			// AssociationCategory Category of the association.
			AssociationCategory *CreateContactJSONBodyAssociationsTypesAssociationCategory `json:"associationCategory,omitempty"`

			// AssociationTypeId ID of the association type.
			AssociationTypeId *int32 `json:"associationTypeId,omitempty"`
		} `json:"types,omitempty"`
	} `json:"associations,omitempty"`

	// ObjectWriteTraceId Trace ID for object write operations.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs of contact properties.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONBodyAssociationsTypesAssociationCategory defines parameters for CreateContact.
type CreateContactJSONBodyAssociationsTypesAssociationCategory string

// GdprDeleteContactJSONBody defines parameters for GdprDeleteContact.
type GdprDeleteContactJSONBody struct {
	// IdProperty The property used to identify the contact (e.g., `email` or `phone`).
	IdProperty string `json:"idProperty,omitempty"`

	// ObjectId The unique identifier of the contact to delete.
	ObjectId string `json:"objectId,omitempty"`
}

// MergeContactsJSONBody defines parameters for MergeContacts.
type MergeContactsJSONBody struct {
	// ObjectIdToMerge ID of the contact to merge into the primary contact.
	ObjectIdToMerge string `json:"objectIdToMerge"`

	// PrimaryObjectId ID of the primary contact that will remain after the merge.
	PrimaryObjectId string `json:"primaryObjectId"`
}

// SearchContactsJSONBody defines parameters for SearchContacts.
type SearchContactsJSONBody struct {
	After        *string        `json:"after,omitempty"`
	FilterGroups []FilterGroups `json:"filterGroups,omitempty"`
	Limit        *int           `json:"limit,omitempty"`
	Properties   *[]string      `json:"properties,omitempty"`
	Query        *string        `json:"query,omitempty"`
	Sorts        *[]string      `json:"sorts,omitempty"`
}

// GetContactByIdParams defines parameters for GetContactById.
type GetContactByIdParams struct {
	// Properties Comma-separated list of properties to include in the response.
	// If a specified property is not present, it will be ignored.
	Properties *[]string `form:"properties,omitempty" json:"properties,omitempty"`

	// Associations Comma-separated list of object types to retrieve associated IDs for.
	// Nonexistent associations will be ignored.
	Associations *[]string `form:"associations,omitempty" json:"associations,omitempty"`

	// Archived Include only archived results.
	Archived *bool `form:"archived,omitempty" json:"archived,omitempty"`
}

// UpdateContactJSONBody defines parameters for UpdateContact.
type UpdateContactJSONBody struct {
	// ObjectWriteTraceId Unique trace ID for the operation.
	ObjectWriteTraceId *string `json:"objectWriteTraceId,omitempty"`

	// Properties Key-value pairs representing the deal properties to update.
	Properties map[string]string `json:"properties"`
}

// CreateContactJSONRequestBody defines body for CreateContact for application/json ContentType.
type CreateContactJSONRequestBody CreateContactJSONBody

// GdprDeleteContactJSONRequestBody defines body for GdprDeleteContact for application/json ContentType.
type GdprDeleteContactJSONRequestBody GdprDeleteContactJSONBody

// MergeContactsJSONRequestBody defines body for MergeContacts for application/json ContentType.
type MergeContactsJSONRequestBody MergeContactsJSONBody

// SearchContactsJSONRequestBody defines body for SearchContacts for application/json ContentType.
type SearchContactsJSONRequestBody SearchContactsJSONBody

// UpdateContactJSONRequestBody defines body for UpdateContact for application/json ContentType.
type UpdateContactJSONRequestBody UpdateContactJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve a paginated list of contacts
	// (GET /crm/v3/objects/contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// Create a new contact
	// (POST /crm/v3/objects/contacts)
	CreateContact(ctx echo.Context) error
	// GDPR Delete Contact
	// (POST /crm/v3/objects/contacts/gdpr-delete)
	GdprDeleteContact(ctx echo.Context) error
	// Merge two contacts
	// (POST /crm/v3/objects/contacts/merge)
	MergeContacts(ctx echo.Context) error
	// Search for contacts by email
	// (POST /crm/v3/objects/contacts/search)
	SearchContacts(ctx echo.Context) error
	// Delete a contact
	// (DELETE /crm/v3/objects/contacts/{contactId})
	DeleteContactById(ctx echo.Context, contactId string) error
	// Retrieve contact details by ID
	// (GET /crm/v3/objects/contacts/{contactId})
	GetContactById(ctx echo.Context, contactId int64, params GetContactByIdParams) error
	// Update a contact
	// (PATCH /crm/v3/objects/contacts/{contactId})
	UpdateContact(ctx echo.Context, contactId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "propertiesWithHistory" -------------

	err = runtime.BindQueryParameter("form", false, false, "propertiesWithHistory", ctx.QueryParams(), &params.PropertiesWithHistory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertiesWithHistory: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GdprDeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) GdprDeleteContact(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GdprDeleteContact(ctx)
	return err
}

// MergeContacts converts echo context to params.
func (w *ServerInterfaceWrapper) MergeContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MergeContacts(ctx)
	return err
}

// SearchContacts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchContacts(ctx echo.Context) error {
	var err error

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchContacts(ctx)
	return err
}

// DeleteContactById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteContactById(ctx, contactId)
	return err
}

// GetContactById converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int64

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactByIdParams
	// ------------- Optional query parameter "properties" -------------

	err = runtime.BindQueryParameter("form", false, false, "properties", ctx.QueryParams(), &params.Properties)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter properties: %s", err))
	}

	// ------------- Optional query parameter "associations" -------------

	err = runtime.BindQueryParameter("form", false, false, "associations", ctx.QueryParams(), &params.Associations)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter associations: %s", err))
	}

	// ------------- Optional query parameter "archived" -------------

	err = runtime.BindQueryParameter("form", true, false, "archived", ctx.QueryParams(), &params.Archived)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter archived: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContactById(ctx, contactId, params)
	return err
}

// UpdateContact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId string

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", ctx.Param("contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.objects.contacts.read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/objects/contacts", wrapper.GetContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts", wrapper.CreateContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/gdpr-delete", wrapper.GdprDeleteContact)
	router.POST(baseURL+"/crm/v3/objects/contacts/merge", wrapper.MergeContacts)
	router.POST(baseURL+"/crm/v3/objects/contacts/search", wrapper.SearchContacts)
	router.DELETE(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.DeleteContactById)
	router.GET(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.GetContactById)
	router.PATCH(baseURL+"/crm/v3/objects/contacts/:contactId", wrapper.UpdateContact)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xae2/buhX/KgQ3YBugOGnTe7cZuMDSJG292zi5iXuLoQkSWjq22EqkSlJOjMLffeBD",
	"b8mP2OmK3fyTuhJ5eHiev3OOvmGfxwlnwJTE/W9Y+iHExPwsXtweScl9ShTl7BJkwpkEvSIRPAGhKJj1",
	"NNB/A5C+oIleivt4FAIanCA+QSoERBwZCBAffwZf9bCH1TwB3MdSCcqmeJE9aKOk32hapGCnhUJOAttD",
	"NM3SXY45U8RX3fcgwg/pDFpuM2AB9YkCiai9kG9pISpRtqvE0JjzCAjDHn7Ym/I9/XRPfqHJHjcESbSX",
	"cMoUCNxXIoWFlx99pJqHfwyBVQ69J9VTJ1zEROE+DoiCPUVjaMhmA04KEVuhBAG1Sy8qwvqzgAnu4z/t",
	"FxLedzZUenR7bjRRMiOZy3/h1S56hGKSlNWcm4ssCdfpdv0b+QI0qbVF69bvXLJtbvKB0a8pIBoAU3RC",
	"QaAJF2WOelscWLPuDkU23LCulC8w35uRKIVMPSX2/iJRcco2SiqofKQqfEel4mK+jG2qIN7EEN3ueUa6",
	"CBZECDJfYo1d10WU+VEaUDZFoSFKfRIhI6mtRJEmwUb2GhGpkNu0Y6NdL6LK7pCakKk+bwM12Q0LDwuQ",
	"aaQepet6pK/rekfXf0Mjs7Z+6ZBOw9+1GTQVeIT0S+dOE7Mf+YIqEK0pbX2j0ecTxUXzyAAmlIFEMQ8g",
	"MuHF8t07z7Z4GFga4/4nfPob9vDQ/H0/Mn9OsYffjswf/fPd0dXtxeX5xenl6D966fnotvbo+Hw4OhoM",
	"r25H57+eDt2a2sObrWPafEjiDqyQrUCMxIAUz8Q8nm8j31mXPiVl0wis2+vTYqL8MI/iGTNbHy2bZ7+n",
	"Uun4ZN8vPzv3oA7Q9RSO8VbwNJFN97D6eJRjO4/bGdsbgIi1IM0PEv/aUHsj363Q4UXOefVGDB7UxvcZ",
	"6k3rnTh09GvgZeIibdPf/VRIbfH8C7Dc9jWXKCFTUzU4SW7jgxFlX9qP12+e6NjdmGsd+DRkK3kqfBh0",
	"FHH2bamWK2GdPNSaELSNfO0p78kYoqVsRHpFLu4WVrZnYtRZhToesmL0yYShIZtUJE6WAMDqaQYHSlA7",
	"r1kcrHw9/yBBdJlIKkFoA7kPeYZDu5Kfpj4FsX3iHVWFb6XglLK9LTQjlX5E2YQ3OXmXjq8SrtDRxcAY",
	"ZkyYCWTo+PKsUr5SFUFp/exQb8EenoGQltTsEFsox0hCcR8f9g56B9jDCVGhcdV9X8T7s8N9R3bflQHm",
	"3RRaCoY3oBEByWNStqGHNEYWPDICEy5JmNfAFJpRgr6mIOYoIYLEoPO1voNFmZQzbQr4LaisAjBMZitx",
	"/1OdjzPyQOM0RiyNxyBK0RElIAx3mjw8kDjRQvrpQEsb97FhAnuYGbiHIxpTHQZtorHXnZA0Urj/4qBh",
	"ZIuFV+fjeJNkkbODzz4fvTg7+uUX3M6WzU5lthqdqQYjPI7JngQtNe0vkQNzpfJScVdhAqKsoqfeNRtM",
	"EEEyAZ9OKARFOKASMa5QIkACUx6iCt3TKEJjQHTKuICgd82Ku8mSDKv1tUzjmOh0gU/t0hJrOHfLT3hC",
	"hVRGDh7Wlaj7CTGhEb7RbgMPScQDwP0JiSS0S7BCuxDjmrBVx241N5rS0Q9vK+57qkItcCpaKvtr9q54",
	"FhBFkIAg9TWFEFDcMHTnq0iASgXTugKBBHxNQao1dFFrhyxTi+U7dItX6egRuinz8l3VZGVoMq9RlAAl",
	"KMwqjeXBidQe3btmQ87ggUoTycrtzLU94ajWA20KvdIlLUk6ABJJE+z9L6Dk+kKuEXwC2Q6ccXMWzfP2",
	"cWu4W8Zm1iJvjcFuY60LvljcmGrGhC5zlZcHB3bOYLKNwfdJElHfXH//s9T8fisdsFnbp9RhXjS6eqbI",
	"qNhWnhJNgVKo+jK3MZR0btKqJlOd8XCeCm8WHk64bMnGx6azjAhicF+MEGxsz2DB8eVZM9Paje4ErKVp",
	"wsdrHsw3EmSu4noNYMN1H3/mIQs4/Mst7Pk81pAyjx99/G8esnIY6eMTDkZ0tYqt5kPtvYuKe7a0vnPr",
	"rxJXLThsRMQUVBYqAlCERgXN2uRojQFWhdzgZM15kwlRFb/tFMsxUTB1Yb1mJ+5NfXzmmM+6dVeg3RF7",
	"+N2H11cX56Pbk9M3g+HpCfbwh6vTy9J/B8PR6dvLo9F58fCmZQBXOkdXQW14vznTo5yZwFypPShThy9x",
	"GyJrF9nytkQ90tk3HwVVMBKko3bVL3RVoi3AafFe70C5a8nWKeROpia/5jOThFAhSyFj6bxksbC+TQUE",
	"WsMlXm5aS5J6+rRHZMavuBtmVUNOD5dPcXVWLUC/2CiurDtH/RiCCsF5eSoVj0GUZ6iICw1fn2yUOsoq",
	"a3T/XYeqS0aQK1j6HwwjCxd3h+9+FlnLyQWCXXnw82DxSQaLK6zwu44Yu+NaZhYy9X2QcpJG0bwO29ow",
	"VjtKW3id/ZT9aZCIvQAiUBYstcK5E/NeIlLGchmOowxpI4koYb6rKN+eXFwiAdM0KtJPraMSJMJS3R7r",
	"1SFOZqcrpmaphMDUwvaThHnFFv4KvWnPQ3cGLt7paH2XhJzB3d+q/RILJ7eYZhp9dPYbGx9NVJ1Js291",
	"V+PK/qqB212a7aqs+qoF6zmeyzbtuA/qtm0MyNoHOn6saccgpkuM+ky/RpwVFUlh3IojwrjO4D1kjYZq",
	"zopQoetroZXPkOmJ2ZaIpughwmxXWILPWdDYNoZK+q36hWGq1GvcjU9kVjbiZ5lMusBuybLMdawwVFMG",
	"VYt78fLw1U9bZU1D/LzTHQoO67pQIVmqkCqjP//9H/882MYZyqi1LtfmPW4e5T1P2TRY1jPIXLRaWtad",
	"0zqOuucrmgPLfFPaiq7TOX9LQVDXaSw1DEyNkxFBY6JDOLdZPAvV+Uzkml2aRqTMLSWrFmTqh4hIdJeX",
	"+3ceussK/TvrwY6ebZ1VndSWozv30nz02yi5JrXPDB73NYHb/9hvCjw3lCh3V140C99GyyHjNd+0qpXu",
	"re4A2mZdm6gkF7VPCVYQW/xwHiq3d1FroTVvmaMcrWzmrN/cr0GwsJ6aocVVKHEieJy7byo1zndjyxkN",
	"iqrHNZ2qTlZBh6/ng2DV5K0EmFrTWQGUTL83ISos2r35DRsdg2XDrpt1cM+QGwgDTFksUS431sFCDgbl",
	"UtUmvHQE6ldNJEePgTYBqiS6y29710PXbPMBaUtMLEak6+jqQ4eettJOuSf38yu81pT0eTj5Iwwnn6de",
	"z1Ov7whg84FXHRiO52hw0jnpIsoi1looM80ii1QzOnzS3ippHXlZAkWVu26SW9oVsC2s3Se73VWjy4ca",
	"LkGo8mxDXzEX3RYTjepJv7d9UFUV4YYjEAEu7md4R0eNWkppEH+yuUhx0m4x7fMk5P9yEpJ91vjdJyHd",
	"Bz9PQv6Ak5CrcmVU/tY2t49qTrdZtFwlmffgp4KqucmknKQqfKmjqi/iXvbBav5VjAAS4Bud5iSIWZZ+",
	"UxHhPg6VSmR/f58ktBemY/2Pz+N9vLhZ/DcAAP//lWMUi188AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
