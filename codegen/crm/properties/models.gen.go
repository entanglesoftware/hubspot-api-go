// Package properties provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package properties

// Defines values for BatchPropertyResponseStatus.
const (
	COMPLETE BatchPropertyResponseStatus = "COMPLETE"
	PENDING  BatchPropertyResponseStatus = "PENDING"
)

// Defines values for ObjectType.
const (
	ObjectTypeCompanies ObjectType = "companies"
	ObjectTypeContacts  ObjectType = "contacts"
	ObjectTypeDeals     ObjectType = "deals"
)

// Defines values for PropertyFieldType.
const (
	PropertyFieldTypeCheckbox PropertyFieldType = "checkbox"
	PropertyFieldTypeDate     PropertyFieldType = "date"
	PropertyFieldTypeDatetime PropertyFieldType = "datetime"
	PropertyFieldTypeFile     PropertyFieldType = "file"
	PropertyFieldTypeNumber   PropertyFieldType = "number"
	PropertyFieldTypeRadio    PropertyFieldType = "radio"
	PropertyFieldTypeSelect   PropertyFieldType = "select"
	PropertyFieldTypeText     PropertyFieldType = "text"
	PropertyFieldTypeTextarea PropertyFieldType = "textarea"
)

// Defines values for PropertyType.
const (
	PropertyTypeBool        PropertyType = "bool"
	PropertyTypeDatetime    PropertyType = "datetime"
	PropertyTypeEnumeration PropertyType = "enumeration"
	PropertyTypeNumber      PropertyType = "number"
	PropertyTypeString      PropertyType = "string"
)

// BatchError defines model for BatchError.
type BatchError struct {
	Code    *string                 `json:"code,omitempty"`
	Context *map[string]interface{} `json:"context,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// BatchPropertyInput defines model for BatchPropertyInput.
type BatchPropertyInput struct {
	// Inputs Batch of properties to create
	Inputs []Property `json:"inputs"`
}

// BatchPropertyResponse defines model for BatchPropertyResponse.
type BatchPropertyResponse struct {
	Errors  *[]BatchError                `json:"errors,omitempty"`
	Results *[]Property                  `json:"results,omitempty"`
	Status  *BatchPropertyResponseStatus `json:"status,omitempty"`
}

// BatchPropertyResponseStatus defines model for BatchPropertyResponse.Status.
type BatchPropertyResponseStatus string

// Error defines model for Error.
type Error struct {
	Category      *string            `json:"category,omitempty"`
	Context       *ErrorContext      `json:"context,omitempty"`
	CorrelationId *string            `json:"correlationId,omitempty"`
	Errors        *[]ErrorDetail     `json:"errors,omitempty"`
	Links         *map[string]string `json:"links,omitempty"`
	Message       *string            `json:"message,omitempty"`
	SubCategory   *string            `json:"subCategory,omitempty"`
}

// ErrorContext defines model for ErrorContext.
type ErrorContext struct {
	InvalidPropertyName *[]string `json:"invalidPropertyName,omitempty"`
	MissingScopes       *[]string `json:"missingScopes,omitempty"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	Code        *string                 `json:"code,omitempty"`
	Context     *map[string]interface{} `json:"context,omitempty"`
	In          *string                 `json:"in,omitempty"`
	Message     *string                 `json:"message,omitempty"`
	SubCategory *string                 `json:"subCategory,omitempty"`
}

// ObjectType defines model for ObjectType.
type ObjectType string

// Paging defines model for Paging.
type Paging struct {
	Next *PagingNext `json:"next,omitempty"`
}

// PagingNext defines model for PagingNext.
type PagingNext struct {
	After *string `json:"after,omitempty"`
	Link  *string `json:"link,omitempty"`
}

// Property defines model for Property.
type Property struct {
	// Archived Whether the property is archived
	Archived *bool `json:"archived,omitempty"`

	// CalculationFormula FHIRPath formula for calculated properties
	CalculationFormula *string `json:"calculationFormula,omitempty"`

	// Description A description of the property
	Description *string `json:"description,omitempty"`

	// DisplayOrder The order this property appears in the UI
	DisplayOrder *int `json:"displayOrder,omitempty"`

	// ExternalOptions Whether options are fetched externally
	ExternalOptions *bool `json:"externalOptions,omitempty"`

	// FieldType Controls how the property appears in forms
	FieldType PropertyFieldType `json:"fieldType"`

	// FormField Whether the property should be available in forms
	FormField *bool `json:"formField,omitempty"`

	// GroupName The internal name of the property group
	GroupName *string `json:"groupName,omitempty"`

	// HasUniqueValue Whether property values must be unique
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`

	// Hidden Whether the property should be hidden from UI
	Hidden *bool `json:"hidden,omitempty"`

	// Label Display label
	Label string `json:"label"`

	// Name Internal property name (must be lowercase with underscores)
	Name    string            `json:"name"`
	Options *[]PropertyOption `json:"options,omitempty"`

	// ReferencedObjectType For reference properties, the referenced object type
	ReferencedObjectType *string `json:"referencedObjectType,omitempty"`

	// Type The data type of the property
	Type PropertyType `json:"type"`
}

// PropertyFieldType Controls how the property appears in forms
type PropertyFieldType string

// PropertyType The data type of the property
type PropertyType string

// PropertyCollectionResponse defines model for PropertyCollectionResponse.
type PropertyCollectionResponse struct {
	Paging  *Paging     `json:"paging,omitempty"`
	Results *[]Property `json:"results,omitempty"`
}

// PropertyOption defines model for PropertyOption.
type PropertyOption struct {
	// Description A description of the option
	Description *string `json:"description,omitempty"`

	// DisplayOrder The order this option appears in dropdowns
	DisplayOrder *int `json:"displayOrder,omitempty"`

	// Hidden Whether the option should be hidden
	Hidden *bool `json:"hidden,omitempty"`

	// Label The user-facing label for the option
	Label string `json:"label"`

	// Value The internal value for the option
	Value string `json:"value"`
}

// PropertyUpdateInput defines model for PropertyUpdateInput.
type PropertyUpdateInput struct {
	// Archived Whether the property is archived
	Archived *bool `json:"archived,omitempty"`

	// CalculationFormula FHIRPath formula for calculated properties
	CalculationFormula *string `json:"calculationFormula,omitempty"`

	// Description A description of the property
	Description *string `json:"description,omitempty"`

	// DisplayOrder The order this property appears in the UI
	DisplayOrder *int `json:"displayOrder,omitempty"`

	// ExternalOptions Whether options are fetched externally
	ExternalOptions *bool       `json:"externalOptions,omitempty"`
	FieldType       interface{} `json:"fieldType"`

	// FormField Whether the property should be available in forms
	FormField *bool `json:"formField,omitempty"`

	// GroupName The internal name of the property group
	GroupName *string `json:"groupName,omitempty"`

	// HasUniqueValue Whether property values must be unique
	HasUniqueValue *bool `json:"hasUniqueValue,omitempty"`

	// Hidden Whether the property should be hidden from UI
	Hidden *bool `json:"hidden,omitempty"`

	// Label Display label
	Label   string            `json:"label"`
	Name    interface{}       `json:"name"`
	Options *[]PropertyOption `json:"options,omitempty"`

	// ReferencedObjectType For reference properties, the referenced object type
	ReferencedObjectType *string     `json:"referencedObjectType,omitempty"`
	Type                 interface{} `json:"type"`
}

// N400Error defines model for 400Error.
type N400Error = Error

// N401Error defines model for 401Error.
type N401Error = Error

// N403Error defines model for 403Error.
type N403Error = Error
