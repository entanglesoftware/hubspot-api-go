// Package properties provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package properties

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	Oauth2Scopes = "oauth2.Scopes"
)

// BatchCreatePropertiesJSONRequestBody defines body for BatchCreateProperties for application/json ContentType.
type BatchCreatePropertiesJSONRequestBody = BatchPropertyInput

// UpdatePropertyJSONRequestBody defines body for UpdateProperty for application/json ContentType.
type UpdatePropertyJSONRequestBody = PropertyUpdateInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get existing properties
	// (GET /crm/v3/properties/{objectType})
	GetProperties(ctx echo.Context, objectType ObjectType) error
	// Batch create properties
	// (POST /crm/v3/properties/{objectType}/batch/create)
	BatchCreateProperties(ctx echo.Context, objectType ObjectType) error
	// Update a property
	// (PATCH /crm/v3/properties/{objectType}/{propertyName})
	UpdateProperty(ctx echo.Context, objectType ObjectType, propertyName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProperties converts echo context to params.
func (w *ServerInterfaceWrapper) GetProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.contacts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProperties(ctx, objectType)
	return err
}

// BatchCreateProperties converts echo context to params.
func (w *ServerInterfaceWrapper) BatchCreateProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.contacts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchCreateProperties(ctx, objectType)
	return err
}

// UpdateProperty converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProperty(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "propertyName" -------------
	var propertyName string

	err = runtime.BindStyledParameterWithOptions("simple", "propertyName", ctx.Param("propertyName"), &propertyName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertyName: %s", err))
	}

	ctx.Set(Oauth2Scopes, []string{"crm.schemas.contacts.write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProperty(ctx, objectType, propertyName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/properties/:objectType", wrapper.GetProperties)
	router.POST(baseURL+"/crm/v3/properties/:objectType/batch/create", wrapper.BatchCreateProperties)
	router.PATCH(baseURL+"/crm/v3/properties/:objectType/:propertyName", wrapper.UpdateProperty)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZ3W/bOBL/VwjePdwBSuw0we3Cb63b7hq4Nkba3j0sgoCWRhZ3KVLlhxNf4P/9MKQ+",
	"aElO7fSyBe5JMsWZ+c33kH6kqSorJUFaQ2ePVIOplDTgf3Sf7q6m03daKx2WpQVp8ZVVleAps1zJye9G",
	"SVwzaQElw7e/asjpjP5l0jGahK8mWroLjHe7XUIzMKnmFfKjM/qGZeQGvjowlu6SfTgXfz6cL5I5WyjN",
	"/wPZAM/ln4/nvdIrnmUgyRlZSOPynKccpCUV6JIbw5U0FMlqpj2XvmE2LVrUlVYVaMsbz2eAT7utgM6o",
	"sZrLddBZWngIymUZRyRMLCNaqx0kDZ1a/Q6p910JxrD1GM/dyO4+ylrAdiErZ4doOS77t3782LQgKifd",
	"dmIVSTUwCzSh8MDKSgCd/fZIcw4i+xyAeA0TutbKVR9ZiUuoN0stl7nSpXcoTahgKxB0RufOWFWSBiVN",
	"qKyp/Ie7qvvQU/42odxCaU4Ih1YKWpU9LAL5xXTaMmdas603rIavjmvI6Oy3xki3J5j7pi4GQ4sDhk2w",
	"/Ynwo6jb9REjYOOEfRbj2C59tsYy6wJw6Uq0xvz6w/Kf7z6/owldvvv4dvHxl8gyR4bmodxhFtZKb7+V",
	"P6ek/7wm8xy0BuFDcJGNyni+c7yst2AZF2NmFFz+YQ6n/giUE+pAQo1bzQ/b7hhnzDvr9ivEhgmeNTES",
	"kjqyzyHgreq+nsr1p1RVYE4hPQZ2bfFnVeEBcy5HSV7M8Nd+MVTOLr9wA5OoR9LUTnzNgAl8Kp2BxpdK",
	"q8yle3WplpvQhzPkdrZhGsupQbadsHkkIF5tRXWLb2uh3cp1I75bWkZAHs7W6qwu4ZF6+3ov2RphDpwm",
	"T0vvwOajT+5vWDraOpDKcgt61LmYtKd7ta2mQ0k6LfgGstBuc+aEpbOcCQP9+eTfBdgCNLEFNB14S7gh",
	"LYcWwkopAUx6DEykLpS390qXTrBhX3//6+JmyWxB8rADn6QhhCxq98OO2wPZZ/2aRL9xdIjBj3LjphJs",
	"6yNqyO5zAcTHOrEFN50VWFUB04Zw6QV8WVDfzHmJ2fPq4uqnq58v/3H1E9YdGRbP2tWfWxRcWliDb6Tw",
	"YEFLJq69ZHO8c1QgIEwDycGmBWSkYSa2oy6KRqW+vph/WglDCnW/7/dIY/QaeqapFfW4hQ+mgWGZCPMZ",
	"Piwv8TUtIP1jpR5oQg0IjNeEapZxhcOWK1egKQITgPnbznXd3oHfEMR7VGTPVGF6PSKMTaGcyMgKCNsw",
	"LthKQKza0GjRMDkWJOhKNDnBstOPO+KJ44F1fB4dKFkw80Xyrw7+xYSD44OiFbxBOkNKZyzq6jyzUf0K",
	"fxJ5ZlHorBnYkFyrMmTFUFI9dfet+DYkIgmfY1t92JK6L8Qj+sBYctQ5i8YxLVjvob81JhHqHnTKDJB7",
	"bgviJHaWVGkwf98DUW7vap/dPVVOVJe/zx2AQwkYn65z0CBTyPab9uBYSdqdUS1NvM86HiQ0DuKlJIfm",
	"oLFgz5hlnmykwDZFoZ0C2uyOqgFuAt2EPcbGftrvfx92vvhc5N3eRFW9Oa5xt8c1yrkSWGq4kodPTVU7",
	"Mpw0HLzYwejIGeC67ZX76pzeSEN07+XFvFA8BRK8TJSE726yQUjccDKtqkzdS/O9XfY5Ra6G0y9xp5Q2",
	"VNAZ0Gc5S7lchxLnh54DRg0eI6/HbLnpWsHBJuT3PCXg9TfTqsmnIO7IJPpSYZK3tzxMiOvc386cHur9",
	"YN0bWqRC/ruo6HcrtrdnVK+hPrd+J/bjkVxYLrwxSyZ9QpP5zYfekMqtt+uvbvWpUtZv6I7W5PUSW+EG",
	"tAkML86n59PQLkCyitMZvfRLCa2YLbzCk1SXk83lpJMzeVRt2d/hljXYIdgbsJrDBoivVn6eFtxYTGF4",
	"4MYi/ug+DfVistcL8Gt7Q0F/AbuMla2YZiVYPIGhb/HA6mF392YdTpqcfmEaH9l2t8n+nfar6fQlLmmf",
	"aAMjN7efXJqCMbkTRLfbEnoVsI2JbHWYjF3Ke9qLE2kvmovlhBpXlgwP/+irMTdjiLK1P4JHrrxF2m/E",
	"2WTFbFpM6jtX7CHKjETd3H8npROWVyIeO7CAM2K4XAucPsK/Af0Q87eKgccPDjWP743Kti8RZSOX4b0C",
	"hQeY3SDkL14czFPRHhWyEAb+35NX059+LCqmLWeCmJCLPy7/kPbyRNrLsdwNf3cEE/9vcvexii5Md2GE",
	"tWkxTN/QuAnrTkkZ5FzyenDYT9awOTqKnZil+9H+vVmbnHwcp8kYxNhUT4Lsz00vXzbGxquj6saLtson",
	"SsWWOA81a7Izd0Js/w9SdJAnB5MTySB1mtutTwrFnC1e+at1XZ7XZj1vrtbP7zW3QG8xmAzoTZNKTgs6",
	"o4W1lZlNJqzi54Vb4SNVJc6s/w0AAP//Dy7T3f8fAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
