// Package properties provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package properties

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// BatchCreatePropertiesJSONRequestBody defines body for BatchCreateProperties for application/json ContentType.
type BatchCreatePropertiesJSONRequestBody = BatchPropertyInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get existing properties
	// (GET /crm/v3/properties/{objectType})
	GetProperties(ctx echo.Context, objectType ObjectType) error
	// Batch create properties
	// (POST /crm/v3/properties/{objectType}/batch/create)
	BatchCreateProperties(ctx echo.Context, objectType ObjectType) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProperties converts echo context to params.
func (w *ServerInterfaceWrapper) GetProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProperties(ctx, objectType)
	return err
}

// BatchCreateProperties converts echo context to params.
func (w *ServerInterfaceWrapper) BatchCreateProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchCreateProperties(ctx, objectType)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/properties/:objectType", wrapper.GetProperties)
	router.POST(baseURL+"/crm/v3/properties/:objectType/batch/create", wrapper.BatchCreateProperties)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
