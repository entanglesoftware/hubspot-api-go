// Package properties provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package properties

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// BatchCreatePropertiesJSONRequestBody defines body for BatchCreateProperties for application/json ContentType.
type BatchCreatePropertiesJSONRequestBody = BatchPropertyInput

// UpdatePropertyJSONRequestBody defines body for UpdateProperty for application/json ContentType.
type UpdatePropertyJSONRequestBody = PropertyUpdateInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get existing properties
	// (GET /crm/v3/properties/{objectType})
	GetProperties(ctx echo.Context, objectType ObjectType) error
	// Batch create properties
	// (POST /crm/v3/properties/{objectType}/batch/create)
	BatchCreateProperties(ctx echo.Context, objectType ObjectType) error
	// Update a property
	// (PATCH /crm/v3/properties/{objectType}/{propertyName})
	UpdateProperty(ctx echo.Context, objectType ObjectType, propertyName string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProperties converts echo context to params.
func (w *ServerInterfaceWrapper) GetProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProperties(ctx, objectType)
	return err
}

// BatchCreateProperties converts echo context to params.
func (w *ServerInterfaceWrapper) BatchCreateProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchCreateProperties(ctx, objectType)
	return err
}

// UpdateProperty converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProperty(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "objectType" -------------
	var objectType ObjectType

	err = runtime.BindStyledParameterWithOptions("simple", "objectType", ctx.Param("objectType"), &objectType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter objectType: %s", err))
	}

	// ------------- Path parameter "propertyName" -------------
	var propertyName string

	err = runtime.BindStyledParameterWithOptions("simple", "propertyName", ctx.Param("propertyName"), &propertyName, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter propertyName: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProperty(ctx, objectType, propertyName)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/crm/v3/properties/:objectType", wrapper.GetProperties)
	router.POST(baseURL+"/crm/v3/properties/:objectType/batch/create", wrapper.BatchCreateProperties)
	router.PATCH(baseURL+"/crm/v3/properties/:objectType/:propertyName", wrapper.UpdateProperty)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
