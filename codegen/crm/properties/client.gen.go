// Package properties provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package properties

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetProperties request
	GetProperties(ctx context.Context, objectType ObjectType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchCreatePropertiesWithBody request with any body
	BatchCreatePropertiesWithBody(ctx context.Context, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchCreateProperties(ctx context.Context, objectType ObjectType, body BatchCreatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePropertyWithBody request with any body
	UpdatePropertyWithBody(ctx context.Context, objectType ObjectType, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProperty(ctx context.Context, objectType ObjectType, propertyName string, body UpdatePropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetProperties(ctx context.Context, objectType ObjectType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPropertiesRequest(c.Server, objectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchCreatePropertiesWithBody(ctx context.Context, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchCreatePropertiesRequestWithBody(c.Server, objectType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchCreateProperties(ctx context.Context, objectType ObjectType, body BatchCreatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchCreatePropertiesRequest(c.Server, objectType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePropertyWithBody(ctx context.Context, objectType ObjectType, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePropertyRequestWithBody(c.Server, objectType, propertyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProperty(ctx context.Context, objectType ObjectType, propertyName string, body UpdatePropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePropertyRequest(c.Server, objectType, propertyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPropertiesRequest generates requests for GetProperties
func NewGetPropertiesRequest(server string, objectType ObjectType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchCreatePropertiesRequest calls the generic BatchCreateProperties builder with application/json body
func NewBatchCreatePropertiesRequest(server string, objectType ObjectType, body BatchCreatePropertiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchCreatePropertiesRequestWithBody(server, objectType, "application/json", bodyReader)
}

// NewBatchCreatePropertiesRequestWithBody generates requests for BatchCreateProperties with any type of body
func NewBatchCreatePropertiesRequestWithBody(server string, objectType ObjectType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/batch/create", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePropertyRequest calls the generic UpdateProperty builder with application/json body
func NewUpdatePropertyRequest(server string, objectType ObjectType, propertyName string, body UpdatePropertyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePropertyRequestWithBody(server, objectType, propertyName, "application/json", bodyReader)
}

// NewUpdatePropertyRequestWithBody generates requests for UpdateProperty with any type of body
func NewUpdatePropertyRequestWithBody(server string, objectType ObjectType, propertyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectType", runtime.ParamLocationPath, objectType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "propertyName", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/crm/v3/properties/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPropertiesWithResponse request
	GetPropertiesWithResponse(ctx context.Context, objectType ObjectType, reqEditors ...RequestEditorFn) (*GetPropertiesResponse, error)

	// BatchCreatePropertiesWithBodyWithResponse request with any body
	BatchCreatePropertiesWithBodyWithResponse(ctx context.Context, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchCreatePropertiesResponse, error)

	BatchCreatePropertiesWithResponse(ctx context.Context, objectType ObjectType, body BatchCreatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchCreatePropertiesResponse, error)

	// UpdatePropertyWithBodyWithResponse request with any body
	UpdatePropertyWithBodyWithResponse(ctx context.Context, objectType ObjectType, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePropertyResponse, error)

	UpdatePropertyWithResponse(ctx context.Context, objectType ObjectType, propertyName string, body UpdatePropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePropertyResponse, error)
}

type GetPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PropertyCollectionResponse
	JSON400      *N400Error
	JSON401      *N401Error
}

// Status returns HTTPResponse.Status
func (r GetPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchCreatePropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BatchPropertyResponse
	JSON207      *BatchPropertyResponse
	JSON400      *N400Error
	JSON401      *N401Error
	JSON403      *N403Error
}

// Status returns HTTPResponse.Status
func (r BatchCreatePropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchCreatePropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Property
	JSON400      *N400Error
	JSON401      *N401Error
	JSON403      *N403Error
}

// Status returns HTTPResponse.Status
func (r UpdatePropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPropertiesWithResponse request returning *GetPropertiesResponse
func (c *ClientWithResponses) GetPropertiesWithResponse(ctx context.Context, objectType ObjectType, reqEditors ...RequestEditorFn) (*GetPropertiesResponse, error) {
	rsp, err := c.GetProperties(ctx, objectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPropertiesResponse(rsp)
}

// BatchCreatePropertiesWithBodyWithResponse request with arbitrary body returning *BatchCreatePropertiesResponse
func (c *ClientWithResponses) BatchCreatePropertiesWithBodyWithResponse(ctx context.Context, objectType ObjectType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchCreatePropertiesResponse, error) {
	rsp, err := c.BatchCreatePropertiesWithBody(ctx, objectType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchCreatePropertiesResponse(rsp)
}

func (c *ClientWithResponses) BatchCreatePropertiesWithResponse(ctx context.Context, objectType ObjectType, body BatchCreatePropertiesJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchCreatePropertiesResponse, error) {
	rsp, err := c.BatchCreateProperties(ctx, objectType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchCreatePropertiesResponse(rsp)
}

// UpdatePropertyWithBodyWithResponse request with arbitrary body returning *UpdatePropertyResponse
func (c *ClientWithResponses) UpdatePropertyWithBodyWithResponse(ctx context.Context, objectType ObjectType, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePropertyResponse, error) {
	rsp, err := c.UpdatePropertyWithBody(ctx, objectType, propertyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePropertyResponse(rsp)
}

func (c *ClientWithResponses) UpdatePropertyWithResponse(ctx context.Context, objectType ObjectType, propertyName string, body UpdatePropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePropertyResponse, error) {
	rsp, err := c.UpdateProperty(ctx, objectType, propertyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePropertyResponse(rsp)
}

// ParseGetPropertiesResponse parses an HTTP response from a GetPropertiesWithResponse call
func ParseGetPropertiesResponse(rsp *http.Response) (*GetPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PropertyCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseBatchCreatePropertiesResponse parses an HTTP response from a BatchCreatePropertiesWithResponse call
func ParseBatchCreatePropertiesResponse(rsp *http.Response) (*BatchCreatePropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchCreatePropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BatchPropertyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest BatchPropertyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdatePropertyResponse parses an HTTP response from a UpdatePropertyWithResponse call
func ParseUpdatePropertyResponse(rsp *http.Response) (*UpdatePropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
